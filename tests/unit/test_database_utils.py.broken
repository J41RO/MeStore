# ~/tests/unit/test_database_utils.py
# ---------------------------------------------------------------------------------------------
# MeStore - Tests para Database Utilities
# Copyright (c) 2025 Jairo. Todos los derechos reservados.
# Licensed under the proprietary license detailed in a LICENSE file in the root of this project.
# ---------------------------------------------------------------------------------------------

"""
Tests para Database Utilities - Operaciones CRUD genéricas

Tests para:
- DatabaseUtils.get_by_id()
- DatabaseUtils.soft_delete()
- DatabaseUtils.hard_delete()  
- DatabaseUtils.get_active()
- DatabaseUtils.exists()
- DatabaseUtils.count_active()
- DatabaseUtils.restore_soft_deleted()
"""

import pytest
import uuid
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession

from app.models.user import User
from app.utils.database import DatabaseUtils


class TestDatabaseUtils:
    """Tests para DatabaseUtils con modelo User"""

    
    def test_get_by_id_existing_record(self, test_db_session: AsyncSession):
        """Test obtener registro existente por ID"""
        # Crear usuario de prueba
        user_data = {
            "nombre": "Juan",
            "apellido": "Pérez",
            "email": "juan.perez@test.com",
            "password_hash": "hashed_password",
            "user_type": "COMPRADOR"
        }
        user = User(**user_data)
        test_db_session.add(user)
        test_db_session.commit()
        test_db_session.refresh(user)

        # Test get_by_id
        found_user = DatabaseUtils.get_by_id(
            test_db_session, User, user.id
        )

        assert found_user is not None
        assert found_user.id == user.id
        assert found_user.email == "juan.perez@test.com"
        assert found_user.deleted_at is None

    
    def test_get_by_id_nonexistent_record(self, test_db_session: AsyncSession):
        """Test obtener registro que no existe"""
        fake_id = uuid.uuid4()

        found_user = DatabaseUtils.get_by_id(
            test_db_session, User, fake_id
        )

        assert found_user is None

    
    def test_soft_delete_existing_record(self, test_db_session: AsyncSession):
        """Test soft delete de registro existente"""
        # Crear usuario
        user = User(
            nombre="Ana",
            apellido="García",
            email="ana.garcia@test.com",
            password_hash="hashed_password",
            user_type="vendedor"
        )
        test_db_session.add(user)
        test_db_session.commit()
        test_db_session.refresh(user)

        # Verificar que no está eliminado
        assert user.deleted_at is None

        # Soft delete
        deleted = DatabaseUtils.soft_delete(
            test_db_session, User, user.id
        )

        assert deleted is True

        # Verificar que está marcado como eliminado
        test_db_session.refresh(user)
        assert user.deleted_at is not None
        assert isinstance(user.deleted_at, datetime)

    
    def test_soft_delete_nonexistent_record(self, test_db_session: AsyncSession):
        """Test soft delete de registro que no existe"""
        fake_id = uuid.uuid4()

        deleted = DatabaseUtils.soft_delete(
            test_db_session, User, fake_id
        )

        assert deleted is False

    
    def test_hard_delete_existing_record(self, test_db_session: AsyncSession):
        """Test hard delete de registro existente"""
        # Crear usuario
        user = User(
            nombre="Carlos",
            apellido="López",
            email="carlos.lopez@test.com",
            password_hash="hashed_password",
            user_type="comprador"
        )
        test_db_session.add(user)
        test_db_session.commit()
        user_id = user.id

        # Hard delete
        deleted = DatabaseUtils.hard_delete(
            test_db_session, User, user_id
        )

        assert deleted is True

        # Verificar que no existe
        found_user = DatabaseUtils.get_by_id(
            test_db_session, User, user_id, include_deleted=True
        )
        assert found_user is None

    
    def test_get_active_filters_soft_deleted(self, test_db_session: AsyncSession):
        """Test que get_active filtra registros soft deleted"""
        # Crear usuarios - uno activo, uno eliminado
        user1 = User(
            nombre="Usuario",
            apellido="Activo",
            email="activo@test.com",
            password_hash="hashed_password",
            user_type="comprador"
        )
        user2 = User(
            nombre="Usuario",
            apellido="Eliminado",
            email="eliminado@test.com",
            password_hash="hashed_password",
            user_type="vendedor",
            deleted_at=datetime.utcnow()
        )

        test_db_session.add_all([user1, user2])
        test_db_session.commit()

        # Get active users
        active_users = DatabaseUtils.get_active(test_db_session, User)

        # Solo debe devolver el usuario activo
        assert len(active_users) == 1
        assert active_users[0].email == "activo@test.com"
        assert active_users[0].deleted_at is None

    
    def test_exists_active_record(self, test_db_session: AsyncSession):
        """Test exists para registro activo"""
        # Crear usuario
        user = User(
            nombre="Test",
            apellido="Exists",
            email="exists@test.com",
            password_hash="hashed_password",
            user_type="comprador"
        )
        test_db_session.add(user)
        test_db_session.commit()

        # Test exists
        exists = DatabaseUtils.exists(test_db_session, User, user.id)
        assert exists is True

        # Test exists con include_deleted
        exists_with_deleted = DatabaseUtils.exists(
            test_db_session, User, user.id, include_deleted=True
        )
        assert exists_with_deleted is True

    
    def test_exists_soft_deleted_record(self, test_db_session: AsyncSession):
        """Test exists para registro soft deleted"""
        # Crear usuario eliminado
        user = User(
            nombre="Test",
            apellido="Deleted",
            email="deleted@test.com",
            password_hash="hashed_password",
            user_type="vendedor",
            deleted_at=datetime.utcnow()
        )
        test_db_session.add(user)
        test_db_session.commit()

        # exists sin include_deleted debe ser False
        exists = DatabaseUtils.exists(test_db_session, User, user.id)
        assert exists is False

        # exists con include_deleted debe ser True
        exists_with_deleted = DatabaseUtils.exists(
            test_db_session, User, user.id, include_deleted=True
        )
        assert exists_with_deleted is True

    
    def test_count_active_excludes_deleted(self, test_db_session: AsyncSession):
        """Test que count_active excluye registros eliminados"""
        # Crear usuarios mixtos
        users = [
            User(nombre="User1", apellido="Active", email="user1@test.com", 
                 password_hash="hash", user_type="comprador"),
            User(nombre="User2", apellido="Active", email="user2@test.com", 
                 password_hash="hash", user_type="vendedor"),
            User(nombre="User3", apellido="Deleted", email="user3@test.com", 
                 password_hash="hash", user_type="comprador", deleted_at=datetime.utcnow())
        ]

        test_db_session.add_all(users)
        test_db_session.commit()

        # Count active
        count = DatabaseUtils.count_active(test_db_session, User)

        # Solo debe contar los 2 activos
        assert count == 2

    
    def test_restore_soft_deleted_record(self, test_db_session: AsyncSession):
        """Test restaurar registro soft deleted"""
        # Crear usuario eliminado
        user = User(
            nombre="Test",
            apellido="Restore",
            email="restore@test.com",
            password_hash="hashed_password",
            user_type="comprador",
            deleted_at=datetime.utcnow()
        )
        test_db_session.add(user)
        test_db_session.commit()
        user_id = user.id

        # Verificar que está eliminado
        assert user.deleted_at is not None

        # Restaurar
        restored = DatabaseUtils.restore_soft_deleted(
            test_db_session, User, user_id
        )

        assert restored is True

        # Verificar que está restaurado
        test_db_session.refresh(user)
        assert user.deleted_at is None

    
    def test_restore_active_record_fails(self, test_db_session: AsyncSession):
        """Test que restaurar registro activo falla"""
        # Crear usuario activo
        user = User(
            nombre="Test",
            apellido="Active",
            email="active@test.com",
            password_hash="hashed_password",
            user_type="vendedor"
        )
        test_db_session.add(user)
        test_db_session.commit()

        # Intentar restaurar (debe fallar)
        restored = DatabaseUtils.restore_soft_deleted(
            test_db_session, User, user.id
        )

        assert restored is False

    
    def test_get_active_with_pagination(self, test_db_session: AsyncSession):
        """Test get_active con límite y offset"""
        # Crear múltiples usuarios
        users = []
        for i in range(5):
            user = User(
                nombre=f"User{i}",
                apellido="Test",
                email=f"user{i}@test.com",
                password_hash="hash",
                user_type="comprador"
            )
            users.append(user)

        test_db_session.add_all(users)
        test_db_session.commit()

        # Test paginación
        page1 = DatabaseUtils.get_active(
            test_db_session, User, limit=2, offset=0
        )
        page2 = DatabaseUtils.get_active(
            test_db_session, User, limit=2, offset=2
        )

        assert len(page1) == 2
        assert len(page2) == 2
        assert page1[0].id != page2[0].id  # Páginas diferentes