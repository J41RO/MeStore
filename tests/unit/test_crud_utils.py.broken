# ~/tests/unit/test_crud_utils.py
# ---------------------------------------------------------------------------------------------
# MeStore - Tests para CRUD Utilities
# Copyright (c) 2025 Jairo. Todos los derechos reservados.
# Licensed under the proprietary license detailed in a LICENSE file in the root of this project.
# ---------------------------------------------------------------------------------------------

"""
Tests para CRUD Utilities - Operaciones Create, Read, Update, Delete

Tests para:
- CRUDOperations.create_record()
- CRUDOperations.update_record()
- CRUDOperations.list_records()
- CRUDOperations.get_record()
- CRUDOperations.delete_record()
- CRUDBase class operations
"""

import pytest
import uuid
from datetime import datetime
from sqlalchemy.orm import Session

from app.models.user import User
from app.utils.crud_sync import CRUDOperationsSync as CRUDOperations
from app.utils.crud import CRUDBase


class TestCRUDOperations:
    """Tests para CRUDOperations genéricas"""

    
    def test_create_record_success(self, test_db_session: Session):
        """Test crear registro exitosamente"""
        user_data = {
            "nombre": "María",
            "apellido": "González",
            "email": "maria.gonzalez@test.com",
            "password_hash": "secure_hash",
            "user_type": "COMPRADOR"
        }

        user = CRUDOperations.create_record(
            test_db_session, User, user_data
        )

        assert user is not None
        assert user.id is not None
        assert user.nombre == "María"
        assert user.apellido == "González"
        assert user.email == "maria.gonzalez@test.com"
        assert user.user_type == "comprador"
        assert user.created_at is not None
        assert user.deleted_at is None

    
    def test_create_record_filters_invalid_fields(self, test_db_session: Session):
        """Test que create_record filtra campos inválidos"""
        user_data = {
            "nombre": "Pedro",
            "apellido": "Ramírez",
            "email": "pedro.ramirez@test.com",
            "password_hash": "hash123",
            "user_type": "VENDEDOR",
            "invalid_field": "should_be_ignored",  # Campo inválido
            "id": uuid.uuid4(),  # Campo protegido
            "created_at": datetime.utcnow()  # Campo protegido
        }

        user = CRUDOperations.create_record(
            test_db_session, User, user_data
        )

        assert user.nombre == "Pedro"
        assert user.email == "pedro.ramirez@test.com"
        assert not hasattr(user, "invalid_field")
        # ID debe ser generado automáticamente, no el proporcionado
        assert user.id != user_data["id"]

    
    def test_update_record_success(self, test_db_session: Session):
        """Test actualizar registro exitosamente"""
        # Crear usuario
        user = User(
            nombre="Luis",
            apellido="Martín",
            email="luis.martin@test.com",
            password_hash="hash456",
            user_type="comprador"
        )
        test_db_session.add(user)
        await test_db_session.commit()
        await test_db_session.refresh(user)

        # Actualizar
        update_data = {
            "nombre": "Luis Carlos",
            "apellido": "Martín López"
        }

        updated_user = CRUDOperations.update_record(
            test_db_session, User, user.id, update_data
        )

        assert updated_user is not None
        assert updated_user.id == user.id
        assert updated_user.nombre == "Luis Carlos"
        assert updated_user.apellido == "Martín López"
        assert updated_user.email == "luis.martin@test.com"  # No cambió
        assert updated_user.updated_at > user.updated_at

    
    def test_update_record_nonexistent(self, test_db_session: Session):
        """Test actualizar registro que no existe"""
        fake_id = uuid.uuid4()
        update_data = {"nombre": "Inexistente"}

        result = CRUDOperations.update_record(
            test_db_session, User, fake_id, update_data
        )

        assert result is None

    
    def test_update_record_excludes_deleted_by_default(self, test_db_session: Session):
        """Test que update excluye registros soft deleted por defecto"""
        # Crear usuario eliminado
        user = User(
            nombre="Eliminado",
            apellido="Test",
            email="eliminado@test.com",
            password_hash="hash789",
            user_type="vendedor",
            deleted_at=datetime.utcnow()
        )
        test_db_session.add(user)
        await test_db_session.commit()

        # Intentar actualizar (debe fallar por defecto)
        update_data = {"nombre": "Nuevo Nombre"}
        result = CRUDOperations.update_record(
            test_db_session, User, user.id, update_data
        )

        assert result is None

        # Debe funcionar con exclude_deleted=False
        result_with_deleted = CRUDOperations.update_record(
            test_db_session, User, user.id, update_data, exclude_deleted=False
        )

        assert result_with_deleted is not None
        assert result_with_deleted.nombre == "Nuevo Nombre"

    
    def test_list_records_basic(self, test_db_session: Session):
        """Test listar registros básico"""
        # Crear usuarios de prueba
        users = []
        for i in range(3):
            user = User(
                nombre=f"Usuario{i}",
                apellido="Lista",
                email=f"usuario{i}@test.com",
                password_hash="hash",
                user_type="comprador" if i % 2 == 0 else "vendedor"
            )
            users.append(user)

        test_db_session.add_all(users)
        await test_db_session.commit()

        # Listar
        result = CRUDOperations.list_records(
            test_db_session, User
        )

        assert "items" in result
        assert "total" in result
        assert "skip" in result
        assert "limit" in result
        assert len(result["items"]) == 3
        assert result["total"] == 3
        assert result["skip"] == 0
        assert result["limit"] == 100

    
    def test_list_records_with_pagination(self, test_db_session: Session):
        """Test listar con paginación"""
        # Crear 5 usuarios
        users = []
        for i in range(5):
            user = User(
                nombre=f"Page{i}",
                apellido="Test",
                email=f"page{i}@test.com",
                password_hash="hash",
                user_type="comprador"
            )
            users.append(user)

        test_db_session.add_all(users)
        await test_db_session.commit()

        # Primera página
        page1 = CRUDOperations.list_records(
            test_db_session, User, skip=0, limit=2
        )

        # Segunda página
        page2 = CRUDOperations.list_records(
            test_db_session, User, skip=2, limit=2
        )

        assert len(page1["items"]) == 2
        assert len(page2["items"]) == 2
        assert page1["total"] == 5
        assert page2["total"] == 5
        assert page1["has_next"] is True
        assert page1["has_prev"] is False
        assert page2["has_next"] is True
        assert page2["has_prev"] is True

    
    def test_list_records_with_filters(self, test_db_session: Session):
        """Test listar con filtros"""
        # Crear usuarios con diferentes tipos
        comprador = User(
            nombre="Juan", apellido="Comprador", email="comprador@test.com",
            password_hash="hash", user_type="comprador"
        )
        vendedor = User(
            nombre="Ana", apellido="Vendedor", email="vendedor@test.com",
            password_hash="hash", user_type="vendedor"
        )

        test_db_session.add_all([comprador, vendedor])
        await test_db_session.commit()

        # Filtrar por user_type
        result = CRUDOperations.list_records(
            test_db_session, User, filters={"user_type": "COMPRADOR"}
        )

        assert len(result["items"]) == 1
        assert result["items"][0].user_type == "comprador"
        assert result["items"][0].email == "comprador@test.com"

    
    def test_list_records_excludes_deleted(self, test_db_session: Session):
        """Test que list_records excluye soft deleted por defecto"""
        # Crear usuario activo y eliminado
        activo = User(
            nombre="Activo", apellido="Test", email="activo@test.com",
            password_hash="hash", user_type="comprador"
        )
        eliminado = User(
            nombre="Eliminado", apellido="Test", email="eliminado@test.com",
            password_hash="hash", user_type="vendedor", deleted_at=datetime.utcnow()
        )

        test_db_session.add_all([activo, eliminado])
        await test_db_session.commit()

        # Lista sin incluir eliminados
        result = CRUDOperations.list_records(test_db_session, User)
        assert len(result["items"]) == 1
        assert result["items"][0].email == "activo@test.com"

        # Lista incluyendo eliminados
        result_with_deleted = CRUDOperations.list_records(
            test_db_session, User, include_deleted=True
        )
        assert len(result_with_deleted["items"]) == 2

    
    def test_delete_record_soft_by_default(self, test_db_session: Session):
        """Test que delete_record hace soft delete por defecto"""
        # Crear usuario
        user = User(
            nombre="ToDelete", apellido="Test", email="todelete@test.com",
            password_hash="hash", user_type="comprador"
        )
        test_db_session.add(user)
        await test_db_session.commit()
        user_id = user.id

        # Soft delete
        deleted = CRUDOperations.delete_record(
            test_db_session, User, user_id
        )

        assert deleted is True

        # Verificar que existe pero está marcado como eliminado
        await test_db_session.refresh(user)
        assert user.deleted_at is not None

    
    def test_delete_record_hard_delete(self, test_db_session: Session):
        """Test hard delete explícito"""
        # Crear usuario
        user = User(
            nombre="ToHardDelete", apellido="Test", email="toharddelete@test.com",
            password_hash="hash", user_type="vendedor"
        )
        test_db_session.add(user)
        await test_db_session.commit()
        user_id = user.id

        # Hard delete
        deleted = CRUDOperations.delete_record(
            test_db_session, User, user_id, hard_delete=True
        )

        assert deleted is True

        # Verificar que no existe
        from app.utils.database import DatabaseUtils
        found = await DatabaseUtils.get_by_id(
            test_db_session, User, user_id, include_deleted=True
        )
        assert found is None


class TestCRUDBase:
    """Tests para clase CRUDBase"""

    
    def test_crud_base_initialization(self):
        """Test inicialización de CRUDBase"""
        crud = CRUDBase(User)
        assert crud.model == User

    
    def test_crud_base_create(self, test_db_session: Session):
        """Test crear con CRUDBase"""
        crud = CRUDBase(User)

        data = {
            "nombre": "CRUD",
            "apellido": "Base",
            "email": "crudbase@test.com",
            "password_hash": "hash",
            "user_type": "COMPRADOR"
        }

        user = crud.create(test_db_session, data)

        assert user.nombre == "CRUD"
        assert user.email == "crudbase@test.com"

    
    def test_crud_base_full_cycle(self, test_db_session: Session):
        """Test ciclo completo CRUD con CRUDBase"""
        crud = CRUDBase(User)

        # Create
        user = crud.create(test_db_session, {
            "nombre": "Ciclo",
            "apellido": "Completo",
            "email": "ciclo@test.com",
            "password_hash": "hash",
            "user_type": "VENDEDOR"
        })

        user_id = user.id

        # Read
        found_user = crud.get(test_db_session, user_id)
        assert found_user is not None
        assert found_user.nombre == "Ciclo"

        # Update
        updated_user = crud.update(test_db_session, user_id, {
            "nombre": "Ciclo Actualizado"
        })
        assert updated_user.nombre == "Ciclo Actualizado"

        # List
        result = crud.list(test_db_session, limit=10)
        assert len(result["items"]) >= 1

        # Delete
        deleted = crud.delete(test_db_session, user_id)
        assert deleted is True

        # Verify soft deleted
        deleted_user = crud.get(test_db_session, user_id)
        assert deleted_user is None  # No se encuentra porque está soft deleted