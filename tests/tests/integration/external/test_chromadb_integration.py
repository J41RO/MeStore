#!/usr/bin/env python3
"""
Script de prueba realista para ChromaDB y embeddings.
Valida todo el pipeline con productos del marketplace colombiano.
"""

import pytest
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from app.services.embeddings import add_items, query_similar, get_collection_stats

def test_marketplace_products():
    """Probar con productos realistas del marketplace."""
    print("=== üõí PRUEBA MARKETPLACE COLOMBIANO ===")
    
    # Productos realistas colombianos
    productos = [
        "Caf√© Juan Valdez Origen Huila 500g premium",
        "Arepa de ma√≠z blanco precocida Harina PAN 1kg",
        "Aguacate Hass fresco de Antioquia por unidad",
        "Panela org√°nica de ca√±a Los Llanos 500g",
        "Bocadillo vele√±o de guayaba Montes 150g",
        "Chocolate Corona tableta tradicional 250g",
        "Arroz Diana premium grano largo 2.5kg",
        "Fr√≠jol cargamanto rojo de Antioquia 500g"
    ]
    
    ids = [f"prod_{i:03d}" for i in range(1, len(productos) + 1)]
    
    metadatos = [
        {"categoria": "bebidas", "origen": "huila", "precio": 15000, "organico": True},
        {"categoria": "harinas", "origen": "nacional", "precio": 3500, "organico": False},
        {"categoria": "frutas", "origen": "antioquia", "precio": 2500, "organico": True},
        {"categoria": "endulzantes", "origen": "llanos", "precio": 4500, "organico": True},
        {"categoria": "dulces", "origen": "santander", "precio": 3000, "organico": False},
        {"categoria": "chocolates", "origen": "nacional", "precio": 4000, "organico": False},
        {"categoria": "cereales", "origen": "nacional", "precio": 8500, "organico": False},
        {"categoria": "legumbres", "origen": "antioquia", "precio": 6500, "organico": True}
    ]
    
    # Agregar productos
    print("üì¶ Agregando productos al vector store...")
    success = add_items("products", ids, productos, metadatos)
    
    if success:
        print(f"‚úÖ {len(productos)} productos agregados exitosamente")
        
        # Estad√≠sticas
        stats = get_collection_stats("products")
        print(f"üìä Total items en colecci√≥n: {stats['count']}")
        
        assert True
    else:
        print("‚ùå Error agregando productos")
        assert False, "Failed to add products to ChromaDB"

def test_semantic_queries():
    """Probar consultas sem√°nticas realistas."""
    print("\n=== üîç PRUEBAS DE B√öSQUEDA SEM√ÅNTICA ===")
    
    consultas_prueba = [
        ("bebida caliente colombiana", "deber√≠a encontrar caf√©"),
        ("masa para hacer arepas", "deber√≠a encontrar harina de ma√≠z"),
        ("fruta verde cremosa", "deber√≠a encontrar aguacate"),
        ("endulzante natural org√°nico", "deber√≠a encontrar panela"),
        ("postre t√≠pico santandereano", "deber√≠a encontrar bocadillo"),
        ("producto org√°nico de Antioquia", "deber√≠a encontrar fr√≠jol o aguacate")
    ]
    
    resultados_exitosos = 0
    
    for consulta, expectativa in consultas_prueba:
        print(f"\nüîç Consultando: '{consulta}'")
        print(f"   Expectativa: {expectativa}")
        
        try:
            resultados = query_similar("products", consulta, n_results=3)
            
            if resultados and resultados['ids']:
                ids = resultados['ids'] if isinstance(resultados['ids'], list) else [resultados['ids']]
                docs = resultados['documents'] if isinstance(resultados['documents'], list) else [resultados['documents']]
                distances = resultados['distances'] if isinstance(resultados['distances'], list) else [resultados['distances']]
                
                print(f"   üìã Encontrados {len(ids)} resultados:")
                
                for i, (doc_id, documento, distancia) in enumerate(zip(
                    ids[:2],  # Solo primeros 2
                    docs[:2],
                    distances[:2]
                )):
                    similitud = 1.0 - distancia
                    print(f"   {i+1}. {documento[:60]}... (similitud: {similitud:.3f})")
                
                resultados_exitosos += 1
            else:
                print("   ‚ùå No se encontraron resultados")
                
        except Exception as e:
            print(f"   ‚ùå Error en consulta: {e}")
    
    print(f"\nüìä Consultas exitosas: {resultados_exitosos}/{len(consultas_prueba)}")
    assert resultados_exitosos == len(consultas_prueba), f"Only {resultados_exitosos}/{len(consultas_prueba)} queries were successful"

def test_filtered_search():
    """Probar b√∫squedas con filtros."""
    print("\n=== üéØ PRUEBAS CON FILTROS ===")
    
    try:
        # Buscar solo productos org√°nicos
        print("üîç Buscando productos org√°nicos...")
        resultados_organicos = query_similar(
            "products", 
            "producto natural saludable", 
            n_results=10,
            where={"organico": True}
        )
        
        print(f"   üìã Productos org√°nicos encontrados: {len(resultados_organicos['ids'][0])}")
        
        # Buscar por regi√≥n espec√≠fica
        print("\nüîç Buscando productos de Antioquia...")
        resultados_antioquia = query_similar(
            "products",
            "producto regional",
            n_results=10, 
            where={"origen": "antioquia"}
        )
        
        print(f"   üìã Productos de Antioquia: {len(resultados_antioquia['ids'][0])}")
        
        # Buscar por rango de precio
        print("\nüí∞ Buscando productos econ√≥micos (<5000)...")
        resultados_economicos = query_similar(
            "products",
            "producto barato",
            n_results=10,
            where={"precio": {"$lt": 5000}}
        )
        
        print(f"   üìã Productos econ√≥micos: {len(resultados_economicos['ids'][0])}")
        
        assert True
        
    except Exception as e:
        print(f"‚ùå Error en b√∫squedas filtradas: {e}")
        assert False, f"Filtered search failed: {e}"

def main():
    """Ejecutar todas las pruebas."""
    print("üöÄ INICIANDO PRUEBAS CHROMADB - MARKETPLACE COLOMBIANO")
    print("=" * 60)
    
    pruebas = [
        test_marketplace_products,
        test_semantic_queries,
        test_filtered_search
    ]
    
    exitosas = 0
    
    for prueba in pruebas:
        try:
            if prueba():
                exitosas += 1
                print(f"‚úÖ {prueba.__name__} EXITOSA")
            else:
                print(f"‚ùå {prueba.__name__} FALL√ì")
        except Exception as e:
            print(f"‚ùå {prueba.__name__} ERROR: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä RESUMEN: {exitosas}/{len(pruebas)} pruebas exitosas")
    
    if exitosas == len(pruebas):
        print("üéâ ‚úÖ TODAS LAS PRUEBAS CHROMADB EXITOSAS")
        print("üöÄ SISTEMA DE VECTOR SEARCH COMPLETAMENTE FUNCIONAL")
        return True
    else:
        print("‚ùå ALGUNAS PRUEBAS FALLARON")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
