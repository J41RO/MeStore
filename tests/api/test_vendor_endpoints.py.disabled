"""
Comprehensive integration tests for Vendor API endpoints
======================================================

Tests for critical vendor management functionality:
- Vendor registration and validation
- Vendor authentication and login
- Vendor dashboard and analytics
- Document management and verification
- CRUD operations and status management
- Authentication and authorization
- Error handling and edge cases

Author: Integration Testing Specialist AI
Date: 2025-09-20

Purpose: Ensure >85% coverage for vendor endpoints
"""

import pytest

# TDD activation for vendor endpoints
pytestmark = pytest.mark.tdd
from fastapi.testclient import TestClient
from unittest.mock import Mock, patch, AsyncMock, MagicMock
from datetime import datetime, timedelta, date
from typing import Dict, Any, List
import uuid
from decimal import Decimal

from app.main import app
from app.database import get_async_db as get_db
from app.models.user import User, UserType
from app.models.vendor_note import VendorNote
from app.models.vendor_audit import VendorAuditLog, ActionType
from app.models.vendor_document import VendorDocument, DocumentType, DocumentStatus
from app.models.inventory import Inventory, InventoryStatus
from app.models.product import Product, ProductStatus
from app.models.transaction import Transaction


# Test client
client = TestClient(app)

# Mock fixtures
@pytest.fixture
def mock_db():
    """Mock database session"""
    db = Mock()
    db.execute = AsyncMock()
    db.commit = AsyncMock()
    db.rollback = AsyncMock()
    db.refresh = AsyncMock()
    db.add = Mock()
    return db


@pytest.fixture
def mock_vendor_user():
    """Mock vendor user"""
    user = Mock(spec=User)
    user.id = "vendor-123"
    user.email = "vendor@example.com"
    user.nombre = "Test Vendor"
    user.apellido = "Business"
    user.cedula = "12345678"
    user.telefono = "+573001234567"
    user.ciudad = "Bogotá"
    user.empresa = "Test Business"
    user.direccion = "Calle 123 #45-67"
    user.is_active = True
    user.is_vendor = True
    user.user_type = UserType.VENDOR
    user.vendor_status = "approved"
    user.created_at = datetime.now()
    user.updated_at = datetime.now()
    return user


@pytest.fixture
def mock_admin_user():
    """Mock admin user"""
    user = Mock(spec=User)
    user.id = "admin-123"
    user.email = "admin@example.com"
    user.nombre = "Admin"
    user.apellido = "User"
    user.is_active = True
    user.is_vendor = False
    user.user_type = UserType.ADMIN
    user.admin_level = "super"
    return user


@pytest.fixture
def vendor_registration_data():
    """Sample vendor registration data"""
    return {
        "email": "newvendor@example.com",
        "password": "SecurePass123!",
        "nombre": "New Vendor",
        "apellido": "Business",
        "cedula": "87654321",
        "telefono": "+573009876543",
        "ciudad": "Medellín",
        "empresa": "New Business Inc",
        "direccion": "Carrera 45 #12-34"
    }


@pytest.fixture
def vendor_login_data():
    """Sample vendor login data"""
    return {
        "email": "vendor@example.com",
        "password": "SecurePass123!"
    }


# Dependency overrides
def override_get_db(mock_db):
    def _override():
        return mock_db
    return _override


def override_get_current_user(mock_user):
    def _override():
        return mock_user
    return _override


@pytest.mark.api
@pytest.mark.vendor
class TestVendorRegistrationEndpoints:
    """Test suite for Vendor registration endpoints"""

    def setup_method(self):
        """Setup for each test method"""
        app.dependency_overrides.clear()

    def teardown_method(self):
        """Cleanup after each test method"""
        app.dependency_overrides.clear()

    def test_vendor_registration_success(self, mock_db, vendor_registration_data):
        """Test successful vendor registration"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        # Mock email not exists
        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = None
        mock_db.execute.return_value = mock_result

        # Mock password hashing
        with patch('app.core.auth.AuthService.hash_password') as mock_hash:
            mock_hash.return_value = "hashed_password"

            with patch('app.core.auth.AuthService.create_access_token') as mock_token:
                mock_token.return_value = "access_token_123"

                response = client.post(
                    "/api/v1/vendedores/registro",
                    json=vendor_registration_data
                )

                assert response.status_code == 201
                # Verify user creation was attempted
                mock_db.add.assert_called_once()
                mock_db.commit.assert_called_once()

    def test_vendor_registration_duplicate_email(self, mock_db, vendor_registration_data):
        """Test vendor registration with duplicate email"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        # Mock existing user with same email
        existing_user = Mock()
        existing_user.email = vendor_registration_data["email"]
        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = existing_user
        mock_db.execute.return_value = mock_result

        response = client.post(
            "/api/v1/vendedores/registro",
            json=vendor_registration_data
        )

        assert response.status_code == 400
        data = response.json()
        assert "Email ya está registrado" in data["detail"]

    def test_vendor_registration_duplicate_cedula(self, mock_db, vendor_registration_data):
        """Test vendor registration with duplicate cedula"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        # Mock email check returns None (no duplicate email)
        # Mock cedula check returns existing user
        mock_results = [None, Mock()]  # First call (email) returns None, second call (cedula) returns user
        mock_result = Mock()
        mock_result.scalar_one_or_none.side_effect = mock_results
        mock_db.execute.return_value = mock_result

        response = client.post(
            "/api/v1/vendedores/registro",
            json=vendor_registration_data
        )

        assert response.status_code == 400
        data = response.json()
        assert "Cédula ya está registrada" in data["detail"]

    def test_vendor_registration_invalid_data(self, mock_db):
        """Test vendor registration with invalid data"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        invalid_data_sets = [
            {},  # Empty data
            {"email": "invalid-email"},  # Invalid email format
            {"email": "test@example.com", "password": "123"},  # Weak password
            {"email": "test@example.com", "password": "StrongPass123!", "nombre": ""},  # Empty required field
            {"email": "test@example.com", "password": "StrongPass123!", "nombre": "Test", "cedula": "123"},  # Invalid cedula
        ]

        for invalid_data in invalid_data_sets:
            response = client.post(
                "/api/v1/vendedores/registro",
                json=invalid_data
            )
            assert response.status_code in [400, 422]

    def test_vendor_registration_database_error(self, mock_db, vendor_registration_data):
        """Test vendor registration with database error"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        # Mock database error
        mock_db.execute.side_effect = Exception("Database connection failed")

        response = client.post(
            "/api/v1/vendedores/registro",
            json=vendor_registration_data
        )

        assert response.status_code == 500


@pytest.mark.api
@pytest.mark.vendor
class TestVendorAuthenticationEndpoints:
    """Test suite for Vendor authentication endpoints"""

    def test_vendor_login_success(self, mock_db, mock_vendor_user, vendor_login_data):
        """Test successful vendor login"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        # Mock user lookup
        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = mock_vendor_user
        mock_db.execute.return_value = mock_result

        # Mock password verification and token creation
        with patch('app.core.auth.AuthService.verify_password') as mock_verify:
            mock_verify.return_value = True

            with patch('app.core.auth.AuthService.create_access_token') as mock_token:
                mock_token.return_value = "access_token_123"

                with patch('app.core.auth.AuthService.create_refresh_token') as mock_refresh:
                    mock_refresh.return_value = "refresh_token_123"

                    response = client.post(
                        "/api/v1/vendedores/login",
                        json=vendor_login_data
                    )

                    assert response.status_code == 200
                    data = response.json()

                    assert "access_token" in data
                    assert "refresh_token" in data
                    assert data["token_type"] == "bearer"
                    assert data["expires_in"] == 3600

    def test_vendor_login_invalid_credentials(self, mock_db, vendor_login_data):
        """Test vendor login with invalid credentials"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        # Mock user not found
        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = None
        mock_db.execute.return_value = mock_result

        response = client.post(
            "/api/v1/vendedores/login",
            json=vendor_login_data
        )

        assert response.status_code == 401
        data = response.json()
        assert "Credenciales inválidas" in data["detail"]

    def test_vendor_login_wrong_password(self, mock_db, mock_vendor_user, vendor_login_data):
        """Test vendor login with wrong password"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        # Mock user found but wrong password
        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = mock_vendor_user
        mock_db.execute.return_value = mock_result

        with patch('app.core.auth.AuthService.verify_password') as mock_verify:
            mock_verify.return_value = False

            response = client.post(
                "/api/v1/vendedores/login",
                json=vendor_login_data
            )

            assert response.status_code == 401
            data = response.json()
            assert "Credenciales inválidas" in data["detail"]

    def test_vendor_login_inactive_user(self, mock_db, mock_vendor_user, vendor_login_data):
        """Test vendor login with inactive user"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        # Mock inactive user
        mock_vendor_user.is_active = False
        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = mock_vendor_user
        mock_db.execute.return_value = mock_result

        with patch('app.core.auth.AuthService.verify_password') as mock_verify:
            mock_verify.return_value = True

            response = client.post(
                "/api/v1/vendedores/login",
                json=vendor_login_data
            )

            assert response.status_code == 401
            data = response.json()
            assert "Usuario inactivo" in data["detail"]


@pytest.mark.api
@pytest.mark.vendor
@pytest.mark.dashboard
class TestVendorDashboardEndpoints:
    """Test suite for Vendor dashboard endpoints"""

    def test_dashboard_resumen_success(self, mock_db, mock_vendor_user):
        """Test successful dashboard summary retrieval"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_vendor_user

            # Mock dashboard data
            mock_result = Mock()
            mock_result.scalar.return_value = 10  # Total products
            mock_db.execute.return_value = mock_result

            response = client.get(
                "/api/v1/vendedores/dashboard/resumen",
                headers={"Authorization": "Bearer mock-token"}
            )

            assert response.status_code == 200
            data = response.json()

            # Verify response structure
            assert "total_productos" in data
            assert "productos_activos" in data
            assert "total_ventas" in data
            assert "ingresos_totales" in data

    def test_dashboard_ventas_success(self, mock_db, mock_vendor_user):
        """Test successful sales dashboard retrieval"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_vendor_user

            # Mock sales data
            mock_result = Mock()
            mock_result.fetchall.return_value = [
                (date.today(), Decimal("100000"), 5),
                (date.today() - timedelta(days=1), Decimal("150000"), 8)
            ]
            mock_db.execute.return_value = mock_result

            response = client.get(
                "/api/v1/vendedores/dashboard/ventas?periodo=ultima_semana",
                headers={"Authorization": "Bearer mock-token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert "periodo" in data
            assert "ventas" in data
            assert "total_ingresos" in data
            assert "total_ventas" in data

    def test_dashboard_productos_top_success(self, mock_db, mock_vendor_user):
        """Test successful top products dashboard retrieval"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_vendor_user

            # Mock top products data
            mock_result = Mock()
            mock_result.fetchall.return_value = [
                ("Product 1", "prod-1", 15, Decimal("1500000")),
                ("Product 2", "prod-2", 10, Decimal("1000000"))
            ]
            mock_db.execute.return_value = mock_result

            response = client.get(
                "/api/v1/vendedores/dashboard/productos-top?ranking=ventas&limite=10",
                headers={"Authorization": "Bearer mock-token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert "productos" in data
            assert "ranking_tipo" in data
            assert "limite" in data

    def test_dashboard_comisiones_success(self, mock_db, mock_vendor_user):
        """Test successful commissions dashboard retrieval"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_vendor_user

            # Mock commissions data
            mock_result = Mock()
            mock_result.fetchall.return_value = [
                (date.today(), Decimal("50000"), "pagada"),
                (date.today() - timedelta(days=1), Decimal("75000"), "pendiente")
            ]
            mock_db.execute.return_value = mock_result

            response = client.get(
                "/api/v1/vendedores/dashboard/comisiones?periodo=ultimo_mes",
                headers={"Authorization": "Bearer mock-token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert "periodo" in data
            assert "comisiones" in data
            assert "total_comisiones" in data

    def test_dashboard_inventario_success(self, mock_db, mock_vendor_user):
        """Test successful inventory dashboard retrieval"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_vendor_user

            # Mock inventory data
            mock_result = Mock()
            mock_result.fetchall.return_value = [
                ("Product 1", "alto", 100, 10),
                ("Product 2", "bajo", 5, 50)
            ]
            mock_db.execute.return_value = mock_result

            response = client.get(
                "/api/v1/vendedores/dashboard/inventario",
                headers={"Authorization": "Bearer mock-token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert "metricas" in data
            assert "alertas_stock" in data
            assert "productos_bajo_stock" in data

    def test_dashboard_unauthorized_access(self, mock_db):
        """Test dashboard access without authentication"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        response = client.get("/api/v1/vendedores/dashboard/resumen")

        assert response.status_code == 401


@pytest.mark.api
@pytest.mark.vendor
@pytest.mark.admin
class TestVendorManagementEndpoints:
    """Test suite for Vendor management endpoints (admin functions)"""

    def test_vendor_list_success(self, mock_db, mock_admin_user):
        """Test successful vendor list retrieval"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_admin_user

            # Mock vendor list data
            mock_result = Mock()
            mock_result.fetchall.return_value = [
                ("vendor-1", "vendor1@example.com", "Vendor One", "approved", datetime.now()),
                ("vendor-2", "vendor2@example.com", "Vendor Two", "pending", datetime.now())
            ]
            mock_db.execute.return_value = mock_result

            response = client.get(
                "/api/v1/vendedores/list?page=1&page_size=10",
                headers={"Authorization": "Bearer admin-token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert "vendedores" in data
            assert "total" in data
            assert "page" in data
            assert "page_size" in data

    def test_vendor_approve_success(self, mock_db, mock_admin_user, mock_vendor_user):
        """Test successful vendor approval"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_admin_user

            # Mock vendor lookup
            mock_result = Mock()
            mock_result.scalar_one_or_none.return_value = mock_vendor_user
            mock_db.execute.return_value = mock_result

            response = client.post(
                "/api/v1/vendedores/vendor-123/approve",
                json={"motivo": "Vendor meets all requirements"},
                headers={"Authorization": "Bearer admin-token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert data["message"] == "Vendedor aprobado exitosamente"
            assert data["vendedor_id"] == "vendor-123"

    def test_vendor_reject_success(self, mock_db, mock_admin_user, mock_vendor_user):
        """Test successful vendor rejection"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_admin_user

            # Mock vendor lookup
            mock_result = Mock()
            mock_result.scalar_one_or_none.return_value = mock_vendor_user
            mock_db.execute.return_value = mock_result

            response = client.post(
                "/api/v1/vendedores/vendor-123/reject",
                json={"motivo": "Documentation incomplete"},
                headers={"Authorization": "Bearer admin-token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert data["message"] == "Vendedor rechazado exitosamente"
            assert data["vendedor_id"] == "vendor-123"

    def test_vendor_management_unauthorized(self, mock_db, mock_vendor_user):
        """Test vendor management endpoints require admin access"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_vendor_user  # Non-admin user

            # Test various admin endpoints
            admin_endpoints = [
                ("GET", "/api/v1/vendedores/list"),
                ("POST", "/api/v1/vendedores/vendor-123/approve"),
                ("POST", "/api/v1/vendedores/vendor-123/reject"),
            ]

            for method, endpoint in admin_endpoints:
                if method == "GET":
                    response = client.get(endpoint, headers={"Authorization": "Bearer token"})
                else:
                    response = client.post(endpoint, json={}, headers={"Authorization": "Bearer token"})

                # Should require admin access
                assert response.status_code in [401, 403]


@pytest.mark.api
@pytest.mark.vendor
@pytest.mark.documents
class TestVendorDocumentEndpoints:
    """Test suite for Vendor document management endpoints"""

    def test_document_upload_success(self, mock_db, mock_vendor_user):
        """Test successful document upload"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_vendor_user

            # Mock file upload
            test_file_content = b"test document content"

            response = client.post(
                "/api/v1/vendedores/documents/upload",
                files={"file": ("test_document.pdf", test_file_content, "application/pdf")},
                data={"document_type": "cedula", "description": "Cédula de ciudadanía"},
                headers={"Authorization": "Bearer token"}
            )

            # Should handle file upload (implementation may vary)
            assert response.status_code in [200, 201, 422]

    def test_get_vendor_documents_success(self, mock_db, mock_vendor_user):
        """Test successful vendor documents retrieval"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_vendor_user

            # Mock documents data
            mock_result = Mock()
            mock_document = Mock()
            mock_document.id = "doc-123"
            mock_document.document_type = DocumentType.CEDULA
            mock_document.status = DocumentStatus.PENDING
            mock_document.file_path = "/uploads/doc-123.pdf"
            mock_document.uploaded_at = datetime.now()

            mock_result.scalars.return_value.all.return_value = [mock_document]
            mock_db.execute.return_value = mock_result

            response = client.get(
                "/api/v1/vendedores/vendor-123/documents",
                headers={"Authorization": "Bearer token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert "documents" in data
            assert len(data["documents"]) >= 0

    def test_document_verification_success(self, mock_db, mock_admin_user):
        """Test successful document verification by admin"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_admin_user

            # Mock document lookup
            mock_document = Mock()
            mock_document.id = "doc-123"
            mock_document.status = DocumentStatus.PENDING
            mock_result = Mock()
            mock_result.scalar_one_or_none.return_value = mock_document
            mock_db.execute.return_value = mock_result

            response = client.put(
                "/api/v1/vendedores/documents/doc-123/verify",
                json={"status": "approved", "notes": "Document verified successfully"},
                headers={"Authorization": "Bearer admin-token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert data["message"] == "Document verification updated successfully"

    def test_document_delete_success(self, mock_db, mock_vendor_user):
        """Test successful document deletion"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_vendor_user

            # Mock document lookup
            mock_document = Mock()
            mock_document.id = "doc-123"
            mock_document.vendor_id = mock_vendor_user.id
            mock_result = Mock()
            mock_result.scalar_one_or_none.return_value = mock_document
            mock_db.execute.return_value = mock_result

            response = client.delete(
                "/api/v1/vendedores/documents/doc-123",
                headers={"Authorization": "Bearer token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert data["message"] == "Document deleted successfully"


@pytest.mark.api
@pytest.mark.vendor
@pytest.mark.notes
class TestVendorNotesEndpoints:
    """Test suite for Vendor notes and audit endpoints"""

    def test_get_vendor_notes_success(self, mock_db, mock_admin_user):
        """Test successful vendor notes retrieval"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_admin_user

            # Mock notes data
            mock_result = Mock()
            mock_note = Mock()
            mock_note.id = "note-123"
            mock_note.content = "Test note content"
            mock_note.created_at = datetime.now()
            mock_note.admin_id = mock_admin_user.id

            mock_result.scalars.return_value.all.return_value = [mock_note]
            mock_db.execute.return_value = mock_result

            response = client.get(
                "/api/v1/vendedores/vendor-123/notes",
                headers={"Authorization": "Bearer admin-token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert "notes" in data
            assert "vendor_id" in data

    def test_create_vendor_note_success(self, mock_db, mock_admin_user):
        """Test successful vendor note creation"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_admin_user

            # Mock vendor exists
            mock_result = Mock()
            mock_result.scalar_one_or_none.return_value = Mock()  # Vendor exists
            mock_db.execute.return_value = mock_result

            note_data = {
                "content": "This vendor has excellent products",
                "is_internal": True
            }

            response = client.post(
                "/api/v1/vendedores/vendor-123/notes",
                json=note_data,
                headers={"Authorization": "Bearer admin-token"}
            )

            assert response.status_code == 201
            data = response.json()

            assert data["content"] == note_data["content"]
            assert data["is_internal"] == note_data["is_internal"]

    def test_get_vendor_audit_log_success(self, mock_db, mock_admin_user):
        """Test successful vendor audit log retrieval"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_admin_user

            # Mock audit log data
            mock_result = Mock()
            mock_audit = Mock()
            mock_audit.id = "audit-123"
            mock_audit.action = ActionType.VENDOR_APPROVED
            mock_audit.details = "Vendor approved by admin"
            mock_audit.created_at = datetime.now()
            mock_audit.admin_id = mock_admin_user.id

            mock_result.scalars.return_value.all.return_value = [mock_audit]
            mock_db.execute.return_value = mock_result

            response = client.get(
                "/api/v1/vendedores/vendor-123/audit-log",
                headers={"Authorization": "Bearer admin-token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert "audit_logs" in data
            assert "vendor_id" in data


@pytest.mark.api
@pytest.mark.vendor
@pytest.mark.health
class TestVendorHealthEndpoint:
    """Test suite for Vendor service health endpoint"""

    def test_vendor_health_check(self):
        """Test vendor service health check"""
        response = client.get("/api/v1/vendedores/health")

        assert response.status_code == 200
        data = response.json()

        assert data["service"] == "Vendedores API"
        assert data["status"] == "healthy"
        assert "timestamp" in data
        assert "version" in data


@pytest.mark.api
@pytest.mark.vendor
@pytest.mark.bulk_operations
class TestVendorBulkOperations:
    """Test suite for Vendor bulk operations"""

    def test_bulk_approve_vendors_success(self, mock_db, mock_admin_user):
        """Test successful bulk vendor approval"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_admin_user

            # Mock vendors lookup
            mock_result = Mock()
            mock_result.scalars.return_value.all.return_value = [Mock(), Mock()]  # Two vendors
            mock_db.execute.return_value = mock_result

            bulk_data = {
                "vendor_ids": ["vendor-1", "vendor-2"],
                "reason": "Bulk approval for qualified vendors"
            }

            response = client.post(
                "/api/v1/vendedores/bulk/approve",
                json=bulk_data,
                headers={"Authorization": "Bearer admin-token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert "processed" in data
            assert "successful" in data
            assert "failed" in data

    def test_bulk_suspend_vendors_success(self, mock_db, mock_admin_user):
        """Test successful bulk vendor suspension"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_admin_user

            # Mock vendors lookup
            mock_result = Mock()
            mock_result.scalars.return_value.all.return_value = [Mock(), Mock()]
            mock_db.execute.return_value = mock_result

            bulk_data = {
                "vendor_ids": ["vendor-1", "vendor-2"],
                "reason": "Policy violation",
                "duration_days": 30
            }

            response = client.post(
                "/api/v1/vendedores/bulk/suspend",
                json=bulk_data,
                headers={"Authorization": "Bearer admin-token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert "processed" in data
            assert "successful" in data

    def test_bulk_email_vendors_success(self, mock_db, mock_admin_user):
        """Test successful bulk email to vendors"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_admin_user

            # Mock vendors lookup
            mock_result = Mock()
            mock_result.scalars.return_value.all.return_value = [Mock(), Mock()]
            mock_db.execute.return_value = mock_result

            email_data = {
                "vendor_ids": ["vendor-1", "vendor-2"],
                "subject": "Important Update",
                "message": "Please review new policies"
            }

            response = client.post(
                "/api/v1/vendedores/bulk/email",
                json=email_data,
                headers={"Authorization": "Bearer admin-token"}
            )

            assert response.status_code == 200
            data = response.json()

            assert "sent" in data
            assert "failed" in data


@pytest.mark.api
@pytest.mark.vendor
@pytest.mark.error_handling
class TestVendorErrorHandling:
    """Test suite for Vendor endpoints error handling"""

    def test_database_connection_error(self, mock_vendor_user):
        """Test handling of database connection errors"""
        def failing_db():
            raise Exception("Database connection failed")

        app.dependency_overrides[get_db] = failing_db

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_vendor_user

            response = client.get(
                "/api/v1/vendedores/dashboard/resumen",
                headers={"Authorization": "Bearer token"}
            )

            assert response.status_code == 500

    def test_invalid_vendor_id_format(self, mock_db, mock_admin_user):
        """Test handling of invalid vendor ID formats"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_admin_user

            response = client.post(
                "/api/v1/vendedores/invalid-id-format/approve",
                json={"motivo": "Test"},
                headers={"Authorization": "Bearer admin-token"}
            )

            # Should handle invalid ID gracefully
            assert response.status_code in [400, 404, 422]

    def test_concurrent_vendor_operations(self, mock_db, mock_admin_user):
        """Test handling of concurrent vendor operations"""
        app.dependency_overrides[get_db] = override_get_db(mock_db)

        with patch('app.core.auth.get_current_user') as mock_auth:
            mock_auth.return_value = mock_admin_user

            # Mock vendor lookup
            mock_result = Mock()
            mock_result.scalar_one_or_none.return_value = Mock()
            mock_db.execute.return_value = mock_result

            # Simulate concurrent requests
            import threading
            responses = []

            def approve_vendor():
                response = client.post(
                    "/api/v1/vendedores/vendor-123/approve",
                    json={"motivo": "Concurrent test"},
                    headers={"Authorization": "Bearer admin-token"}
                )
                responses.append(response)

            threads = []
            for i in range(3):
                thread = threading.Thread(target=approve_vendor)
                threads.append(thread)

            for thread in threads:
                thread.start()

            for thread in threads:
                thread.join()

            # All requests should complete without crashing
            for response in responses:
                assert response.status_code in [200, 400, 409, 500]


# Cleanup function
def teardown_module():
    """Clean up after all tests in module"""
    app.dependency_overrides.clear()