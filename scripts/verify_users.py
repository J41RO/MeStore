#!/usr/bin/env python3
"""
Critical Database User Verification Script
==========================================

PROP√ìSITO: Verificar usuarios por defecto del sistema MeStore usando motor sync.
AUTOR: Backend Senior Developer
FECHA: 2025-09-13

FUNCIONALIDAD:
- Verifica conexi√≥n PostgreSQL con motor sync production-ready
- Consulta tabla users para confirmar usuarios por defecto
- Verifica estructura tabla y datos de usuarios espec√≠ficos
- Reporte completo estado usuarios cr√≠ticos del sistema

USUARIOS CR√çTICOS A VERIFICAR:
- super@mestore.com (SuperUser) - Sistema
- admin@mestore.com (Admin) - Administraci√≥n
- vendor@mestore.com (Vendedor) - Pruebas comercio
- buyer@mestore.com (Comprador) - Pruebas compras

REQUISITOS:
- PostgreSQL funcionando en localhost:5432
- Base de datos: mestocker_dev
- Usuario: mestocker_user / mestocker_pass
- Motor SQLAlchemy sync configurado
"""

import sys
import os

# Add the app directory to Python path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from sqlalchemy import text, inspect
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from app.core.database import get_sync_engine, SyncSessionLocal
from app.models.user import User, UserType

# Configuraci√≥n usuarios cr√≠ticos esperados
CRITICAL_USERS = [
    {
        'email': 'super@mestore.com',
        'user_type': UserType.SUPERUSER,
        'description': 'SuperUser del sistema - m√°ximos permisos'
    },
    {
        'email': 'admin@mestore.com',
        'user_type': UserType.ADMIN,
        'description': 'Administrador principal - gesti√≥n completa'
    },
    {
        'email': 'vendor@mestore.com',
        'user_type': UserType.VENDOR,
        'description': 'Vendor de pruebas - comercio electr√≥nico'
    },
    {
        'email': 'buyer@mestore.com',
        'user_type': UserType.BUYER,
        'description': 'Comprador de pruebas - transacciones'
    }
]


def print_header():
    """Imprime encabezado del script de verificaci√≥n."""
    print("=" * 80)
    print("üîç BACKEND SENIOR DEVELOPER - VERIFICACI√ìN USUARIOS CR√çTICOS")
    print("=" * 80)
    print(f"üìÖ Fecha: {os.popen('date').read().strip()}")
    print("üéØ Objetivo: Verificar usuarios por defecto del sistema")
    print("üóÑÔ∏è  Base de datos: mestocker_dev")
    print("‚öôÔ∏è  Motor: SQLAlchemy Sync Production-Ready")
    print("=" * 80)


def test_database_connection():
    """
    Verifica conexi√≥n a PostgreSQL y estructura tabla users.

    Returns:
        bool: True si conexi√≥n exitosa, False en caso contrario
    """
    print("\nüì° MICRO-FASE 4: VALIDACI√ìN CONEXI√ìN BD")
    print("-" * 50)

    try:
        # Test 1: Crear engine sync
        print("üîß Creando engine SQLAlchemy sync...")
        engine = get_sync_engine()
        print("‚úÖ Engine sync creado exitosamente")

        # Test 2: Conexi√≥n b√°sica
        print("üîó Probando conexi√≥n PostgreSQL...")
        with engine.connect() as conn:
            result = conn.execute(text("SELECT version()"))
            version = result.fetchone()[0]
            print(f"‚úÖ PostgreSQL conectado: {version[:50]}...")

        # Test 3: Verificar tabla users existe
        print("üìã Verificando estructura tabla users...")
        inspector = inspect(engine)

        if 'users' not in inspector.get_table_names():
            print("‚ùå ERROR: Tabla 'users' no existe en la base de datos")
            return False

        # Test 4: Describir columnas cr√≠ticas
        columns = inspector.get_columns('users')
        required_columns = ['id', 'email', 'password_hash', 'user_type', 'is_active']

        existing_columns = [col['name'] for col in columns]
        missing_columns = [col for col in required_columns if col not in existing_columns]

        if missing_columns:
            print(f"‚ùå ERROR: Columnas faltantes en users: {missing_columns}")
            return False

        print(f"‚úÖ Tabla users v√°lida con {len(existing_columns)} columnas")
        print(f"üìä Columnas cr√≠ticas presentes: {required_columns}")

        # Test 5: Consulta b√°sica funcional
        print("üîç Ejecutando consulta b√°sica...")
        with engine.connect() as conn:
            result = conn.execute(text("SELECT COUNT(*) FROM users"))
            total_users = result.fetchone()[0]
            print(f"‚úÖ Consulta exitosa: {total_users} usuarios en tabla")

        return True

    except OperationalError as e:
        print(f"‚ùå ERROR CONEXI√ìN: {e}")
        print("üí° SUGERENCIAS:")
        print("  - Verificar que PostgreSQL est√© ejecut√°ndose")
        print("  - Confirmar credenciales: mestocker_user/mestocker_pass")
        print("  - Validar base de datos: mestocker_dev existe")
        return False

    except SQLAlchemyError as e:
        print(f"‚ùå ERROR SQLALCHEMY: {e}")
        return False

    except Exception as e:
        print(f"‚ùå ERROR INESPERADO: {e}")
        return False


def verify_critical_users():
    """
    Verifica existencia y estado de usuarios cr√≠ticos del sistema.

    Returns:
        dict: Reporte detallado de verificaci√≥n de usuarios
    """
    print("\nüë• MICRO-FASE 5: REPORTE USUARIOS COMPLETO")
    print("-" * 50)

    report = {
        'connection_success': False,
        'total_users': 0,
        'users_found': [],
        'users_missing': [],
        'users_inactive': [],
        'summary': {}
    }

    try:
        # Crear sesi√≥n sync
        session = SyncSessionLocal()

        try:
            # Obtener total de usuarios
            total_users = session.query(User).count()
            report['total_users'] = total_users
            report['connection_success'] = True

            print(f"üìä Total usuarios en sistema: {total_users}")
            print("\nüîç Verificando usuarios cr√≠ticos:")
            print("-" * 50)

            # Verificar cada usuario cr√≠tico
            for user_config in CRITICAL_USERS:
                email = user_config['email']
                expected_type = user_config['user_type']
                description = user_config['description']

                print(f"\nüîç Verificando: {email}")
                print(f"   Tipo esperado: {expected_type.value}")
                print(f"   Descripci√≥n: {description}")

                # Buscar usuario en BD
                user = session.query(User).filter(User.email == email).first()

                if user:
                    # Usuario encontrado - verificar detalles
                    user_info = {
                        'email': user.email,
                        'id': str(user.id),
                        'user_type': user.user_type.value,
                        'is_active': user.is_active,
                        'is_verified': user.is_verified,
                        'created_at': user.created_at.isoformat() if user.created_at else None,
                        'nombre': user.nombre,
                        'apellido': user.apellido,
                        'description': description
                    }

                    print(f"   ‚úÖ Usuario encontrado")
                    print(f"   üìß Email: {user.email}")
                    print(f"   üÜî ID: {user.id}")
                    print(f"   üë§ Tipo actual: {user.user_type.value}")
                    print(f"   üü¢ Activo: {'S√≠' if user.is_active else 'No'}")
                    print(f"   ‚úîÔ∏è Verificado: {'S√≠' if user.is_verified else 'No'}")
                    print(f"   üë§ Nombre: {user.nombre or 'No definido'}")
                    print(f"   üìÖ Creado: {user.created_at or 'No disponible'}")

                    # Verificar tipo correcto
                    if user.user_type != expected_type:
                        print(f"   ‚ö†Ô∏è  ADVERTENCIA: Tipo incorrecto. Esperado: {expected_type.value}")
                        user_info['type_mismatch'] = True
                    else:
                        print(f"   ‚úÖ Tipo correcto: {expected_type.value}")
                        user_info['type_mismatch'] = False

                    # Verificar estado activo
                    if not user.is_active:
                        print(f"   ‚ö†Ô∏è  ADVERTENCIA: Usuario inactivo")
                        report['users_inactive'].append(user_info)

                    report['users_found'].append(user_info)

                else:
                    # Usuario no encontrado
                    print(f"   ‚ùå Usuario NO ENCONTRADO")
                    missing_user = {
                        'email': email,
                        'expected_type': expected_type.value,
                        'description': description
                    }
                    report['users_missing'].append(missing_user)

            # Generar resumen
            print("\nüìã RESUMEN VERIFICACI√ìN")
            print("=" * 50)
            print(f"üìä Total usuarios sistema: {total_users}")
            print(f"‚úÖ Usuarios cr√≠ticos encontrados: {len(report['users_found'])}/4")
            print(f"‚ùå Usuarios cr√≠ticos faltantes: {len(report['users_missing'])}/4")
            print(f"‚ö†Ô∏è  Usuarios inactivos: {len(report['users_inactive'])}")

            # Reporte detallado usuarios encontrados
            if report['users_found']:
                print("\n‚úÖ USUARIOS ENCONTRADOS:")
                for user in report['users_found']:
                    status = "üü¢ ACTIVO" if user['is_active'] else "üî¥ INACTIVO"
                    type_status = "‚úÖ CORRECTO" if not user.get('type_mismatch') else "‚ö†Ô∏è TIPO INCORRECTO"
                    print(f"   ‚Ä¢ {user['email']} - {user['user_type']} - {status} - {type_status}")

            # Reporte usuarios faltantes
            if report['users_missing']:
                print("\n‚ùå USUARIOS FALTANTES:")
                for user in report['users_missing']:
                    print(f"   ‚Ä¢ {user['email']} ({user['expected_type']}) - {user['description']}")
                print("\nüí° ACCI√ìN REQUERIDA: Crear usuarios faltantes con script de configuraci√≥n")

            # Reporte usuarios inactivos
            if report['users_inactive']:
                print("\n‚ö†Ô∏è USUARIOS INACTIVOS:")
                for user in report['users_inactive']:
                    print(f"   ‚Ä¢ {user['email']} - Requiere activaci√≥n")
                print("\nüí° ACCI√ìN REQUERIDA: Activar usuarios cr√≠ticos inactivos")

            # Estado final del sistema
            print("\nüéØ ESTADO SISTEMA:")
            if len(report['users_found']) == 4 and len(report['users_missing']) == 0:
                print("‚úÖ SISTEMA COMPLETO - Todos los usuarios cr√≠ticos presentes")
                report['summary']['status'] = 'COMPLETE'
            elif len(report['users_found']) > 0:
                print("‚ö†Ô∏è SISTEMA PARCIAL - Algunos usuarios cr√≠ticos presentes")
                report['summary']['status'] = 'PARTIAL'
            else:
                print("‚ùå SISTEMA VAC√çO - Ning√∫n usuario cr√≠tico encontrado")
                report['summary']['status'] = 'EMPTY'

            report['summary']['verification_complete'] = True

        finally:
            session.close()

    except SQLAlchemyError as e:
        print(f"‚ùå ERROR CONSULTA BD: {e}")
        report['summary'] = {'error': str(e), 'verification_complete': False}

    except Exception as e:
        print(f"‚ùå ERROR INESPERADO: {e}")
        report['summary'] = {'error': str(e), 'verification_complete': False}

    return report


def print_next_steps(report):
    """
    Imprime pr√≥ximos pasos basados en resultado de verificaci√≥n.

    Args:
        report (dict): Reporte de verificaci√≥n de usuarios
    """
    print("\nüöÄ PR√ìXIMOS PASOS RECOMENDADOS")
    print("=" * 50)

    if not report['connection_success']:
        print("üîß CONEXI√ìN BD:")
        print("  1. Verificar estado PostgreSQL: systemctl status postgresql")
        print("  2. Confirmar credenciales en config.py")
        print("  3. Validar base de datos mestocker_dev existe")
        return

    status = report['summary'].get('status', 'ERROR')

    if status == 'COMPLETE':
        print("‚úÖ SISTEMA LISTO:")
        print("  1. Todos los usuarios cr√≠ticos est√°n presentes")
        print("  2. Proceder con pruebas de autenticaci√≥n")
        print("  3. Validar login funcional para cada usuario")
        print("  4. Confirmar permisos por tipo de usuario")

    elif status == 'PARTIAL':
        print("‚ö†Ô∏è COMPLETAR CONFIGURACI√ìN:")
        if report['users_missing']:
            print("  1. EJECUTAR: python scripts/create_default_users.py")
            print("  2. Configurar contrase√±as por defecto (123456)")
            print("  3. Activar usuarios reci√©n creados")

        if report['users_inactive']:
            print("  4. EJECUTAR: python scripts/activate_users.py")
            print("  5. Verificar activaci√≥n exitosa")

    elif status == 'EMPTY':
        print("üîß CONFIGURACI√ìN INICIAL:")
        print("  1. EJECUTAR: python scripts/create_default_users.py")
        print("  2. Confirmar creaci√≥n con este script")
        print("  3. Configurar permisos espec√≠ficos por usuario")
        print("  4. Verificar autenticaci√≥n funcional")

    print("\nüìù COMANDOS √öTILES:")
    print("  ‚Ä¢ Ejecutar este script: python scripts/verify_users.py")
    print("  ‚Ä¢ Ver logs aplicaci√≥n: tail -f logs/*.log")
    print("  ‚Ä¢ Test conexi√≥n BD: python -c \"from app.core.database import get_sync_engine; print('OK')\"")


def main():
    """Funci√≥n principal del script de verificaci√≥n."""
    try:
        # Header del script
        print_header()

        # Fase 4: Validaci√≥n conexi√≥n
        connection_ok = test_database_connection()

        if not connection_ok:
            print("\n‚ùå VERIFICACI√ìN FALLIDA: Problemas conexi√≥n BD")
            print("üîß Resolver problemas conexi√≥n antes de continuar")
            sys.exit(1)

        # Fase 5: Verificaci√≥n usuarios
        report = verify_critical_users()

        # Pr√≥ximos pasos
        print_next_steps(report)

        # Footer de finalizaci√≥n
        print("\n" + "=" * 80)
        print("üéØ VERIFICACI√ìN COMPLETADA")
        print("üìã Revisar reporte anterior para determinar pr√≥ximos pasos")
        print("üîó Conexi√≥n BD: ‚úÖ FUNCIONAL")
        print("=" * 80)

        # Exit code basado en resultado
        if report['summary'].get('status') == 'COMPLETE':
            sys.exit(0)  # Todo perfecto
        elif report['summary'].get('status') == 'PARTIAL':
            sys.exit(2)  # Configuraci√≥n parcial
        else:
            sys.exit(1)  # Problemas cr√≠ticos

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Script interrumpido por usuario")
        sys.exit(1)

    except Exception as e:
        print(f"\n‚ùå ERROR CR√çTICO: {e}")
        print("üîß Contactar Backend Senior Developer para soporte")
        sys.exit(1)


if __name__ == "__main__":
    main()