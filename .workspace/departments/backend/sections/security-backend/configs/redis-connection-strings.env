# REDIS SECURE CONNECTION STRINGS - MeStore Backend Security
# ---------------------------------------------------------------------------------------------
# SECURITY BACKEND AI - AUTHENTICATED REDIS CONFIGURATION
# Deployment Priority: IMMEDIATE
# Security Level: PRODUCTION READY
# ---------------------------------------------------------------------------------------------

# ===== DEVELOPMENT ENVIRONMENT =====
# Local development with authentication
REDIS_PASSWORD_DEV=mestore-redis-secure-password-2025-min-32-chars
REDIS_URL=redis://:mestore-redis-secure-password-2025-min-32-chars@localhost:6379/0
REDIS_CACHE_URL=redis://:mestore-redis-secure-password-2025-min-32-chars@localhost:6379/0
REDIS_SESSION_URL=redis://:mestore-redis-secure-password-2025-min-32-chars@localhost:6379/1
REDIS_QUEUE_URL=redis://:mestore-redis-secure-password-2025-min-32-chars@localhost:6379/2

# Development TTL Configuration
REDIS_CACHE_TTL=3600
REDIS_SESSION_TTL=86400
REDIS_TEMP_CACHE_TTL=300
REDIS_LONG_CACHE_TTL=604800

# ===== STAGING ENVIRONMENT =====
# Network access with authentication and monitoring
REDIS_PASSWORD_STAGING=mestore-staging-redis-secure-password-2025-min-32-chars
REDIS_URL_STAGING=redis://:mestore-staging-redis-secure-password-2025-min-32-chars@192.168.1.137:6379/0
REDIS_CACHE_URL_STAGING=redis://:mestore-staging-redis-secure-password-2025-min-32-chars@192.168.1.137:6379/0
REDIS_SESSION_URL_STAGING=redis://:mestore-staging-redis-secure-password-2025-min-32-chars@192.168.1.137:6379/1
REDIS_QUEUE_URL_STAGING=redis://:mestore-staging-redis-secure-password-2025-min-32-chars@192.168.1.137:6379/2

# ===== PRODUCTION ENVIRONMENT =====
# Maximum security with TLS (future implementation)
REDIS_PASSWORD_PROD=${REDIS_PRODUCTION_PASSWORD}
REDIS_URL_PROD=redis://:${REDIS_PRODUCTION_PASSWORD}@redis-cluster:6379/0
REDIS_CACHE_URL_PROD=redis://:${REDIS_PRODUCTION_PASSWORD}@redis-cluster:6379/0
REDIS_SESSION_URL_PROD=redis://:${REDIS_PRODUCTION_PASSWORD}@redis-cluster:6379/1
REDIS_QUEUE_URL_PROD=redis://:${REDIS_PRODUCTION_PASSWORD}@redis-cluster:6379/2

# Production TTL Configuration (stricter)
REDIS_CACHE_TTL_PROD=1800
REDIS_SESSION_TTL_PROD=43200
REDIS_TEMP_CACHE_TTL_PROD=180
REDIS_LONG_CACHE_TTL_PROD=86400

# ===== SECURITY MONITORING =====
REDIS_AUTH_FAILURES_THRESHOLD=5
REDIS_CONNECTION_MONITORING=enabled
REDIS_SECURITY_AUDIT_LOG=enabled
REDIS_PERFORMANCE_MONITORING=enabled

# ===== COLOMBIAN COMPLIANCE SETTINGS =====
# Data protection law compliance (Ley 1581 de 2012)
REDIS_DATA_RETENTION_HOURS=24
REDIS_SESSION_ENCRYPTION=enabled
REDIS_AUDIT_LOG_RETENTION_DAYS=90
REDIS_GDPR_COMPLIANCE=enabled

# ===== APPLICATION CONFIGURATION UPDATES =====
# Update app/core/config.py with these values:

# class Settings(BaseSettings):
#     REDIS_URL: str = Field(default="redis://:mestore-redis-secure-password-2025-min-32-chars@localhost:6379/0")
#     REDIS_CACHE_URL: str = Field(default="redis://:mestore-redis-secure-password-2025-min-32-chars@localhost:6379/0")
#     REDIS_SESSION_URL: str = Field(default="redis://:mestore-redis-secure-password-2025-min-32-chars@localhost:6379/1")
#     REDIS_QUEUE_URL: str = Field(default="redis://:mestore-redis-secure-password-2025-min-32-chars@localhost:6379/2")

# ===== DOCKER COMPOSE UPDATES =====
# Update docker-compose.yml Redis service:

# redis:
#   image: redis:7-alpine
#   command: >
#     redis-server
#     --requirepass mestore-redis-secure-password-2025-min-32-chars
#     --bind 127.0.0.1 192.168.1.137
#     --protected-mode yes
#     --appendonly yes
#     --maxmemory 512mb
#     --maxmemory-policy allkeys-lru
#   environment:
#     REDIS_PASSWORD: mestore-redis-secure-password-2025-min-32-chars

# ===== TESTING AUTHENTICATION =====
# Test Redis authentication after deployment:
# redis-cli -h localhost -p 6379 -a mestore-redis-secure-password-2025-min-32-chars ping
# Expected response: PONG

# Test application connectivity:
# python -c "import redis; r=redis.Redis(host='localhost', port=6379, password='mestore-redis-secure-password-2025-min-32-chars'); print(r.ping())"
# Expected output: True

# ===== SECURITY NOTES =====
# 1. Change passwords for production deployment
# 2. Use environment variables for sensitive data
# 3. Monitor authentication failures
# 4. Implement regular password rotation (90 days)
# 5. Enable TLS for production (Phase 2)
# 6. Implement ACL for granular access control (Phase 3)