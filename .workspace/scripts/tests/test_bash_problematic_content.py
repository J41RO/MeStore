"""
Tests de seguridad para contenido problem치tico bash
Valida prevenci칩n de inyecci칩n y manejo seguro de caracteres especiales
"""

import os
import sys
import tempfile
from pathlib import Path

import pytest

# Agregar directorio padre al path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import surgical_modifier_ultimate as smu


class TestBashProblematicContent:
    """Suite de tests para contenido problem치tico bash y seguridad"""

    def test_bash_special_characters_handling(self):
        """Test manejo de caracteres especiales bash"""
        # Contenido con caracteres especiales bash
        bash_content = (
            chr(35)
            + chr(32)
            + chr(65)
            + chr(114)
            + chr(99)
            + chr(104)
            + chr(105)
            + chr(118)
            + chr(111)
            + chr(32)
            + chr(99)
            + chr(111)
            + chr(110)
            + chr(32)
            + chr(99)
            + chr(97)
            + chr(114)
            + chr(97)
            + chr(99)
            + chr(116)
            + chr(101)
            + chr(114)
            + chr(101)
            + chr(115)
            + chr(32)
            + chr(101)
            + chr(115)
            + chr(112)
            + chr(101)
            + chr(99)
            + chr(105)
            + chr(97)
            + chr(108)
            + chr(101)
            + chr(115)
            + chr(10)
        )
        bash_content += (
            chr(99)
            + chr(111)
            + chr(109)
            + chr(109)
            + chr(97)
            + chr(110)
            + chr(100)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(39)
            + chr(101)
            + chr(99)
            + chr(104)
            + chr(111)
            + chr(32)
            + chr(36)
            + chr(85)
            + chr(83)
            + chr(69)
            + chr(82)
            + chr(39)
            + chr(10)
        )  # admin-jairo
        bash_content += (
            chr(112)
            + chr(97)
            + chr(116)
            + chr(104)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(39)
            + chr(47)
            + chr(112)
            + chr(97)
            + chr(116)
            + chr(104)
            + chr(47)
            + chr(119)
            + chr(105)
            + chr(116)
            + chr(104)
            + chr(47)
            + chr(115)
            + chr(112)
            + chr(97)
            + chr(99)
            + chr(101)
            + chr(115)
            + chr(39)
            + chr(10)
        )
        bash_content += (
            chr(115)
            + chr(99)
            + chr(114)
            + chr(105)
            + chr(112)
            + chr(116)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(39)
            + chr(101)
            + chr(99)
            + chr(104)
            + chr(111)
            + chr(32)
            + chr(34)
            + chr(72)
            + chr(101)
            + chr(108)
            + chr(108)
            + chr(111)
            + chr(34)
            + chr(39)
            + chr(10)
        )

        with tempfile.NamedTemporaryFile(mode="w", delete=False, suffix=".py") as f:
            f.write(bash_content)
            temp_path = f.name

        try:
            sm = smu.SurgicalModifierUltimate(verbose=False)
            result = sm.execute("replace", temp_path, "command", "safe_command")

            assert result.get(
                "success", False
            ), "Replace con caracteres bash debe ser exitoso"

            # Verificar que contenido se maneja de forma segura
            with open(temp_path, "r") as f:
                content = f.read()
            assert "safe_command" in content, "Cambio debe haberse aplicado"
            assert chr(36) in content, "Caracteres especiales deben preservarse"

        finally:
            if os.path.exists(temp_path):
                os.unlink(temp_path)

    def test_mixed_quotes_handling(self):
        """Test strings con comillas simples/dobles mixtas"""
        quotes_content = (
            chr(35)
            + chr(32)
            + chr(67)
            + chr(111)
            + chr(110)
            + chr(116)
            + chr(101)
            + chr(110)
            + chr(105)
            + chr(100)
            + chr(111)
            + chr(32)
            + chr(99)
            + chr(111)
            + chr(110)
            + chr(32)
            + chr(99)
            + chr(111)
            + chr(109)
            + chr(105)
            + chr(108)
            + chr(108)
            + chr(97)
            + chr(115)
            + chr(32)
            + chr(109)
            + chr(105)
            + chr(120)
            + chr(116)
            + chr(97)
            + chr(115)
            + chr(10)
        )
        quotes_content += (
            chr(109)
            + chr(101)
            + chr(115)
            + chr(115)
            + chr(97)
            + chr(103)
            + chr(101)
            + chr(49)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(34)
            + chr(72)
            + chr(101)
            + chr(108)
            + chr(108)
            + chr(111)
            + chr(32)
            + chr(39)
            + chr(119)
            + chr(111)
            + chr(114)
            + chr(108)
            + chr(100)
            + chr(39)
            + chr(34)
            + chr(10)
        )
        quotes_content += (
            chr(109)
            + chr(101)
            + chr(115)
            + chr(115)
            + chr(97)
            + chr(103)
            + chr(101)
            + chr(50)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(39)
            + chr(72)
            + chr(101)
            + chr(108)
            + chr(108)
            + chr(111)
            + chr(32)
            + chr(34)
            + chr(117)
            + chr(115)
            + chr(101)
            + chr(114)
            + chr(34)
            + chr(39)
            + chr(10)
        )
        quotes_content += (
            chr(99)
            + chr(111)
            + chr(109)
            + chr(112)
            + chr(108)
            + chr(101)
            + chr(120)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(34)
            + chr(84)
            + chr(104)
            + chr(105)
            + chr(115)
            + chr(32)
            + chr(105)
            + chr(115)
            + chr(32)
            + chr(97)
            + chr(32)
            + chr(92)
            + chr(34)
            + chr(116)
            + chr(101)
            + chr(115)
            + chr(116)
            + chr(92)
            + chr(34)
            + chr(32)
            + chr(115)
            + chr(116)
            + chr(114)
            + chr(105)
            + chr(110)
            + chr(103)
            + chr(34)
            + chr(10)
        )

        with tempfile.NamedTemporaryFile(mode="w", delete=False, suffix=".py") as f:
            f.write(quotes_content)
            temp_path = f.name

        try:
            sm = smu.SurgicalModifierUltimate(verbose=False)
            result = sm.execute("replace", temp_path, "message1", "message_one")

            assert result.get(
                "success", False
            ), "Replace con comillas mixtas debe ser exitoso"

            # Verificar que comillas se preservaron
            with open(temp_path, "r") as f:
                content = f.read()
            assert "message_one" in content, "Cambio debe haberse aplicado"
            assert (
                chr(34) in content and chr(39) in content
            ), "Comillas mixtas deben preservarse"

        finally:
            if os.path.exists(temp_path):
                os.unlink(temp_path)

    def test_escape_sequences_and_control_chars(self):
        """Test contenido con escape sequences y control characters"""
        escape_content = (
            chr(35)
            + chr(32)
            + chr(67)
            + chr(111)
            + chr(110)
            + chr(116)
            + chr(101)
            + chr(110)
            + chr(105)
            + chr(100)
            + chr(111)
            + chr(32)
            + chr(99)
            + chr(111)
            + chr(110)
            + chr(32)
            + chr(101)
            + chr(115)
            + chr(99)
            + chr(97)
            + chr(112)
            + chr(101)
            + chr(32)
            + chr(115)
            + chr(101)
            + chr(113)
            + chr(117)
            + chr(101)
            + chr(110)
            + chr(99)
            + chr(101)
            + chr(115)
            + chr(10)
        )
        escape_content += (
            chr(116)
            + chr(101)
            + chr(120)
            + chr(116)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(34)
            + chr(76)
            + chr(105)
            + chr(110)
            + chr(101)
            + chr(97)
            + chr(92)
            + chr(110)
            + chr(119)
            + chr(105)
            + chr(116)
            + chr(104)
            + chr(92)
            + chr(110)
            + chr(110)
            + chr(101)
            + chr(119)
            + chr(108)
            + chr(105)
            + chr(110)
            + chr(101)
            + chr(115)
            + chr(34)
            + chr(10)
        )
        escape_content += (
            chr(112)
            + chr(97)
            + chr(116)
            + chr(104)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(34)
            + chr(47)
            + chr(112)
            + chr(97)
            + chr(116)
            + chr(104)
            + chr(92)
            + chr(116)
            + chr(119)
            + chr(105)
            + chr(116)
            + chr(104)
            + chr(92)
            + chr(116)
            + chr(116)
            + chr(97)
            + chr(98)
            + chr(115)
            + chr(34)
            + chr(10)
        )
        escape_content += (
            chr(114)
            + chr(97)
            + chr(119)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(114)
            + chr(34)
            + chr(67)
            + chr(58)
            + chr(92)
            + chr(87)
            + chr(105)
            + chr(110)
            + chr(100)
            + chr(111)
            + chr(119)
            + chr(115)
            + chr(92)
            + chr(80)
            + chr(97)
            + chr(116)
            + chr(104)
            + chr(34)
            + chr(10)
        )

        with tempfile.NamedTemporaryFile(mode="w", delete=False, suffix=".py") as f:
            f.write(escape_content)
            temp_path = f.name

        try:
            sm = smu.SurgicalModifierUltimate(verbose=False)
            result = sm.execute(
                "after",
                temp_path,
                "# Contenido con escape sequences",
                "# Linea agregada de forma segura",
            )

            assert result.get(
                "success", False
            ), "After con escape sequences debe ser exitoso"

            # Verificar que escape sequences se preservaron
            with open(temp_path, "r") as f:
                content = f.read()
            assert (
                "# Linea agregada de forma segura" in content
            ), "Nueva l칤nea debe estar presente"
            assert chr(92) + chr(110) in content, "Newline escape debe preservarse"

        finally:
            if os.path.exists(temp_path):
                os.unlink(temp_path)

    def test_command_injection_prevention(self):
        """Test prevenci칩n de inyecci칩n de comandos"""
        # Contenido que podr칤a ser problem치tico si no se maneja correctamente
        injection_content = (
            chr(35)
            + chr(32)
            + chr(67)
            + chr(111)
            + chr(110)
            + chr(116)
            + chr(101)
            + chr(110)
            + chr(105)
            + chr(100)
            + chr(111)
            + chr(32)
            + chr(112)
            + chr(111)
            + chr(116)
            + chr(101)
            + chr(110)
            + chr(99)
            + chr(105)
            + chr(97)
            + chr(108)
            + chr(109)
            + chr(101)
            + chr(110)
            + chr(116)
            + chr(101)
            + chr(32)
            + chr(112)
            + chr(114)
            + chr(111)
            + chr(98)
            + chr(108)
            + chr(101)
            + chr(109)
            + chr(97)
            + chr(116)
            + chr(105)
            + chr(99)
            + chr(111)
            + chr(10)
        )
        injection_content += (
            chr(117)
            + chr(115)
            + chr(101)
            + chr(114)
            + chr(95)
            + chr(105)
            + chr(110)
            + chr(112)
            + chr(117)
            + chr(116)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(34)
            + chr(115)
            + chr(97)
            + chr(102)
            + chr(101)
            + chr(95)
            + chr(105)
            + chr(110)
            + chr(112)
            + chr(117)
            + chr(116)
            + chr(34)
            + chr(10)
        )
        injection_content += (
            chr(99)
            + chr(111)
            + chr(109)
            + chr(109)
            + chr(97)
            + chr(110)
            + chr(100)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(34)
            + chr(101)
            + chr(99)
            + chr(104)
            + chr(111)
            + chr(32)
            + chr(115)
            + chr(97)
            + chr(102)
            + chr(101)
            + chr(95)
            + chr(99)
            + chr(111)
            + chr(109)
            + chr(109)
            + chr(97)
            + chr(110)
            + chr(100)
            + chr(34)
            + chr(10)
        )
        injection_content += (
            chr(114)
            + chr(101)
            + chr(115)
            + chr(117)
            + chr(108)
            + chr(116)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(34)
            + chr(115)
            + chr(97)
            + chr(102)
            + chr(101)
            + chr(95)
            + chr(114)
            + chr(101)
            + chr(115)
            + chr(117)
            + chr(108)
            + chr(116)
            + chr(34)
            + chr(10)
        )

        with tempfile.NamedTemporaryFile(mode="w", delete=False, suffix=".py") as f:
            f.write(injection_content)
            temp_path = f.name

        try:
            sm = smu.SurgicalModifierUltimate(verbose=False)
            result = sm.execute("replace", temp_path, "safe_input", "validated_input")

            assert result.get(
                "success", False
            ), "Replace con contenido potencialmente problem치tico debe ser exitoso"

            # Verificar que el procesamiento fue seguro
            with open(temp_path, "r") as f:
                content = f.read()
            assert (
                "validated_input" in content
            ), "Cambio debe haberse aplicado de forma segura"

        finally:
            if os.path.exists(temp_path):
                os.unlink(temp_path)

    def test_special_paths_and_filenames(self):
        """Test manejo seguro de paths con espacios y caracteres especiales"""
        path_content = (
            chr(35)
            + chr(32)
            + chr(80)
            + chr(97)
            + chr(116)
            + chr(104)
            + chr(115)
            + chr(32)
            + chr(99)
            + chr(111)
            + chr(110)
            + chr(32)
            + chr(99)
            + chr(97)
            + chr(114)
            + chr(97)
            + chr(99)
            + chr(116)
            + chr(101)
            + chr(114)
            + chr(101)
            + chr(115)
            + chr(32)
            + chr(101)
            + chr(115)
            + chr(112)
            + chr(101)
            + chr(99)
            + chr(105)
            + chr(97)
            + chr(108)
            + chr(101)
            + chr(115)
            + chr(10)
        )
        path_content += (
            chr(102)
            + chr(105)
            + chr(108)
            + chr(101)
            + chr(95)
            + chr(112)
            + chr(97)
            + chr(116)
            + chr(104)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(34)
            + chr(47)
            + chr(112)
            + chr(97)
            + chr(116)
            + chr(104)
            + chr(47)
            + chr(119)
            + chr(105)
            + chr(116)
            + chr(104)
            + chr(47)
            + chr(115)
            + chr(112)
            + chr(97)
            + chr(99)
            + chr(101)
            + chr(115)
            + chr(34)
            + chr(10)
        )
        path_content += (
            chr(115)
            + chr(112)
            + chr(101)
            + chr(99)
            + chr(105)
            + chr(97)
            + chr(108)
            + chr(95)
            + chr(102)
            + chr(105)
            + chr(108)
            + chr(101)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(34)
            + chr(102)
            + chr(105)
            + chr(108)
            + chr(101)
            + chr(45)
            + chr(110)
            + chr(97)
            + chr(109)
            + chr(101)
            + chr(46)
            + chr(116)
            + chr(120)
            + chr(116)
            + chr(34)
            + chr(10)
        )
        path_content += (
            chr(110)
            + chr(101)
            + chr(116)
            + chr(119)
            + chr(111)
            + chr(114)
            + chr(107)
            + chr(95)
            + chr(112)
            + chr(97)
            + chr(116)
            + chr(104)
            + chr(32)
            + chr(61)
            + chr(32)
            + chr(34)
            + chr(92)
            + chr(92)
            + chr(115)
            + chr(101)
            + chr(114)
            + chr(118)
            + chr(101)
            + chr(114)
            + chr(92)
            + chr(115)
            + chr(104)
            + chr(97)
            + chr(114)
            + chr(101)
            + chr(34)
            + chr(10)
        )

        with tempfile.NamedTemporaryFile(mode="w", delete=False, suffix=".py") as f:
            f.write(path_content)
            temp_path = f.name

        try:
            sm = smu.SurgicalModifierUltimate(verbose=False)
            result = sm.execute("replace", temp_path, "file_path", "secure_file_path")

            assert result.get(
                "success", False
            ), "Replace con paths especiales debe ser exitoso"

            # Verificar que paths se manejaron de forma segura
            with open(temp_path, "r") as f:
                content = f.read()
            assert "secure_file_path" in content, "Cambio debe haberse aplicado"
            assert chr(47) in content, "Separadores de path deben preservarse"

        finally:
            if os.path.exists(temp_path):
                os.unlink(temp_path)
