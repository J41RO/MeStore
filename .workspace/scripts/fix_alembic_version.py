#!/usr/bin/env python3
"""
Script para reparar tabla alembic_version usando la conexi√≥n correcta.
"""

import asyncio
import sys

sys.path.append(".")

from sqlalchemy import text

from app.database.session import engine


async def fix_alembic_version():
    """Reparar tabla alembic_version con revisi√≥n correcta"""

    try:
        print("üîó Conectando a PostgreSQL usando engine de session.py...")

        async with engine.begin() as conn:
            print("‚úÖ Conexi√≥n establecida exitosamente")

            # Verificar versi√≥n actual problem√°tica
            result = await conn.execute(
                text("SELECT version_num FROM alembic_version LIMIT 1;")
            )
            current_version = result.scalar()
            print(f"üîç Versi√≥n problem√°tica actual: {current_version}")

            # Corregir a la √∫ltima versi√≥n v√°lida conocida
            correct_version = "5e0e1b1f0cfc"  # √öltima migraci√≥n v√°lida del historial
            print(f"üîß Corrigiendo a versi√≥n v√°lida: {correct_version}")

            await conn.execute(
                text("UPDATE alembic_version SET version_num = :version;"),
                {"version": correct_version},
            )

            # Verificar correcci√≥n
            verify_result = await conn.execute(
                text("SELECT version_num FROM alembic_version LIMIT 1;")
            )
            new_version = verify_result.scalar()
            print(f"‚úÖ Nueva versi√≥n en BD: {new_version}")

            if new_version == correct_version:
                print("üéâ ‚úÖ TABLA ALEMBIC_VERSION REPARADA EXITOSAMENTE")
                return True
            else:
                print("‚ùå La correcci√≥n no se aplic√≥ correctamente")
                return False

    except Exception as e:
        print(f"‚ùå ERROR durante reparaci√≥n: {e}")
        return False


if __name__ == "__main__":
    print("=== üîß REPARANDO TABLA ALEMBIC_VERSION ===")
    success = asyncio.run(fix_alembic_version())

    if success:
        print("\nüéØ REPARACI√ìN COMPLETADA - PROBANDO ALEMBIC...")

        # Test que alembic funciona
        import subprocess

        result = subprocess.run(["alembic", "current"], capture_output=True, text=True)

        if result.returncode == 0:
            print("‚úÖ ALEMBIC FUNCIONA CORRECTAMENTE AHORA")
            print(f"üìã Estado actual: {result.stdout.strip()}")
        else:
            print("‚ùå ALEMBIC A√öN TIENE PROBLEMAS")
            print(f"Error: {result.stderr}")
    else:
        print("\n‚ùå REPARACI√ìN FALL√ì - USAR M√âTODO ALTERNATIVO")
