#!/usr/bin/env python3
"""
ü§ñ VALIDADOR WORKSPACE PARA AGENTES
Script que TODOS los agentes deben ejecutar antes de modificar archivos
"""

import os
import sys
import json
import subprocess
from datetime import datetime
from pathlib import Path

# Archivos protegidos nivel cr√≠tico
PROTECTED_FILES = {
    "app/main.py": "system-architect-ai",
    "frontend/vite.config.ts": "frontend-performance-ai",
    "docker-compose.yml": "cloud-infrastructure-ai",
    "app/api/v1/deps/auth.py": "security-backend-ai",
    "app/services/auth_service.py": "security-backend-ai",
    "app/models/user.py": "database-architect-ai",
    "tests/conftest.py": "tdd-specialist",
    "app/core/config.py": "configuration-management",
    "app/database.py": "database-architect-ai"
}

def validate_workspace_access(agent_name, target_file):
    """Validar que agente tenga derecho a modificar archivo"""
    print(f"üîç Validando acceso de {agent_name} a {target_file}")

    # 1. Verificar si archivo est√° protegido
    if target_file in PROTECTED_FILES:
        responsible_agent = PROTECTED_FILES[target_file]

        if agent_name != responsible_agent and agent_name != "master-orchestrator":
            print(f"‚ùå ACCESO DENEGADO")
            print(f"üìÅ Archivo: {target_file}")
            print(f"üõ°Ô∏è  Protegido por: {responsible_agent}")
            print(f"ü§ñ Agente solicitante: {agent_name}")
            print(f"‚úÖ Soluci√≥n: Consultar con {responsible_agent} primero")
            return False

    # 2. Verificar que existan metadatos
    metadata_file = f".workspace/project/{target_file}.md"
    if not os.path.exists(metadata_file):
        print(f"‚ö†Ô∏è  Archivo sin metadatos: {target_file}")
        print(f"üìã Se requiere: {metadata_file}")

    # 3. Leer reglas espec√≠ficas del archivo
    if os.path.exists(metadata_file):
        with open(metadata_file, 'r') as f:
            content = f.read()
            if "PROTEGIDO CR√çTICO" in content:
                print(f"üö® ARCHIVO NIVEL CR√çTICO: {target_file}")
            if "NO MODIFICAR" in content:
                print(f"‚ùå MODIFICACI√ìN EXPL√çCITAMENTE PROHIBIDA")
                return False

    print(f"‚úÖ Acceso autorizado para {agent_name}")
    return True

def validate_workspace_access_with_auto_delegation(agent_name, target_file, user_instruction):
    """
    Validar acceso con delegaci√≥n autom√°tica si es necesario
    """
    print(f"üîç Validando acceso de {agent_name} a {target_file} con auto-delegaci√≥n")

    # 1. Verificar si archivo est√° protegido
    if target_file not in PROTECTED_FILES:
        return {"status": "ALLOWED", "message": "Archivo no protegido, proceder"}

    responsible_agent = PROTECTED_FILES[target_file]

    # 2. Si es el agente responsable o master-orchestrator, permitir
    if agent_name == responsible_agent or agent_name == "master-orchestrator":
        return {"status": "ALLOWED", "message": f"Agente autorizado: {agent_name}"}

    # 3. Activar delegaci√≥n autom√°tica
    print(f"üöÄ ACTIVANDO DELEGACI√ìN AUTOM√ÅTICA: {agent_name} ‚Üí {responsible_agent}")

    try:
        # Ejecutar sistema de delegaci√≥n autom√°tica
        result = subprocess.run([
            "python", ".workspace/scripts/auto_delegate_to_responsible_agent.py",
            agent_name, target_file, user_instruction
        ], capture_output=True, text=True, cwd=".")

        if result.returncode == 0:
            # Parsear resultado de la delegaci√≥n
            output_lines = result.stdout.strip().split('\n')

            # Buscar informaci√≥n clave en la salida
            request_id = None
            responsible = None

            for line in output_lines:
                if "Request ID:" in line:
                    request_id = line.split("Request ID: ")[1].strip()
                elif "Agente responsable:" in line:
                    responsible = line.split("Agente responsable: ")[1].strip()

            return {
                "status": "DELEGATED",
                "request_id": request_id or "UNKNOWN",
                "responsible_agent": responsible or responsible_agent,
                "message": f"Delegaci√≥n autom√°tica exitosa a {responsible_agent}",
                "delegation_output": result.stdout
            }
        else:
            print(f"‚ö†Ô∏è Error en delegaci√≥n autom√°tica: {result.stderr}")
            return {
                "status": "DENIED",
                "message": f"Fallo en delegaci√≥n autom√°tica. Consulte manualmente con {responsible_agent}",
                "error": result.stderr
            }

    except Exception as e:
        print(f"‚ùå Error ejecutando delegaci√≥n autom√°tica: {e}")
        return {
            "status": "DENIED",
            "message": f"Error t√©cnico. Consulte manualmente con {responsible_agent}",
            "error": str(e)
        }

def log_agent_activity(agent_name, action, target_file, approved_by=None):
    """Registrar actividad del agente"""
    log_dir = ".workspace/logs"
    os.makedirs(log_dir, exist_ok=True)

    today = datetime.now().strftime("%Y-%m-%d")
    log_file = f"{log_dir}/agent_activity_{today}.json"

    activity = {
        "timestamp": datetime.now().isoformat(),
        "agent": agent_name,
        "action": action,
        "file": target_file,
        "approved_by": approved_by,
        "status": "authorized" if approved_by or agent_name == "master-orchestrator" else "self-authorized"
    }

    # Leer log existente o crear nuevo
    if os.path.exists(log_file):
        with open(log_file, 'r') as f:
            logs = json.load(f)
    else:
        logs = []

    logs.append(activity)

    # Escribir log actualizado
    with open(log_file, 'w') as f:
        json.dump(logs, f, indent=2)

    print(f"üìù Actividad registrada en {log_file}")

def check_workspace_compliance():
    """Verificar que agente haya le√≠do documentos obligatorios"""
    required_docs = [
        ".workspace/SYSTEM_RULES.md",
        ".workspace/PROTECTED_FILES.md",
        ".workspace/AGENT_PROTOCOL.md"
    ]

    print("üìö Verificando lectura de documentos obligatorios...")

    for doc in required_docs:
        if not os.path.exists(doc):
            print(f"‚ùå DOCUMENTO FALTANTE: {doc}")
            return False
        print(f"‚úÖ {doc} - Disponible")

    return True

def generate_commit_template(agent_name, target_file, approved_by=None):
    """Generar template de commit obligatorio"""
    template = f"""feat(workspace): Modificaci√≥n autorizada de {target_file}

Workspace-Check: ‚úÖ Consultado
Archivo: {target_file}
Agente: {agent_name}
Protocolo: {"APROBACI√ìN_OBTENIDA" if approved_by else "SEGUIDO"}
Tests: PENDING
{"Responsable: " + approved_by if approved_by else ""}

Cambios realizados:
- TODO: Describir qu√© se modific√≥
- TODO: Explicar por qu√© era necesario
- TODO: Listar qu√© se prob√≥ despu√©s
"""

    print("üìã TEMPLATE DE COMMIT OBLIGATORIO:")
    print("-" * 50)
    print(template)
    print("-" * 50)

    # Guardar template para uso posterior
    with open(".workspace/logs/last_commit_template.txt", "w") as f:
        f.write(template)

def main():
    """Funci√≥n principal del validador"""
    if len(sys.argv) < 3:
        print("‚ùå Uso: python agent_workspace_validator.py <agent_name> <target_file>")
        print("üîß Ejemplo: python agent_workspace_validator.py backend-framework-ai app/main.py")
        sys.exit(1)

    agent_name = sys.argv[1]
    target_file = sys.argv[2]
    approved_by = sys.argv[3] if len(sys.argv) > 3 else None

    print(f"üö® VALIDADOR WORKSPACE ACTIVADO")
    print(f"ü§ñ Agente: {agent_name}")
    print(f"üìÅ Archivo objetivo: {target_file}")
    print("-" * 50)

    # 1. Verificar compliance b√°sico
    if not check_workspace_compliance():
        print("‚ùå WORKSPACE NO CONFIGURADO CORRECTAMENTE")
        sys.exit(1)

    # 2. Validar acceso del agente y activar delegaci√≥n autom√°tica si es necesario
    access_result = validate_workspace_access_with_auto_delegation(agent_name, target_file, sys.argv[3] if len(sys.argv) > 3 else "Modificaci√≥n solicitada")

    if access_result["status"] == "DENIED":
        print("‚ùå ACCESO DENEGADO - CONSULTE CON AGENTE RESPONSABLE")
        sys.exit(1)
    elif access_result["status"] == "DELEGATED":
        print("üîÑ DELEGACI√ìN AUTOM√ÅTICA ACTIVADA")
        print(f"üìã Request ID: {access_result['request_id']}")
        print(f"ü§ñ Agente responsable activado: {access_result['responsible_agent']}")
        print(f"‚åõ El agente evaluar√° y decidir√° autom√°ticamente")
        sys.exit(0)

    # 3. Registrar actividad
    log_agent_activity(agent_name, "file_access_request", target_file, approved_by)

    # 4. Generar template de commit
    generate_commit_template(agent_name, target_file, approved_by)

    print("‚úÖ VALIDACI√ìN COMPLETADA - PUEDE PROCEDER")
    print("üìã Use el template de commit generado")
    print("üß™ RECUERDE: Ejecutar tests despu√©s de modificar")

if __name__ == "__main__":
    main()