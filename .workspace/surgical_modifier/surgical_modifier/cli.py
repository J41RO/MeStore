#!/usr/bin/env python3
"""
Surgical Modifier CLI - Sistema de Modificaci√≥n Precisa de C√≥digo
Entry point principal con routing din√°mico a coordinadores especializados.
"""

import sys
import click
from pathlib import Path
from typing import Optional

# Imports de coordinadores (se implementar√°n en Fase 1.1.4)
# from .coordinators import (
#     create, replace, before, after, append, update, delete, explore
# )

from .config import get_config, setup_logging


@click.group(invoke_without_command=True)
@click.option('--version', is_flag=True, help='Mostrar versi√≥n del sistema')
@click.option('--verbose', '-v', is_flag=True, help='Modo verboso')
@click.option('--config', type=click.Path(exists=True), help='Archivo de configuraci√≥n personalizado')
@click.pass_context
def cli(ctx, version, verbose, config):
    """
    üîß SURGICAL MODIFIER CLI v6.0 - Sistema de Modificaci√≥n Precisa de C√≥digo
    
    Herramienta universal para modificaciones quir√∫rgicas de c√≥digo con
    coordinadores especializados y sistema de backup autom√°tico.
    
    Operaciones disponibles:
    ‚Ä¢ create   - Crear archivos nuevos con templates
    ‚Ä¢ replace  - Reemplazar contenido espec√≠fico
    ‚Ä¢ before   - Insertar antes de patr√≥n
    ‚Ä¢ after    - Insertar despu√©s de patr√≥n  
    ‚Ä¢ append   - Agregar al final
    ‚Ä¢ update   - Actualizar secciones
    ‚Ä¢ delete   - Eliminar contenido espec√≠fico
    ‚Ä¢ explore  - Explorar y analizar c√≥digo
    """
    
    if version:
        click.echo("üîß Surgical Modifier CLI v6.0")
        click.echo("üìã Sistema Universal de Modificaci√≥n Precisa")
        sys.exit(0)
    
    # Configurar contexto global
    ctx.ensure_object(dict)
    ctx.obj['verbose'] = verbose
    ctx.obj['config'] = config
    
    # Setup logging
    setup_logging(verbose)
    
    if ctx.invoked_subcommand is None:
        click.echo(ctx.get_help())


@cli.command()
@click.argument('file_path', type=click.Path())
@click.argument('content', type=str)
@click.option('--template', type=str, help='Usar template espec√≠fico')
@click.option('--variables', type=str, help='Variables para template (JSON)')
@click.option('--backup/--no-backup', default=True, help='Crear backup autom√°tico')
@click.option('--verbose', '-v', is_flag=True, help='Modo verboso')
@click.pass_context
def create(ctx, file_path, content, template, variables, backup, verbose):
    """
    Crear archivos nuevos con contenido espec√≠fico.
    
    Ejemplos:
        surgical-modifier create app.py "print('Hello World')"
        surgical-modifier create --template class.py --variables '{"name": "User"}'
    """
    click.echo("üîß OPERACI√ìN CREATE - En desarrollo")
    click.echo(f"üìÅ Archivo: {file_path}")
    click.echo(f"üìù Contenido: {len(content)} caracteres")
    
    # TODO: Implementar en Fase 1.1.4 con coordinador CREATE
    # from .coordinators.create import CreateCoordinator
    # coordinator = CreateCoordinator()
    # result = coordinator.execute(file_path, content, template, variables, backup)
    
    if verbose or ctx.obj.get('verbose'):
        click.echo("‚ö†Ô∏è Coordinador CREATE pendiente de implementaci√≥n en Fase 1.1.4")


@cli.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.argument('old_content', type=str)
@click.argument('new_content', type=str)
@click.option('--regex', is_flag=True, help='Usar expresiones regulares')
@click.option('--case-sensitive/--ignore-case', default=True, help='Sensible a may√∫sculas')
@click.option('--max-replacements', type=int, help='M√°ximo n√∫mero de reemplazos')
@click.option('--backup/--no-backup', default=True, help='Crear backup autom√°tico')
@click.option('--verbose', '-v', is_flag=True, help='Modo verboso')
@click.pass_context
def replace(ctx, file_path, old_content, new_content, regex, case_sensitive, max_replacements, backup, verbose):
    """
    Reemplazar contenido espec√≠fico en archivos.
    
    Ejemplos:
        surgical-modifier replace app.py "old_function" "new_function"
        surgical-modifier replace --regex app.py "def.*old" "def new_function"
    """
    click.echo("üîß OPERACI√ìN REPLACE - En desarrollo")
    click.echo(f"üìÅ Archivo: {file_path}")
    click.echo(f"üîç Buscar: {old_content}")
    click.echo(f"üîÑ Reemplazar: {new_content}")
    
    # TODO: Implementar en Fase 1.1.4 con coordinador REPLACE
    if verbose or ctx.obj.get('verbose'):
        click.echo("‚ö†Ô∏è Coordinador REPLACE pendiente de implementaci√≥n en Fase 1.1.4")


@cli.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.argument('pattern', type=str)
@click.argument('content', type=str)
@click.option('--regex', is_flag=True, help='Usar expresiones regulares')
@click.option('--preserve-indent', is_flag=True, help='Preservar indentaci√≥n')
@click.option('--first-match', is_flag=True, help='Solo primera coincidencia')
@click.option('--backup/--no-backup', default=True, help='Crear backup autom√°tico')
@click.option('--verbose', '-v', is_flag=True, help='Modo verboso')
@click.pass_context
def after(ctx, file_path, pattern, content, regex, preserve_indent, first_match, backup, verbose):
    """
    Insertar contenido despu√©s de patr√≥n espec√≠fico.
    
    Ejemplos:
        surgical-modifier after app.py "class User:" "    # User model"
        surgical-modifier after --regex app.py "import.*React" "import { useState };"
    """
    click.echo("üîß OPERACI√ìN AFTER - En desarrollo")
    click.echo(f"üìÅ Archivo: {file_path}")
    click.echo(f"üéØ Patr√≥n: {pattern}")
    click.echo(f"üìù Insertar: {content}")
    
    # TODO: Implementar en Fase 1.1.4 con coordinador AFTER
    if verbose or ctx.obj.get('verbose'):
        click.echo("‚ö†Ô∏è Coordinador AFTER pendiente de implementaci√≥n en Fase 1.1.4")


@cli.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.argument('pattern', type=str)
@click.argument('content', type=str)
@click.option('--regex', is_flag=True, help='Usar expresiones regulares')
@click.option('--preserve-indent', is_flag=True, help='Preservar indentaci√≥n')
@click.option('--first-match', is_flag=True, help='Solo primera coincidencia')
@click.option('--backup/--no-backup', default=True, help='Crear backup autom√°tico')
@click.option('--verbose', '-v', is_flag=True, help='Modo verboso')
@click.pass_context
def before(ctx, file_path, pattern, content, regex, preserve_indent, first_match, backup, verbose):
    """
    Insertar contenido antes de patr√≥n espec√≠fico.
    
    Ejemplos:
        surgical-modifier before app.py "def main():" "    # Main function"
        surgical-modifier before --first-match app.py "return" "    # Process data"
    """
    click.echo("üîß OPERACI√ìN BEFORE - En desarrollo")
    click.echo(f"üìÅ Archivo: {file_path}")
    click.echo(f"üéØ Patr√≥n: {pattern}")
    click.echo(f"üìù Insertar: {content}")
    
    # TODO: Implementar en Fase 1.1.4 con coordinador BEFORE
    if verbose or ctx.obj.get('verbose'):
        click.echo("‚ö†Ô∏è Coordinador BEFORE pendiente de implementaci√≥n en Fase 1.1.4")


@cli.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.argument('content', type=str)
@click.option('--separator', default='\n', help='Separador antes del contenido')
@click.option('--backup/--no-backup', default=True, help='Crear backup autom√°tico')
@click.option('--verbose', '-v', is_flag=True, help='Modo verboso')
@click.pass_context
def append(ctx, file_path, content, separator, backup, verbose):
    """
    Agregar contenido al final del archivo.
    
    Ejemplos:
        surgical-modifier append app.py "print('End of script')"
        surgical-modifier append --separator="\n\n" notes.md "## New Section"
    """
    click.echo("üîß OPERACI√ìN APPEND - En desarrollo")
    click.echo(f"üìÅ Archivo: {file_path}")
    click.echo(f"üìù Agregar: {content}")
    
    # TODO: Implementar en Fase 1.1.4 con coordinador APPEND
    if verbose or ctx.obj.get('verbose'):
        click.echo("‚ö†Ô∏è Coordinador APPEND pendiente de implementaci√≥n en Fase 1.1.4")


@cli.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.option('--analyze', is_flag=True, help='Analizar estructura del archivo')
@click.option('--stats', is_flag=True, help='Mostrar estad√≠sticas')
@click.option('--verbose', '-v', is_flag=True, help='Modo verboso')
@click.pass_context
def explore(ctx, file_path, analyze, stats, verbose):
    """
    Explorar y analizar estructura de c√≥digo.
    
    Ejemplos:
        surgical-modifier explore app.py --analyze
        surgical-modifier explore --stats src/
    """
    click.echo("üîß OPERACI√ìN EXPLORE - En desarrollo")
    click.echo(f"üìÅ Archivo: {file_path}")
    
    # TODO: Implementar en Fase 1.1.4 con coordinador EXPLORE
    if verbose or ctx.obj.get('verbose'):
        click.echo("‚ö†Ô∏è Coordinador EXPLORE pendiente de implementaci√≥n en Fase 1.1.4")


@cli.command()
@click.option('--list-operations', is_flag=True, help='Listar todas las operaciones')
@click.option('--help-operation', type=str, help='Ayuda espec√≠fica de operaci√≥n')
def help_extended(list_operations, help_operation):
    """Ayuda extendida del sistema."""
    if list_operations:
        click.echo("üìã OPERACIONES DISPONIBLES:")
        click.echo("‚Ä¢ create   - Crear archivos nuevos")
        click.echo("‚Ä¢ replace  - Reemplazar contenido")  
        click.echo("‚Ä¢ before   - Insertar antes de patr√≥n")
        click.echo("‚Ä¢ after    - Insertar despu√©s de patr√≥n")
        click.echo("‚Ä¢ append   - Agregar al final")
        click.echo("‚Ä¢ explore  - Explorar y analizar")
        return
    
    if help_operation:
        click.echo(f"üìã Ayuda para operaci√≥n: {help_operation}")
        click.echo("‚ö†Ô∏è Ayuda detallada disponible en Fase 1.1.4")
        return


def main():
    """Entry point principal para scripts instalados."""
    cli()


if __name__ == '__main__':
    main()