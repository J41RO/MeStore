name: Test Pipeline

on:
 push:
   branches: [ main, develop ]
 pull_request:
   branches: [ main, develop ]

jobs:
 test:
   runs-on: ubuntu-latest
   
   services:
     postgres:
       image: postgres:15
       env:
         POSTGRES_PASSWORD: testpassword
         POSTGRES_USER: testuser
         POSTGRES_DB: testdb
       options: >-
         --health-cmd pg_isready
         --health-interval 10s
         --health-timeout 5s
         --health-retries 5
       ports:
         - 5432:5432
     
     redis:
       image: redis:7-alpine
       options: >-
         --health-cmd "redis-cli ping"
         --health-interval 10s
         --health-timeout 5s
         --health-retries 5
       ports:
         - 6379:6379

   steps:
     # Step 1: Checkout code
     - name: Checkout code
       uses: actions/checkout@v4
       with:
         fetch-depth: 0

     # Step 2: Set up Python
     - name: Set up Python 3.11
       uses: actions/setup-python@v4
       with:
         python-version: '3.11'
         cache: 'pip'
     
     # Step 3: Set up Node.js
     - name: Set up Node.js 20
       uses: actions/setup-node@v4
       with:
         node-version: '20'
         cache: 'npm'
         cache-dependency-path: frontend/package-lock.json

     # Step 4: Install Python dependencies
     - name: Install Python dependencies
       run: |
         echo "üü¢ Installing Python dependencies..."
         python -m pip install --upgrade pip
         pip install -r requirements.txt
         echo "‚úÖ Python dependencies installed"

     # Step 5: Install Node.js dependencies
     - name: Install Node.js dependencies
       working-directory: ./frontend
       run: |
         echo "üü¢ Installing Node.js dependencies..."
         npm ci
         echo "‚úÖ Node.js dependencies installed"

     # Step 6: Run Backend Tests with Coverage
     - name: Run Python tests with coverage
       env:
         DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
         REDIS_URL: redis://localhost:6379/0
         ENVIRONMENT: testing
       run: |
         echo "üß™ Running Python tests with pytest..."
         pytest --cov=app --cov-report=term-missing --cov-report=xml --cov-config=.coveragerc
         echo "‚úÖ Python tests completed"

     # Step 7: Run Frontend Tests with Coverage
     - name: Run Node.js tests with coverage
       working-directory: ./frontend
       run: |
         echo "üß™ Running Node.js tests with coverage..."
         npm run test:ci
         echo "‚úÖ Node.js tests completed"

     # Step 8: Verify Coverage Files Generated
     - name: Verify coverage files
       run: |
         echo "üìä Verifying coverage files..."
         echo "Backend coverage.xml:"
         ls -la coverage.xml || echo "‚ùå coverage.xml not found"
         echo "Frontend lcov.info:"
         ls -la frontend/coverage/lcov.info || echo "‚ùå frontend/coverage/lcov.info not found"
         echo "‚úÖ Coverage files verification completed"

     # Step 9: Upload Coverage to Codecov
     - name: Upload coverage to Codecov
       uses: codecov/codecov-action@v4
       with:
         token: ${{ secrets.CODECOV_TOKEN }}
         files: ./coverage.xml,./frontend/coverage/lcov.info
         flags: backend,frontend
         name: mestore-ci
         fail_ci_if_error: false
         verbose: true

     # Step 10: Upload Coverage Reports as Artifacts
     - name: Upload coverage artifacts
       uses: actions/upload-artifact@v4
       if: always()
       with:
         name: coverage-reports
         path: |
           coverage.xml
           frontend/coverage/
         retention-days: 30
