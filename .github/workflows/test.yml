name: Run MeStore Tests

# Triggers: ejecutar en push y pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Jobs del pipeline
jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    # Matrix strategy para múltiples versiones
    strategy:
      matrix:
        python-version: ['3.11']
        node-version: ['18.x']
    
    steps:
      # Step 1: Checkout del código
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Setup Python environment
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      # Setup Node.js environment
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      # Verificar versiones instaladas
      - name: Verify Python version
        run: |
          echo "🐍 Python version installed:"
          python --version
          python -c "import sys; print(f'Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}')"
      
      - name: Verify Node.js version
        run: |
          echo "🟢 Node.js version installed:"
          node --version
          npm --version
      
      # Step 2: Inicialización del CI
      - name: CI Initialized
        run: |
          echo "🚀 CI ready - MeStore pipeline starting"
          echo "📊 Matrix combination: Python ${{ matrix.python-version }} + Node ${{ matrix.node-version }}"
          echo "🖥️ Runner: ${{ runner.os }}"
          echo "📅 Timestamp: $(date)"
          echo "🔧 GitHub Actions environment ready"
      
      # Step 3: Verificar estructura del proyecto
      - name: Verify project structure
        run: |
          echo "📂 Verificando estructura del proyecto:"
          ls -la
          echo ""
          echo "🔍 Archivos encontrados:"
          find . -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.tsx" | head -10
      
      # Step 4: Placeholder para futuros tests
      - name: Placeholder for tests
        run: |
          echo "🧪 Tests placeholder - próximamente:"
          echo "  ✅ Backend tests (pytest)"
          echo "  ✅ Frontend tests (jest/vitest)"
          echo "  ✅ Linting y formateo"
          echo "  ✅ Coverage reports"
