"""add_password_reset_fields_to_user_model

Revision ID: 5e0e1b1f0cfc
Revises: b6874abecde5
Create Date: 2025-08-03 07:08:31.802979+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5e0e1b1f0cfc'
down_revision: Union[str, Sequence[str], None] = 'b6874abecde5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_test_simple_concrete_model_id'), table_name='test_simple_concrete_model')
    op.drop_table('test_simple_concrete_model')
    op.alter_column('inventory', 'product_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del producto en inventario',
               existing_nullable=False)
    op.alter_column('inventory', 'status',
               existing_type=postgresql.ENUM('DISPONIBLE', 'RESERVADO', 'EN_PICKING', 'DESPACHADO', name='inventorystatus'),
               type_=sa.Enum('DISPONIBLE', 'RESERVADO', 'EN_PICKING', 'DESPACHADO', name='inventorystatus'),
               existing_comment='Estado del inventario en el proceso de fulfillment',
               existing_nullable=False)
    op.alter_column('inventory', 'condicion_producto',
               existing_type=postgresql.ENUM('NUEVO', 'USADO_EXCELENTE', 'USADO_BUENO', 'USADO_REGULAR', 'DAÑADO', name='condicionproducto'),
               type_=sa.Enum('NUEVO', 'USADO_EXCELENTE', 'USADO_BUENO', 'USADO_REGULAR', 'DAÑADO', name='condicionproducto'),
               existing_comment='Condición física del producto en inventario',
               existing_nullable=False)
    op.alter_column('inventory', 'notas_almacen',
               existing_type=sa.TEXT(),
               type_=sa.Text(),
               existing_comment='Observaciones y notas del personal de almacén',
               existing_nullable=True)
    op.alter_column('inventory', 'zona',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=10),
               existing_comment='Zona del almacén (A, B, C, etc.)',
               existing_nullable=False)
    op.alter_column('inventory', 'estante',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=20),
               existing_comment='Número de estante dentro de la zona',
               existing_nullable=False)
    op.alter_column('inventory', 'posicion',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=20),
               existing_comment='Posición específica dentro del estante',
               existing_nullable=False)
    op.alter_column('inventory', 'cantidad',
               existing_type=sa.INTEGER(),
               type_=sa.Integer(),
               existing_comment='Cantidad disponible en esta ubicación',
               existing_nullable=False)
    op.alter_column('inventory', 'cantidad_reservada',
               existing_type=sa.INTEGER(),
               type_=sa.Integer(),
               existing_comment='Cantidad reservada para órdenes',
               existing_nullable=False)
    op.alter_column('inventory', 'updated_by_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del usuario que actualizó el inventario',
               existing_nullable=True)
    op.alter_column('inventory', 'storage_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='FK hacia Storage - ubicación física del inventario',
               existing_nullable=True)
    op.alter_column('inventory', 'fecha_ingreso',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha de ingreso del producto al inventario',
               existing_nullable=False)
    op.alter_column('inventory', 'fecha_ultimo_movimiento',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha del último movimiento de stock',
               existing_nullable=False)
    op.alter_column('inventory', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID único del registro',
               existing_nullable=False)
    op.alter_column('inventory', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=sa.DateTime(),
               existing_comment='Fecha de creación',
               existing_nullable=False)
    op.alter_column('inventory', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=sa.DateTime(),
               existing_comment='Fecha de última actualización',
               existing_nullable=False)
    op.alter_column('inventory', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.alter_column('products', 'sku',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=50),
               existing_comment='Código único del producto para identificación',
               existing_nullable=False)
    op.alter_column('products', 'vendedor_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del usuario vendedor que registró el producto',
               existing_nullable=True)
    op.alter_column('products', 'created_by_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del usuario que creó el producto',
               existing_nullable=True)
    op.alter_column('products', 'updated_by_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del usuario que actualizó por última vez',
               existing_nullable=True)
    op.alter_column('products', 'version',
               existing_type=sa.INTEGER(),
               type_=sa.Integer(),
               existing_comment='Versión del producto para control de cambios',
               existing_nullable=False)
    op.alter_column('products', 'name',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=200),
               existing_comment='Nombre del producto para búsquedas',
               existing_nullable=False)
    op.alter_column('products', 'description',
               existing_type=sa.TEXT(),
               type_=sa.Text(),
               existing_comment='Descripción detallada del producto',
               existing_nullable=True)
    op.alter_column('products', 'status',
               existing_type=postgresql.ENUM('TRANSITO', 'VERIFICADO', 'DISPONIBLE', 'VENDIDO', name='productstatus'),
               type_=sa.Enum('TRANSITO', 'VERIFICADO', 'DISPONIBLE', 'VENDIDO', name='productstatus'),
               existing_comment='Estado actual del producto en el marketplace',
               existing_nullable=False)
    op.alter_column('products', 'precio_venta',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.DECIMAL(precision=10, scale=2),
               existing_comment='Precio de venta al público (COP)',
               existing_nullable=True)
    op.alter_column('products', 'precio_costo',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.DECIMAL(precision=10, scale=2),
               existing_comment='Precio de costo/compra del producto (COP)',
               existing_nullable=True)
    op.alter_column('products', 'comision_mestocker',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.DECIMAL(precision=10, scale=2),
               existing_comment='Comisión de MeStore por venta del producto (COP)',
               existing_nullable=True)
    op.alter_column('products', 'peso',
               existing_type=sa.NUMERIC(precision=8, scale=3),
               type_=sa.DECIMAL(precision=8, scale=3),
               existing_comment='Peso del producto en kilogramos',
               existing_nullable=True)
    op.alter_column('products', 'dimensiones',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_comment='Dimensiones del producto: {largo, ancho, alto} en cm',
               existing_nullable=True)
    op.alter_column('products', 'categoria',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=100),
               existing_comment='Categoría del producto para organización',
               existing_nullable=True)
    op.alter_column('products', 'tags',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_comment='Tags del producto como array JSON para búsquedas',
               existing_nullable=True)
    op.alter_column('products', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID único del registro',
               existing_nullable=False)
    op.alter_column('products', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=sa.DateTime(),
               existing_comment='Fecha de creación',
               existing_nullable=False)
    op.alter_column('products', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=sa.DateTime(),
               existing_comment='Fecha de última actualización',
               existing_nullable=False)
    op.alter_column('products', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               comment='Fecha de eliminación lógica (soft delete)',
               existing_comment='Timestamp de eliminación soft delete',
               existing_nullable=True)
    op.drop_constraint(op.f('products_deleted_by_id_fkey'), 'products', type_='foreignkey')
    op.drop_column('products', 'deleted_by_id')
    op.drop_column('products', 'is_deleted')
    op.alter_column('storages', 'tipo',
               existing_type=postgresql.ENUM('PEQUENO', 'MEDIANO', 'GRANDE', 'ESPECIAL', name='storagetype'),
               type_=sa.Enum('PEQUENO', 'MEDIANO', 'GRANDE', 'ESPECIAL', name='storagetype'),
               existing_comment='Tipo de espacio de almacenamiento',
               existing_nullable=False)
    op.alter_column('storages', 'capacidad_max',
               existing_type=sa.INTEGER(),
               type_=sa.Integer(),
               existing_comment='Capacidad máxima en número de productos',
               existing_nullable=False)
    op.alter_column('storages', 'vendedor_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del usuario vendedor propietario del espacio',
               existing_nullable=True)
    op.alter_column('storages', 'productos_actuales',
               existing_type=sa.INTEGER(),
               type_=sa.Integer(),
               existing_comment='Número actual de productos almacenados',
               existing_nullable=False)
    op.alter_column('storages', 'ocupacion_actual',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.DECIMAL(precision=5, scale=2),
               existing_comment='Porcentaje actual de ocupación (0.00 a 100.00)',
               existing_nullable=False)
    op.alter_column('storages', 'ultima_actualizacion',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha de última actualización del tracking',
               existing_nullable=True)
    op.alter_column('storages', 'tarifa_mensual',
               existing_type=sa.NUMERIC(precision=12, scale=2),
               type_=sa.DECIMAL(precision=12, scale=2),
               existing_comment='Tarifa mensual del espacio de almacenamiento (COP)',
               existing_nullable=True)
    op.alter_column('storages', 'tarifa_por_producto',
               existing_type=sa.NUMERIC(precision=12, scale=2),
               type_=sa.DECIMAL(precision=12, scale=2),
               existing_comment='Tarifa por producto almacenado (COP)',
               existing_nullable=True)
    op.alter_column('storages', 'fecha_inicio',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha de inicio del contrato de almacenamiento',
               existing_nullable=True)
    op.alter_column('storages', 'fecha_fin',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha de finalización del contrato de almacenamiento',
               existing_nullable=True)
    op.alter_column('storages', 'renovacion_automatica',
               existing_type=sa.BOOLEAN(),
               type_=sa.Boolean(),
               existing_comment='Indica si el contrato se renueva automáticamente',
               existing_nullable=False)
    op.alter_column('storages', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID único del registro',
               existing_nullable=False)
    op.alter_column('storages', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=sa.DateTime(),
               existing_comment='Fecha de creación',
               existing_nullable=False)
    op.alter_column('storages', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=sa.DateTime(),
               existing_comment='Fecha de última actualización',
               existing_nullable=False)
    op.alter_column('storages', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.alter_column('transactions', 'monto',
               existing_type=sa.NUMERIC(precision=12, scale=2),
               type_=sa.DECIMAL(precision=12, scale=2),
               existing_comment='Monto de la transacción en pesos colombianos (COP)',
               existing_nullable=False)
    op.alter_column('transactions', 'inventory_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del inventario específico involucrado en la transacción',
               existing_nullable=True)
    op.alter_column('transactions', 'status',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=50),
               existing_comment='Estado adicional específico del procesador de pagos',
               existing_nullable=True)
    op.alter_column('transactions', 'fecha_pago',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha y hora cuando se realizó el pago efectivo',
               existing_nullable=True)
    op.alter_column('transactions', 'referencia_pago',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=100),
               existing_comment='Referencia específica del pago (diferente a referencia_externa)',
               existing_nullable=True)
    op.alter_column('transactions', 'metodo_pago',
               existing_type=postgresql.ENUM('EFECTIVO', 'TARJETA_CREDITO', 'TARJETA_DEBITO', 'PSE', 'NEQUI', 'DAVIPLATA', name='metodopago'),
               type_=sa.Enum('EFECTIVO', 'TARJETA_CREDITO', 'TARJETA_DEBITO', 'PSE', 'NEQUI', 'DAVIPLATA', name='metodopago'),
               existing_comment='Método de pago utilizado en la transacción',
               existing_nullable=False)
    op.alter_column('transactions', 'estado',
               existing_type=postgresql.ENUM('PENDIENTE', 'PROCESANDO', 'COMPLETADA', 'FALLIDA', 'CANCELADA', name='estadotransaccion'),
               type_=sa.Enum('PENDIENTE', 'PROCESANDO', 'COMPLETADA', 'FALLIDA', 'CANCELADA', name='estadotransaccion'),
               existing_comment='Estado actual de la transacción',
               existing_nullable=False)
    op.alter_column('transactions', 'transaction_type',
               existing_type=postgresql.ENUM('VENTA', 'COMISION', 'DEVOLUCION', 'AJUSTE', name='transactiontype'),
               type_=sa.Enum('VENTA', 'COMISION', 'DEVOLUCION', 'AJUSTE', name='transactiontype'),
               existing_comment='Tipo de transacción del marketplace',
               existing_nullable=False)
    op.alter_column('transactions', 'porcentaje_mestocker',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.DECIMAL(precision=5, scale=2),
               existing_comment='Porcentaje de comisión para MeStore (0.00 a 100.00)',
               existing_nullable=True)
    op.alter_column('transactions', 'monto_vendedor',
               existing_type=sa.NUMERIC(precision=12, scale=2),
               type_=sa.DECIMAL(precision=12, scale=2),
               existing_comment='Monto que recibe el vendedor después de comisiones (COP)',
               existing_nullable=True)
    op.alter_column('transactions', 'comprador_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del usuario comprador',
               existing_nullable=False)
    op.alter_column('transactions', 'vendedor_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del usuario vendedor (nullable para transacciones del sistema)',
               existing_nullable=True)
    op.alter_column('transactions', 'product_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del producto involucrado en la transacción',
               existing_nullable=True)
    op.alter_column('transactions', 'referencia_externa',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=100),
               existing_comment='Referencia externa del procesador de pagos',
               existing_nullable=True)
    op.alter_column('transactions', 'observaciones',
               existing_type=sa.TEXT(),
               type_=sa.Text(),
               existing_comment='Observaciones adicionales sobre la transacción',
               existing_nullable=True)
    op.alter_column('transactions', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID único del registro',
               existing_nullable=False)
    op.alter_column('transactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=sa.DateTime(),
               existing_comment='Fecha de creación',
               existing_nullable=False)
    op.alter_column('transactions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=sa.DateTime(),
               existing_comment='Fecha de última actualización',
               existing_nullable=False)
    op.alter_column('transactions', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='Identificador único UUID del usuario',
               existing_nullable=False)
    op.alter_column('users', 'reset_token',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=100),
               comment='Token temporal para reset de contraseña',
               existing_comment='Token SHA-256 para recuperación de contraseña',
               existing_nullable=True)
    op.alter_column('users', 'reset_token_expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(timezone=True),
               comment='Fecha y hora de expiración del token de reset',
               existing_comment='Expiración del token de recuperación (15 minutos)',
               existing_nullable=True)
    op.alter_column('users', 'reset_attempts',
               existing_type=sa.INTEGER(),
               type_=sa.Integer(),
               comment='Número de intentos de reset de contraseña',
               existing_comment='Intentos de recuperación fallidos (máximo 5 por día)',
               existing_nullable=False)
    op.alter_column('users', 'last_reset_request',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(timezone=True),
               comment='Fecha y hora del último request de reset',
               existing_comment='Último solicitud de recuperación (cooldown 1 minuto)',
               existing_nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=255),
               existing_comment='Email único del usuario, usado para login',
               existing_nullable=False)
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=255),
               existing_comment='Hash bcrypt de la contraseña del usuario',
               existing_nullable=False)
    op.alter_column('users', 'nombre',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=100),
               existing_comment='Nombre del usuario',
               existing_nullable=True)
    op.alter_column('users', 'apellido',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=100),
               existing_comment='Apellido del usuario',
               existing_nullable=True)
    op.alter_column('users', 'user_type',
               existing_type=postgresql.ENUM('SUPERUSER', 'ADMIN', 'VENDEDOR', 'COMPRADOR', name='usertype'),
               type_=sa.Enum('COMPRADOR', 'VENDEDOR', 'ADMIN', 'SUPERUSER', name='usertype'),
               existing_comment='Tipo de usuario: comprador o vendedor',
               existing_nullable=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               type_=sa.Boolean(),
               existing_comment='Indica si el usuario está activo en el sistema',
               existing_nullable=False)
    op.alter_column('users', 'is_verified',
               existing_type=sa.BOOLEAN(),
               server_default='false',
               type_=sa.Boolean(),
               existing_comment='Indica si el usuario ha verificado su email',
               existing_nullable=False)
    op.alter_column('users', 'cedula',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=20),
               existing_comment='Cédula de ciudadanía colombiana (opcional, única)',
               existing_nullable=True)
    op.alter_column('users', 'telefono',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=20),
               existing_comment='Número de teléfono colombiano (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'ciudad',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=100),
               existing_comment='Ciudad de residencia en Colombia (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'empresa',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=200),
               existing_comment='Empresa donde trabaja el usuario (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'direccion',
               existing_type=sa.VARCHAR(length=300),
               type_=sa.String(length=300),
               existing_comment='Dirección de residencia completa (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'email_verified',
               existing_type=sa.BOOLEAN(),
               type_=sa.Boolean(),
               existing_comment='Email verificado con código OTP',
               existing_nullable=False)
    op.alter_column('users', 'phone_verified',
               existing_type=sa.BOOLEAN(),
               type_=sa.Boolean(),
               existing_comment='Teléfono verificado con código OTP',
               existing_nullable=False)
    op.alter_column('users', 'otp_secret',
               existing_type=sa.VARCHAR(length=6),
               type_=sa.String(length=6),
               existing_comment='Código OTP temporal (6 dígitos)',
               existing_nullable=True)
    op.alter_column('users', 'otp_expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(timezone=True),
               existing_comment='Fecha y hora de expiración del código OTP',
               existing_nullable=True)
    op.alter_column('users', 'otp_attempts',
               existing_type=sa.INTEGER(),
               type_=sa.Integer(),
               existing_comment='Número de intentos fallidos de verificación OTP',
               existing_nullable=False)
    op.alter_column('users', 'otp_type',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=10),
               existing_comment='Tipo de OTP enviado: EMAIL o SMS',
               existing_nullable=True)
    op.alter_column('users', 'last_otp_sent',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(timezone=True),
               existing_comment='Fecha y hora del último envío de OTP',
               existing_nullable=True)
    op.alter_column('users', 'last_login',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(timezone=True),
               existing_comment='Timestamp del último login del usuario',
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               type_=sa.DateTime(timezone=True),
               existing_comment='Timestamp de última actualización del registro',
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=sa.DateTime(),
               existing_comment='Fecha de creación',
               existing_nullable=False)
    op.alter_column('users', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.create_index(op.f('ix_users_reset_token_expires_at'), 'users', ['reset_token_expires_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_reset_token_expires_at'), table_name='users')
    op.alter_column('users', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de creación',
               existing_nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_comment='Timestamp de última actualización del registro',
               existing_nullable=False)
    op.alter_column('users', 'last_login',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_comment='Timestamp del último login del usuario',
               existing_nullable=True)
    op.alter_column('users', 'last_otp_sent',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_comment='Fecha y hora del último envío de OTP',
               existing_nullable=True)
    op.alter_column('users', 'otp_type',
               existing_type=sa.String(length=10),
               type_=sa.VARCHAR(length=10),
               existing_comment='Tipo de OTP enviado: EMAIL o SMS',
               existing_nullable=True)
    op.alter_column('users', 'otp_attempts',
               existing_type=sa.Integer(),
               type_=sa.INTEGER(),
               existing_comment='Número de intentos fallidos de verificación OTP',
               existing_nullable=False)
    op.alter_column('users', 'otp_expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_comment='Fecha y hora de expiración del código OTP',
               existing_nullable=True)
    op.alter_column('users', 'otp_secret',
               existing_type=sa.String(length=6),
               type_=sa.VARCHAR(length=6),
               existing_comment='Código OTP temporal (6 dígitos)',
               existing_nullable=True)
    op.alter_column('users', 'phone_verified',
               existing_type=sa.Boolean(),
               type_=sa.BOOLEAN(),
               existing_comment='Teléfono verificado con código OTP',
               existing_nullable=False)
    op.alter_column('users', 'email_verified',
               existing_type=sa.Boolean(),
               type_=sa.BOOLEAN(),
               existing_comment='Email verificado con código OTP',
               existing_nullable=False)
    op.alter_column('users', 'direccion',
               existing_type=sa.String(length=300),
               type_=sa.VARCHAR(length=300),
               existing_comment='Dirección de residencia completa (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'empresa',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=200),
               existing_comment='Empresa donde trabaja el usuario (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'ciudad',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=100),
               existing_comment='Ciudad de residencia en Colombia (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'telefono',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=20),
               existing_comment='Número de teléfono colombiano (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'cedula',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=20),
               existing_comment='Cédula de ciudadanía colombiana (opcional, única)',
               existing_nullable=True)
    op.alter_column('users', 'is_verified',
               existing_type=sa.Boolean(),
               server_default=sa.text('false'),
               type_=sa.BOOLEAN(),
               existing_comment='Indica si el usuario ha verificado su email',
               existing_nullable=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.Boolean(),
               type_=sa.BOOLEAN(),
               existing_comment='Indica si el usuario está activo en el sistema',
               existing_nullable=False)
    op.alter_column('users', 'user_type',
               existing_type=sa.Enum('COMPRADOR', 'VENDEDOR', 'ADMIN', 'SUPERUSER', name='usertype'),
               type_=postgresql.ENUM('SUPERUSER', 'ADMIN', 'VENDEDOR', 'COMPRADOR', name='usertype'),
               existing_comment='Tipo de usuario: comprador o vendedor',
               existing_nullable=False)
    op.alter_column('users', 'apellido',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=100),
               existing_comment='Apellido del usuario',
               existing_nullable=True)
    op.alter_column('users', 'nombre',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=100),
               existing_comment='Nombre del usuario',
               existing_nullable=True)
    op.alter_column('users', 'password_hash',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=255),
               existing_comment='Hash bcrypt de la contraseña del usuario',
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=255),
               existing_comment='Email único del usuario, usado para login',
               existing_nullable=False)
    op.alter_column('users', 'last_reset_request',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(timezone=True),
               comment='Último solicitud de recuperación (cooldown 1 minuto)',
               existing_comment='Fecha y hora del último request de reset',
               existing_nullable=True)
    op.alter_column('users', 'reset_attempts',
               existing_type=sa.Integer(),
               type_=sa.INTEGER(),
               comment='Intentos de recuperación fallidos (máximo 5 por día)',
               existing_comment='Número de intentos de reset de contraseña',
               existing_nullable=False)
    op.alter_column('users', 'reset_token_expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(timezone=True),
               comment='Expiración del token de recuperación (15 minutos)',
               existing_comment='Fecha y hora de expiración del token de reset',
               existing_nullable=True)
    op.alter_column('users', 'reset_token',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=64),
               comment='Token SHA-256 para recuperación de contraseña',
               existing_comment='Token temporal para reset de contraseña',
               existing_nullable=True)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='Identificador único UUID del usuario',
               existing_nullable=False)
    op.alter_column('transactions', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.alter_column('transactions', 'updated_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de última actualización',
               existing_nullable=False)
    op.alter_column('transactions', 'created_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de creación',
               existing_nullable=False)
    op.alter_column('transactions', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID único del registro',
               existing_nullable=False)
    op.alter_column('transactions', 'observaciones',
               existing_type=sa.Text(),
               type_=sa.TEXT(),
               existing_comment='Observaciones adicionales sobre la transacción',
               existing_nullable=True)
    op.alter_column('transactions', 'referencia_externa',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=100),
               existing_comment='Referencia externa del procesador de pagos',
               existing_nullable=True)
    op.alter_column('transactions', 'product_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del producto involucrado en la transacción',
               existing_nullable=True)
    op.alter_column('transactions', 'vendedor_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del usuario vendedor (nullable para transacciones del sistema)',
               existing_nullable=True)
    op.alter_column('transactions', 'comprador_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del usuario comprador',
               existing_nullable=False)
    op.alter_column('transactions', 'monto_vendedor',
               existing_type=sa.DECIMAL(precision=12, scale=2),
               type_=sa.NUMERIC(precision=12, scale=2),
               existing_comment='Monto que recibe el vendedor después de comisiones (COP)',
               existing_nullable=True)
    op.alter_column('transactions', 'porcentaje_mestocker',
               existing_type=sa.DECIMAL(precision=5, scale=2),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_comment='Porcentaje de comisión para MeStore (0.00 a 100.00)',
               existing_nullable=True)
    op.alter_column('transactions', 'transaction_type',
               existing_type=sa.Enum('VENTA', 'COMISION', 'DEVOLUCION', 'AJUSTE', name='transactiontype'),
               type_=postgresql.ENUM('VENTA', 'COMISION', 'DEVOLUCION', 'AJUSTE', name='transactiontype'),
               existing_comment='Tipo de transacción del marketplace',
               existing_nullable=False)
    op.alter_column('transactions', 'estado',
               existing_type=sa.Enum('PENDIENTE', 'PROCESANDO', 'COMPLETADA', 'FALLIDA', 'CANCELADA', name='estadotransaccion'),
               type_=postgresql.ENUM('PENDIENTE', 'PROCESANDO', 'COMPLETADA', 'FALLIDA', 'CANCELADA', name='estadotransaccion'),
               existing_comment='Estado actual de la transacción',
               existing_nullable=False)
    op.alter_column('transactions', 'metodo_pago',
               existing_type=sa.Enum('EFECTIVO', 'TARJETA_CREDITO', 'TARJETA_DEBITO', 'PSE', 'NEQUI', 'DAVIPLATA', name='metodopago'),
               type_=postgresql.ENUM('EFECTIVO', 'TARJETA_CREDITO', 'TARJETA_DEBITO', 'PSE', 'NEQUI', 'DAVIPLATA', name='metodopago'),
               existing_comment='Método de pago utilizado en la transacción',
               existing_nullable=False)
    op.alter_column('transactions', 'referencia_pago',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=100),
               existing_comment='Referencia específica del pago (diferente a referencia_externa)',
               existing_nullable=True)
    op.alter_column('transactions', 'fecha_pago',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha y hora cuando se realizó el pago efectivo',
               existing_nullable=True)
    op.alter_column('transactions', 'status',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=50),
               existing_comment='Estado adicional específico del procesador de pagos',
               existing_nullable=True)
    op.alter_column('transactions', 'inventory_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del inventario específico involucrado en la transacción',
               existing_nullable=True)
    op.alter_column('transactions', 'monto',
               existing_type=sa.DECIMAL(precision=12, scale=2),
               type_=sa.NUMERIC(precision=12, scale=2),
               existing_comment='Monto de la transacción en pesos colombianos (COP)',
               existing_nullable=False)
    op.alter_column('storages', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.alter_column('storages', 'updated_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de última actualización',
               existing_nullable=False)
    op.alter_column('storages', 'created_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de creación',
               existing_nullable=False)
    op.alter_column('storages', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID único del registro',
               existing_nullable=False)
    op.alter_column('storages', 'renovacion_automatica',
               existing_type=sa.Boolean(),
               type_=sa.BOOLEAN(),
               existing_comment='Indica si el contrato se renueva automáticamente',
               existing_nullable=False)
    op.alter_column('storages', 'fecha_fin',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de finalización del contrato de almacenamiento',
               existing_nullable=True)
    op.alter_column('storages', 'fecha_inicio',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de inicio del contrato de almacenamiento',
               existing_nullable=True)
    op.alter_column('storages', 'tarifa_por_producto',
               existing_type=sa.DECIMAL(precision=12, scale=2),
               type_=sa.NUMERIC(precision=12, scale=2),
               existing_comment='Tarifa por producto almacenado (COP)',
               existing_nullable=True)
    op.alter_column('storages', 'tarifa_mensual',
               existing_type=sa.DECIMAL(precision=12, scale=2),
               type_=sa.NUMERIC(precision=12, scale=2),
               existing_comment='Tarifa mensual del espacio de almacenamiento (COP)',
               existing_nullable=True)
    op.alter_column('storages', 'ultima_actualizacion',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de última actualización del tracking',
               existing_nullable=True)
    op.alter_column('storages', 'ocupacion_actual',
               existing_type=sa.DECIMAL(precision=5, scale=2),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_comment='Porcentaje actual de ocupación (0.00 a 100.00)',
               existing_nullable=False)
    op.alter_column('storages', 'productos_actuales',
               existing_type=sa.Integer(),
               type_=sa.INTEGER(),
               existing_comment='Número actual de productos almacenados',
               existing_nullable=False)
    op.alter_column('storages', 'vendedor_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del usuario vendedor propietario del espacio',
               existing_nullable=True)
    op.alter_column('storages', 'capacidad_max',
               existing_type=sa.Integer(),
               type_=sa.INTEGER(),
               existing_comment='Capacidad máxima en número de productos',
               existing_nullable=False)
    op.alter_column('storages', 'tipo',
               existing_type=sa.Enum('PEQUENO', 'MEDIANO', 'GRANDE', 'ESPECIAL', name='storagetype'),
               type_=postgresql.ENUM('PEQUENO', 'MEDIANO', 'GRANDE', 'ESPECIAL', name='storagetype'),
               existing_comment='Tipo de espacio de almacenamiento',
               existing_nullable=False)
    op.add_column('products', sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Indica si el producto está eliminado (soft delete)'))
    op.add_column('products', sa.Column('deleted_by_id', sa.UUID(), autoincrement=False, nullable=True, comment='Usuario que eliminó el producto'))
    op.create_foreign_key(op.f('products_deleted_by_id_fkey'), 'products', 'users', ['deleted_by_id'], ['id'])
    op.alter_column('products', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               comment='Timestamp de eliminación soft delete',
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.alter_column('products', 'updated_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de última actualización',
               existing_nullable=False)
    op.alter_column('products', 'created_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de creación',
               existing_nullable=False)
    op.alter_column('products', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID único del registro',
               existing_nullable=False)
    op.alter_column('products', 'tags',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_comment='Tags del producto como array JSON para búsquedas',
               existing_nullable=True)
    op.alter_column('products', 'categoria',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=100),
               existing_comment='Categoría del producto para organización',
               existing_nullable=True)
    op.alter_column('products', 'dimensiones',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_comment='Dimensiones del producto: {largo, ancho, alto} en cm',
               existing_nullable=True)
    op.alter_column('products', 'peso',
               existing_type=sa.DECIMAL(precision=8, scale=3),
               type_=sa.NUMERIC(precision=8, scale=3),
               existing_comment='Peso del producto en kilogramos',
               existing_nullable=True)
    op.alter_column('products', 'comision_mestocker',
               existing_type=sa.DECIMAL(precision=10, scale=2),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_comment='Comisión de MeStore por venta del producto (COP)',
               existing_nullable=True)
    op.alter_column('products', 'precio_costo',
               existing_type=sa.DECIMAL(precision=10, scale=2),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_comment='Precio de costo/compra del producto (COP)',
               existing_nullable=True)
    op.alter_column('products', 'precio_venta',
               existing_type=sa.DECIMAL(precision=10, scale=2),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_comment='Precio de venta al público (COP)',
               existing_nullable=True)
    op.alter_column('products', 'status',
               existing_type=sa.Enum('TRANSITO', 'VERIFICADO', 'DISPONIBLE', 'VENDIDO', name='productstatus'),
               type_=postgresql.ENUM('TRANSITO', 'VERIFICADO', 'DISPONIBLE', 'VENDIDO', name='productstatus'),
               existing_comment='Estado actual del producto en el marketplace',
               existing_nullable=False)
    op.alter_column('products', 'description',
               existing_type=sa.Text(),
               type_=sa.TEXT(),
               existing_comment='Descripción detallada del producto',
               existing_nullable=True)
    op.alter_column('products', 'name',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=200),
               existing_comment='Nombre del producto para búsquedas',
               existing_nullable=False)
    op.alter_column('products', 'version',
               existing_type=sa.Integer(),
               type_=sa.INTEGER(),
               existing_comment='Versión del producto para control de cambios',
               existing_nullable=False)
    op.alter_column('products', 'updated_by_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del usuario que actualizó por última vez',
               existing_nullable=True)
    op.alter_column('products', 'created_by_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del usuario que creó el producto',
               existing_nullable=True)
    op.alter_column('products', 'vendedor_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del usuario vendedor que registró el producto',
               existing_nullable=True)
    op.alter_column('products', 'sku',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=50),
               existing_comment='Código único del producto para identificación',
               existing_nullable=False)
    op.alter_column('inventory', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.alter_column('inventory', 'updated_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de última actualización',
               existing_nullable=False)
    op.alter_column('inventory', 'created_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de creación',
               existing_nullable=False)
    op.alter_column('inventory', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID único del registro',
               existing_nullable=False)
    op.alter_column('inventory', 'fecha_ultimo_movimiento',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha del último movimiento de stock',
               existing_nullable=False)
    op.alter_column('inventory', 'fecha_ingreso',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de ingreso del producto al inventario',
               existing_nullable=False)
    op.alter_column('inventory', 'storage_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='FK hacia Storage - ubicación física del inventario',
               existing_nullable=True)
    op.alter_column('inventory', 'updated_by_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del usuario que actualizó el inventario',
               existing_nullable=True)
    op.alter_column('inventory', 'cantidad_reservada',
               existing_type=sa.Integer(),
               type_=sa.INTEGER(),
               existing_comment='Cantidad reservada para órdenes',
               existing_nullable=False)
    op.alter_column('inventory', 'cantidad',
               existing_type=sa.Integer(),
               type_=sa.INTEGER(),
               existing_comment='Cantidad disponible en esta ubicación',
               existing_nullable=False)
    op.alter_column('inventory', 'posicion',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=20),
               existing_comment='Posición específica dentro del estante',
               existing_nullable=False)
    op.alter_column('inventory', 'estante',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=20),
               existing_comment='Número de estante dentro de la zona',
               existing_nullable=False)
    op.alter_column('inventory', 'zona',
               existing_type=sa.String(length=10),
               type_=sa.VARCHAR(length=10),
               existing_comment='Zona del almacén (A, B, C, etc.)',
               existing_nullable=False)
    op.alter_column('inventory', 'notas_almacen',
               existing_type=sa.Text(),
               type_=sa.TEXT(),
               existing_comment='Observaciones y notas del personal de almacén',
               existing_nullable=True)
    op.alter_column('inventory', 'condicion_producto',
               existing_type=sa.Enum('NUEVO', 'USADO_EXCELENTE', 'USADO_BUENO', 'USADO_REGULAR', 'DAÑADO', name='condicionproducto'),
               type_=postgresql.ENUM('NUEVO', 'USADO_EXCELENTE', 'USADO_BUENO', 'USADO_REGULAR', 'DAÑADO', name='condicionproducto'),
               existing_comment='Condición física del producto en inventario',
               existing_nullable=False)
    op.alter_column('inventory', 'status',
               existing_type=sa.Enum('DISPONIBLE', 'RESERVADO', 'EN_PICKING', 'DESPACHADO', name='inventorystatus'),
               type_=postgresql.ENUM('DISPONIBLE', 'RESERVADO', 'EN_PICKING', 'DESPACHADO', name='inventorystatus'),
               existing_comment='Estado del inventario en el proceso de fulfillment',
               existing_nullable=False)
    op.alter_column('inventory', 'product_id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID del producto en inventario',
               existing_nullable=False)
    op.create_table('test_simple_concrete_model',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False, comment='ID único del registro'),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Fecha de creación'),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Fecha de última actualización'),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Fecha de eliminación lógica (soft delete)'),
    sa.PrimaryKeyConstraint('id', name=op.f('test_simple_concrete_model_pkey'))
    )
    op.create_index(op.f('ix_test_simple_concrete_model_id'), 'test_simple_concrete_model', ['id'], unique=False)
    # ### end Alembic commands ###
