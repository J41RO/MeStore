"""Fix nullability: email and password_hash NOT NULL

Revision ID: 4c4b492251b1
Revises: a9e6081cc12d
Create Date: 2025-07-25 07:43:28.766106+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4c4b492251b1'
down_revision: Union[str, Sequence[str], None] = 'a9e6081cc12d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='Identificador único UUID del usuario',
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=255),
               existing_comment='Email único del usuario, usado para login',
               existing_nullable=False)
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=255),
               existing_comment='Hash bcrypt de la contraseña del usuario',
               existing_nullable=False)
    op.alter_column('users', 'nombre',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=100),
               existing_comment='Nombre del usuario',
               existing_nullable=True)
    op.alter_column('users', 'apellido',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=100),
               existing_comment='Apellido del usuario',
               existing_nullable=True)
    op.alter_column('users', 'user_type',
               existing_type=postgresql.ENUM('SUPERUSER', 'ADMIN', 'VENDEDOR', 'COMPRADOR', name='usertype'),
               type_=sa.Enum('COMPRADOR', 'VENDEDOR', name='usertype'),
               nullable=True,
               existing_comment='Tipo de usuario: comprador o vendedor')
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               type_=sa.Boolean(),
               nullable=True,
               existing_comment='Indica si el usuario está activo en el sistema')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               type_=sa.DateTime(timezone=True),
               nullable=True,
               existing_comment='Timestamp de creación del registro')
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               type_=sa.DateTime(timezone=True),
               nullable=True,
               existing_comment='Timestamp de última actualización del registro')
    op.alter_column('users', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_comment='Timestamp de última actualización del registro')
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_comment='Timestamp de creación del registro')
    op.alter_column('users', 'is_active',
               existing_type=sa.Boolean(),
               type_=sa.BOOLEAN(),
               nullable=False,
               existing_comment='Indica si el usuario está activo en el sistema')
    op.alter_column('users', 'user_type',
               existing_type=sa.Enum('COMPRADOR', 'VENDEDOR', name='usertype'),
               type_=postgresql.ENUM('SUPERUSER', 'ADMIN', 'VENDEDOR', 'COMPRADOR', name='usertype'),
               nullable=False,
               existing_comment='Tipo de usuario: comprador o vendedor')
    op.alter_column('users', 'apellido',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=100),
               existing_comment='Apellido del usuario',
               existing_nullable=True)
    op.alter_column('users', 'nombre',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=100),
               existing_comment='Nombre del usuario',
               existing_nullable=True)
    op.alter_column('users', 'password_hash',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=255),
               existing_comment='Hash bcrypt de la contraseña del usuario',
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=255),
               existing_comment='Email único del usuario, usado para login',
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='Identificador único UUID del usuario',
               existing_nullable=False)
    # ### end Alembic commands ###
