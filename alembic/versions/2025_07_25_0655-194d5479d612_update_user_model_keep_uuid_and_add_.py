"""Update User model - keep UUID and add missing fields

Revision ID: 194d5479d612
Revises: e425affce981
Create Date: 2025-07-25 06:55:41.384710+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '194d5479d612'
down_revision: Union[str, Sequence[str], None] = 'e425affce981'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=False, comment='Indica si el usuario está activo en el sistema'))
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               comment='Identificador único UUID del usuario',
               existing_comment='ID único del registro',
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=255),
               comment='Email único del usuario, usado para login',
               existing_comment='Email único del usuario',
               existing_nullable=False)
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=255),
               comment='Hash bcrypt de la contraseña del usuario',
               existing_comment='Hash seguro de la contraseña',
               existing_nullable=False)
    op.alter_column('users', 'user_type',
               existing_type=postgresql.ENUM('SUPERUSER', 'ADMIN', 'VENDEDOR', 'COMPRADOR', name='usertype'),
               type_=sa.Enum('COMPRADOR', 'VENDEDOR', name='usertype'),
               comment='Tipo de usuario: comprador o vendedor',
               existing_comment='Tipo de usuario en el sistema',
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               type_=sa.DateTime(timezone=True),
               comment='Timestamp de creación del registro',
               existing_comment='Fecha de creación',
               existing_nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               type_=sa.DateTime(timezone=True),
               comment='Timestamp de última actualización del registro',
               existing_comment='Fecha de última actualización',
               existing_nullable=False)
    op.alter_column('users', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.drop_column('users', 'nombre')
    op.drop_column('users', 'active_status')
    op.drop_column('users', 'apellido')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('apellido', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Apellido del usuario'))
    op.add_column('users', sa.Column('active_status', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Estado activo del usuario en el sistema'))
    op.add_column('users', sa.Column('nombre', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Nombre del usuario'))
    op.alter_column('users', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               comment='Fecha de última actualización',
               existing_comment='Timestamp de última actualización del registro',
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               comment='Fecha de creación',
               existing_comment='Timestamp de creación del registro',
               existing_nullable=False)
    op.alter_column('users', 'user_type',
               existing_type=sa.Enum('COMPRADOR', 'VENDEDOR', name='usertype'),
               type_=postgresql.ENUM('SUPERUSER', 'ADMIN', 'VENDEDOR', 'COMPRADOR', name='usertype'),
               comment='Tipo de usuario en el sistema',
               existing_comment='Tipo de usuario: comprador o vendedor',
               existing_nullable=False)
    op.alter_column('users', 'password_hash',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=255),
               comment='Hash seguro de la contraseña',
               existing_comment='Hash bcrypt de la contraseña del usuario',
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=255),
               comment='Email único del usuario',
               existing_comment='Email único del usuario, usado para login',
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               comment='ID único del registro',
               existing_comment='Identificador único UUID del usuario',
               existing_nullable=False)
    op.drop_column('users', 'is_active')
    # ### end Alembic commands ###
