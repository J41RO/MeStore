"""add fulfillment fields to products

Revision ID: 74cbefbb7ae0
Revises: f5aaae464350
Create Date: 2025-07-28 06:07:24.964405+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '74cbefbb7ae0'
down_revision: Union[str, Sequence[str], None] = 'f5aaae464350'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('products', sa.Column('peso', sa.DECIMAL(precision=8, scale=3), nullable=True, comment='Peso del producto en kilogramos'))
    op.add_column('products', sa.Column('dimensiones', postgresql.JSON(astext_type=sa.Text()), nullable=True, comment='Dimensiones del producto: {largo, ancho, alto} en cm'))
    op.add_column('products', sa.Column('categoria', sa.String(length=100), nullable=True, comment='Categoría del producto para organización'))
    op.add_column('products', sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), nullable=True, comment='Tags del producto como array JSON para búsquedas'))
    op.alter_column('products', 'sku',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=50),
               existing_comment='Código único del producto para identificación',
               existing_nullable=False)
    op.alter_column('products', 'name',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=200),
               existing_comment='Nombre del producto para búsquedas',
               existing_nullable=False)
    op.alter_column('products', 'description',
               existing_type=sa.TEXT(),
               type_=sa.Text(),
               existing_comment='Descripción detallada del producto',
               existing_nullable=True)
    op.alter_column('products', 'status',
               existing_type=postgresql.ENUM('TRANSITO', 'VERIFICADO', 'DISPONIBLE', 'VENDIDO', name='productstatus'),
               type_=sa.Enum('TRANSITO', 'VERIFICADO', 'DISPONIBLE', 'VENDIDO', name='productstatus'),
               existing_comment='Estado actual del producto en el marketplace',
               existing_nullable=False)
    op.alter_column('products', 'precio_venta',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.DECIMAL(precision=10, scale=2),
               existing_comment='Precio de venta al público (COP)',
               existing_nullable=True)
    op.alter_column('products', 'precio_costo',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.DECIMAL(precision=10, scale=2),
               existing_comment='Precio de costo/compra del producto (COP)',
               existing_nullable=True)
    op.alter_column('products', 'comision_mestocker',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.DECIMAL(precision=10, scale=2),
               existing_comment='Comisión de MeStore por venta del producto (COP)',
               existing_nullable=True)
    op.alter_column('products', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID único del registro',
               existing_nullable=False)
    op.alter_column('products', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=sa.DateTime(),
               existing_comment='Fecha de creación',
               existing_nullable=False)
    op.alter_column('products', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=sa.DateTime(),
               existing_comment='Fecha de última actualización',
               existing_nullable=False)
    op.alter_column('products', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.create_index(op.f('ix_products_categoria'), 'products', ['categoria'], unique=False)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='Identificador único UUID del usuario',
               existing_nullable=False)
    op.alter_column('users', 'is_verified',
               existing_type=sa.BOOLEAN(),
               server_default='false',
               type_=sa.Boolean(),
               existing_comment='Indica si el usuario ha verificado su email',
               existing_nullable=False)
    op.alter_column('users', 'last_login',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(timezone=True),
               existing_comment='Timestamp del último login del usuario',
               existing_nullable=True)
    op.alter_column('users', 'cedula',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=20),
               existing_comment='Cédula de ciudadanía colombiana (opcional, única)',
               existing_nullable=True)
    op.alter_column('users', 'telefono',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=20),
               existing_comment='Número de teléfono colombiano (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'ciudad',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=100),
               existing_comment='Ciudad de residencia en Colombia (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'empresa',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=200),
               existing_comment='Empresa donde trabaja el usuario (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'direccion',
               existing_type=sa.VARCHAR(length=300),
               type_=sa.String(length=300),
               existing_comment='Dirección de residencia completa (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=255),
               existing_comment='Email único del usuario, usado para login',
               existing_nullable=False)
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=255),
               existing_comment='Hash bcrypt de la contraseña del usuario',
               existing_nullable=False)
    op.alter_column('users', 'nombre',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=100),
               existing_comment='Nombre del usuario',
               existing_nullable=True)
    op.alter_column('users', 'apellido',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=100),
               existing_comment='Apellido del usuario',
               existing_nullable=True)
    op.alter_column('users', 'user_type',
               existing_type=postgresql.ENUM('SUPERUSER', 'ADMIN', 'VENDEDOR', 'COMPRADOR', name='usertype'),
               type_=sa.Enum('COMPRADOR', 'VENDEDOR', 'ADMIN', 'SUPERUSER', name='usertype'),
               existing_comment='Tipo de usuario: comprador o vendedor',
               existing_nullable=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               type_=sa.Boolean(),
               existing_comment='Indica si el usuario está activo en el sistema',
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               type_=sa.DateTime(timezone=True),
               existing_comment='Timestamp de creación del registro',
               existing_nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               type_=sa.DateTime(timezone=True),
               existing_comment='Timestamp de última actualización del registro',
               existing_nullable=False)
    op.alter_column('users', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_comment='Timestamp de última actualización del registro',
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_comment='Timestamp de creación del registro',
               existing_nullable=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.Boolean(),
               type_=sa.BOOLEAN(),
               existing_comment='Indica si el usuario está activo en el sistema',
               existing_nullable=False)
    op.alter_column('users', 'user_type',
               existing_type=sa.Enum('COMPRADOR', 'VENDEDOR', 'ADMIN', 'SUPERUSER', name='usertype'),
               type_=postgresql.ENUM('SUPERUSER', 'ADMIN', 'VENDEDOR', 'COMPRADOR', name='usertype'),
               existing_comment='Tipo de usuario: comprador o vendedor',
               existing_nullable=False)
    op.alter_column('users', 'apellido',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=100),
               existing_comment='Apellido del usuario',
               existing_nullable=True)
    op.alter_column('users', 'nombre',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=100),
               existing_comment='Nombre del usuario',
               existing_nullable=True)
    op.alter_column('users', 'password_hash',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=255),
               existing_comment='Hash bcrypt de la contraseña del usuario',
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=255),
               existing_comment='Email único del usuario, usado para login',
               existing_nullable=False)
    op.alter_column('users', 'direccion',
               existing_type=sa.String(length=300),
               type_=sa.VARCHAR(length=300),
               existing_comment='Dirección de residencia completa (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'empresa',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=200),
               existing_comment='Empresa donde trabaja el usuario (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'ciudad',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=100),
               existing_comment='Ciudad de residencia en Colombia (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'telefono',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=20),
               existing_comment='Número de teléfono colombiano (opcional)',
               existing_nullable=True)
    op.alter_column('users', 'cedula',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=20),
               existing_comment='Cédula de ciudadanía colombiana (opcional, única)',
               existing_nullable=True)
    op.alter_column('users', 'last_login',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_comment='Timestamp del último login del usuario',
               existing_nullable=True)
    op.alter_column('users', 'is_verified',
               existing_type=sa.Boolean(),
               server_default=sa.text('false'),
               type_=sa.BOOLEAN(),
               existing_comment='Indica si el usuario ha verificado su email',
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='Identificador único UUID del usuario',
               existing_nullable=False)
    op.drop_index(op.f('ix_products_categoria'), table_name='products')
    op.alter_column('products', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.alter_column('products', 'updated_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de última actualización',
               existing_nullable=False)
    op.alter_column('products', 'created_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de creación',
               existing_nullable=False)
    op.alter_column('products', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='ID único del registro',
               existing_nullable=False)
    op.alter_column('products', 'comision_mestocker',
               existing_type=sa.DECIMAL(precision=10, scale=2),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_comment='Comisión de MeStore por venta del producto (COP)',
               existing_nullable=True)
    op.alter_column('products', 'precio_costo',
               existing_type=sa.DECIMAL(precision=10, scale=2),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_comment='Precio de costo/compra del producto (COP)',
               existing_nullable=True)
    op.alter_column('products', 'precio_venta',
               existing_type=sa.DECIMAL(precision=10, scale=2),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_comment='Precio de venta al público (COP)',
               existing_nullable=True)
    op.alter_column('products', 'status',
               existing_type=sa.Enum('TRANSITO', 'VERIFICADO', 'DISPONIBLE', 'VENDIDO', name='productstatus'),
               type_=postgresql.ENUM('TRANSITO', 'VERIFICADO', 'DISPONIBLE', 'VENDIDO', name='productstatus'),
               existing_comment='Estado actual del producto en el marketplace',
               existing_nullable=False)
    op.alter_column('products', 'description',
               existing_type=sa.Text(),
               type_=sa.TEXT(),
               existing_comment='Descripción detallada del producto',
               existing_nullable=True)
    op.alter_column('products', 'name',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=200),
               existing_comment='Nombre del producto para búsquedas',
               existing_nullable=False)
    op.alter_column('products', 'sku',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=50),
               existing_comment='Código único del producto para identificación',
               existing_nullable=False)
    op.drop_column('products', 'tags')
    op.drop_column('products', 'categoria')
    op.drop_column('products', 'dimensiones')
    op.drop_column('products', 'peso')
    # ### end Alembic commands ###
