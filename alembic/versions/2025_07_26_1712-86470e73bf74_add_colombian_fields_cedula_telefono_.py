"""add colombian fields cedula telefono ciudad to users

Revision ID: 86470e73bf74
Revises: 4c4b492251b1
Create Date: 2025-07-26 17:12:04.359910+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '86470e73bf74'
down_revision: Union[str, Sequence[str], None] = '4c4b492251b1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_test_simple_concrete_model_id'), table_name='test_simple_concrete_model')
    op.drop_table('test_simple_concrete_model')
    op.add_column('users', sa.Column('cedula', sa.String(length=20), nullable=True, comment='Cédula de ciudadanía colombiana (opcional, única)'))
    op.add_column('users', sa.Column('telefono', sa.String(length=20), nullable=True, comment='Número de teléfono colombiano (opcional)'))
    op.add_column('users', sa.Column('ciudad', sa.String(length=100), nullable=True, comment='Ciudad de residencia en Colombia (opcional)'))
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='Identificador único UUID del usuario',
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=255),
               existing_comment='Email único del usuario, usado para login',
               existing_nullable=False)
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=255),
               existing_comment='Hash bcrypt de la contraseña del usuario',
               existing_nullable=False)
    op.alter_column('users', 'nombre',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=100),
               existing_comment='Nombre del usuario',
               existing_nullable=True)
    op.alter_column('users', 'apellido',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=100),
               existing_comment='Apellido del usuario',
               existing_nullable=True)
    op.alter_column('users', 'user_type',
               existing_type=postgresql.ENUM('SUPERUSER', 'ADMIN', 'VENDEDOR', 'COMPRADOR', name='usertype'),
               type_=sa.Enum('COMPRADOR', 'VENDEDOR', 'ADMIN', 'SUPERUSER', name='usertype'),
               existing_comment='Tipo de usuario: comprador o vendedor',
               existing_nullable=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               type_=sa.Boolean(),
               existing_comment='Indica si el usuario está activo en el sistema',
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               type_=sa.DateTime(timezone=True),
               existing_comment='Timestamp de creación del registro',
               existing_nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               type_=sa.DateTime(timezone=True),
               existing_comment='Timestamp de última actualización del registro',
               existing_nullable=False)
    op.alter_column('users', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.create_index(op.f('ix_users_cedula'), 'users', ['cedula'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_cedula'), table_name='users')
    op.alter_column('users', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(),
               existing_comment='Fecha de eliminación lógica (soft delete)',
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_comment='Timestamp de última actualización del registro',
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_comment='Timestamp de creación del registro',
               existing_nullable=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.Boolean(),
               type_=sa.BOOLEAN(),
               existing_comment='Indica si el usuario está activo en el sistema',
               existing_nullable=False)
    op.alter_column('users', 'user_type',
               existing_type=sa.Enum('COMPRADOR', 'VENDEDOR', 'ADMIN', 'SUPERUSER', name='usertype'),
               type_=postgresql.ENUM('SUPERUSER', 'ADMIN', 'VENDEDOR', 'COMPRADOR', name='usertype'),
               existing_comment='Tipo de usuario: comprador o vendedor',
               existing_nullable=False)
    op.alter_column('users', 'apellido',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=100),
               existing_comment='Apellido del usuario',
               existing_nullable=True)
    op.alter_column('users', 'nombre',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=100),
               existing_comment='Nombre del usuario',
               existing_nullable=True)
    op.alter_column('users', 'password_hash',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=255),
               existing_comment='Hash bcrypt de la contraseña del usuario',
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=255),
               existing_comment='Email único del usuario, usado para login',
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.UUID(),
               existing_comment='Identificador único UUID del usuario',
               existing_nullable=False)
    op.drop_column('users', 'ciudad')
    op.drop_column('users', 'telefono')
    op.drop_column('users', 'cedula')
    op.create_table('test_simple_concrete_model',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False, comment='ID único del registro'),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Fecha de creación'),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Fecha de última actualización'),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Fecha de eliminación lógica (soft delete)'),
    sa.PrimaryKeyConstraint('id', name=op.f('test_simple_concrete_model_pkey'))
    )
    op.create_index(op.f('ix_test_simple_concrete_model_id'), 'test_simple_concrete_model', ['id'], unique=False)
    # ### end Alembic commands ###
