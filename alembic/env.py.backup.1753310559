import asyncio
from logging.config import fileConfig
import os

from sqlalchemy import engine_from_config, pool
from sqlalchemy.ext.asyncio import create_async_engine

from alembic import context

# Import settings for DATABASE_URL configuration
from app.core.config import settings

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# Importar Base con todos los modelos
from app.core.database import Base

# Agregar metadatos de todos los modelos
target_metadata = Base.metadata


def get_database_url():
    """
    Get DATABASE_URL for current environment.
    
    Priority:
    1. Environment variable DATABASE_URL
    2. Settings from Pydantic config
    """
    # Get environment
    environment = os.getenv('ENVIRONMENT', settings.ENVIRONMENT)
    
    # Use DATABASE_URL from environment or settings
    database_url = os.getenv('DATABASE_URL', settings.DATABASE_URL)
    
    print(f"ðŸ“‹ Using {environment} environment")
    print(f"ðŸ”— DATABASE_URL: {database_url[:50]}...")
    
    return database_url


def include_object(object, name, type_, reflected, compare_to):
    """Include/exclude objects from autogenerate."""
    # Skip alembic version table
    if type_ == "table" and name == "alembic_version":
        return False
    return True


def compare_type(context, inspected_column, metadata_column, inspected_type, metadata_type):
    """Compare types for autogenerate."""
    # Enable type comparison
    return True


def compare_server_default(context, inspected_column, metadata_column, inspected_default, metadata_default, rendered_metadata_default):
    """Compare server defaults for autogenerate."""
    # Enable server default comparison
    return True


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well. By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.
    """
    url = get_database_url()

    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        include_object=include_object,
        compare_type=compare_type,
        compare_server_default=compare_server_default,
    )

    with context.begin_transaction():
        context.run_migrations()


def do_run_migrations(connection) -> None:
    """Execute migrations with full configuration."""
    context.configure(
        connection=connection,
        target_metadata=target_metadata,
        include_object=include_object,
        compare_type=compare_type,
        compare_server_default=compare_server_default,
    )

    with context.begin_transaction():
        context.run_migrations()


async def run_async_migrations() -> None:
    """Run migrations in async mode with proper async engine."""
    url = get_database_url()
    
    # Get environment for pool configuration
    environment = os.getenv('ENVIRONMENT', settings.ENVIRONMENT)
    
    # Configure pool based on environment
    if environment == 'testing':
        poolclass = pool.NullPool
    elif environment == 'production':
        # Use AsyncAdaptedQueuePool for async production
        poolclass = pool.NullPool  # Safe for all async environments
    else:
        poolclass = pool.NullPool  # Default for development"
    
    connectable = create_async_engine(
        url,
        future=True,
        poolclass=poolclass,
    )

    try:
        async with connectable.connect() as connection:
            await connection.run_sync(do_run_migrations)
    finally:
        await connectable.dispose()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode."""
    asyncio.run(run_async_migrations())


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
