# ~/docker-compose.production.yml
# ---------------------------------------------------------------------------------------------
# MESTORE - Production Docker Compose Configuration
# Copyright (c) 2025 Jairo. Todos los derechos reservados.
# Licensed under the proprietary license detailed in a LICENSE file in the root of this project.
# ---------------------------------------------------------------------------------------------
#
# Nombre del Archivo: docker-compose.production.yml
# Ruta: ~/docker-compose.production.yml
# Autor: DevOps Integration AI
# Fecha de Creación: 2025-09-17
# Última Actualización: 2025-09-17
# Versión: 2.0.0
# Propósito: Orquestación de servicios para entorno de producción
#            Configuración optimizada para alta disponibilidad y seguridad
#
# Modificaciones:
# 2025-09-17 - Configuración production-ready con monitoring y seguridad
#
# ---------------------------------------------------------------------------------------------

version: '3.8'

# ===== SERVICIOS DE PRODUCCIÓN =====
services:
  # ===== MIGRATION SERVICE =====
  migrations:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: mestore_migrations_prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - RUN_MIGRATIONS=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/home/appuser/app/logs
      - ./alembic:/home/appuser/app/alembic:ro
    networks:
      - mestore_production
    profiles:
      - migration
    command: ["python", "-m", "alembic", "upgrade", "head"]
    restart: "no"

  # ===== BACKEND SERVICE =====
  backend:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: mestore_backend_prod
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - UVICORN_WORKERS=${UVICORN_WORKERS:-4}
      - UVICORN_LOG_LEVEL=${LOG_LEVEL:-info}
      - RUN_MIGRATIONS=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    volumes:
      - ./logs:/home/appuser/app/logs
      - ./uploads:/home/appuser/app/uploads
      - ./qr_codes:/home/appuser/app/qr_codes
    networks:
      - mestore_production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ===== FRONTEND SERVICE =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: mestore_frontend_prod
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - mestore_production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ===== DATABASE SERVICE =====
  postgres:
    image: postgres:15-alpine
    container_name: mestore_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # Security configurations
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-prod-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./postgres/postgresql.prod.conf:/etc/postgresql/postgresql.conf:ro
      - ./backups:/backups
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - mestore_production
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ===== REDIS SERVICE =====
  redis:
    image: redis:7-alpine
    container_name: mestore_redis_prod
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.prod.conf:/etc/redis/redis.conf:ro
    networks:
      - mestore_production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: ["redis-server", "/etc/redis/redis.conf"]
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'
        reservations:
          memory: 256M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ===== NGINX REVERSE PROXY =====
  nginx:
    image: nginx:stable-alpine
    container_name: mestore_nginx_prod
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - mestore_production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ===== MONITORING SERVICES =====

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: mestore_prometheus_prod
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - mestore_production
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mestore_grafana_prod
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mestore_production
    restart: unless-stopped
    profiles:
      - monitoring
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # ===== BACKUP SERVICE =====
  backup:
    build:
      context: ./scripts/backup
      dockerfile: Dockerfile
    container_name: mestore_backup_prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data:ro
    networks:
      - mestore_production
    restart: unless-stopped
    profiles:
      - backup
    depends_on:
      - postgres
    # Ejecutar backup cada 6 horas
    command: ["crond", "-f"]

# ===== VOLUMES =====
volumes:
  postgres_data:
    driver: local
    name: mestore_postgres_prod_data
    driver_opts:
      type: none
      o: bind
      device: /var/lib/mestore/postgres

  redis_data:
    driver: local
    name: mestore_redis_prod_data
    driver_opts:
      type: none
      o: bind
      device: /var/lib/mestore/redis

  prometheus_data:
    driver: local
    name: mestore_prometheus_prod_data

  grafana_data:
    driver: local
    name: mestore_grafana_prod_data

# ===== NETWORKS =====
networks:
  mestore_production:
    driver: bridge
    name: mestore_production_network
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"