# Ruta: MeStore/app/api/v1/endpoints/auth.py
"""
Endpoints de autenticaci√≥n JWT para la API v1.
Versi√≥n corregida sin conflictos entre AuthService.
"""

from typing import Any, Dict
from fastapi import APIRouter, Depends, HTTPException, status, Query
from fastapi import Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials

# IMPORTS INTEGRADOS - Usando IntegratedAuthService para seguridad mejorada
from app.core.integrated_auth import integrated_auth_service
from app.services.auth_service import AuthService  # Fallback legacy
from app.core.database import get_db
from sqlalchemy.ext.asyncio import AsyncSession
from app.models.user import User
from app.services.audit_logging_service import EnterpriseAuditLoggingService
from app.core.security import decode_access_token, decode_refresh_token, create_access_token, create_refresh_token
from app.core.id_validation import IDValidator, normalize_uuid_string
from app.schemas.auth import (
    PasswordResetRequest,
    PasswordResetConfirm,
    PasswordResetResponse,
    OTPSendRequest,
    OTPVerifyRequest,
    OTPResponse,
    UserVerificationStatus,
    LoginRequest,
    RegisterRequest,
    TokenResponse,
    RefreshTokenRequest,
    LogoutRequest,
    AuthResponse
)
from app.core.redis import RedisService, get_redis_service
from app.core.logger import get_logger

# Configurar router y logger
router = APIRouter()
logger = get_logger(__name__)
security = HTTPBearer()


# Funci√≥n auxiliar para get_current_user sin conflictos
async def get_current_user_clean(
    token: HTTPAuthorizationCredentials = Depends(HTTPBearer()),
    db: AsyncSession = Depends(get_db)
) -> User:
    """Obtener usuario actual sin conflictos de AuthService"""
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )

    try:
        # Use the centralized decode function for consistency
        payload = decode_access_token(token.credentials)
        if payload is None:
            logger.warning("Token validation failed - payload is None")
            raise credentials_exception

        user_id: str = payload.get("sub")
        if user_id is None:
            logger.warning("Token validation failed - missing sub claim")
            raise credentials_exception
    except Exception as e:
        logger.warning(f"Token decode error: {str(e)}")
        raise credentials_exception

    # Obtener usuario de la base de datos usando async session
    try:
        from sqlalchemy import select
        from app.models.user import UserType

        result = await db.execute(select(User).where(User.id == user_id))
        user = result.scalar_one_or_none()
        if user is None:
            raise credentials_exception

        # Fix user_type enum - handle both lowercase and uppercase values from database
        if hasattr(user, 'user_type') and isinstance(user.user_type, str):
            try:
                # First try direct conversion (for uppercase values)
                user.user_type = UserType(user.user_type)
                logger.debug(f"User type converted successfully: {user.user_type}")
            except ValueError:
                # Handle lowercase values from database - map to uppercase enum
                user_type_mapping = {
                    'buyer': UserType.BUYER,
                    'vendor': UserType.VENDOR,
                    'admin': UserType.ADMIN,
                    'superuser': UserType.SUPERUSER,
                    'system': UserType.SYSTEM
                }

                mapped_type = user_type_mapping.get(user.user_type.lower())
                if mapped_type:
                    user.user_type = mapped_type
                    logger.info(f"User type mapped from '{user.user_type}' to '{mapped_type}'")
                else:
                    # Set a default value if mapping fails
                    user.user_type = UserType.BUYER
                    logger.warning(f"Unknown user_type '{user.user_type}', defaulting to BUYER")

        return user
    except Exception as e:
        logger.error(f"Database error in get_current_user_clean: {str(e)}")
        raise credentials_exception


def get_auth_service():
    """Obtener servicio de autenticaci√≥n integrado con caracter√≠sticas de seguridad mejoradas."""
    return integrated_auth_service

def get_legacy_auth_service() -> AuthService:
    """Fallback al AuthService legacy si es necesario."""
    return AuthService()


@router.post("/login", response_model=TokenResponse, status_code=status.HTTP_200_OK)
async def login(
    login_data: LoginRequest,
    request: Request,
    db: AsyncSession = Depends(get_db)
) -> TokenResponse:
    """
    Endpoint de autenticaci√≥n con email y contrase√±a con seguridad mejorada.
    Incluye protecci√≥n contra ataques de fuerza bruta y logging de seguridad.
    """
    logger.info("Intento de login con seguridad integrada", email=login_data.email)
    auth_service = get_auth_service()

    # Extraer informaci√≥n de seguridad
    ip_address = request.client.host if request.client else None
    user_agent = request.headers.get("User-Agent", "Unknown")

    try:
        # Verificar protecci√≥n contra fuerza bruta
        if not await auth_service.check_brute_force_protection(login_data.email, ip_address):
            logger.warning("Login bloqueado por protecci√≥n de fuerza bruta",
                         login_data.email, ip=ip_address)
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail="Demasiados intentos fallidos. Cuenta temporalmente bloqueada."
            )

        # Validar credenciales usando IntegratedAuthService
        user = await auth_service.authenticate_user(db, 
            login_data.email,
            login_data.password,
            
            ip_address=ip_address,
            user_agent=user_agent
        )

        if not user:
            logger.warning("Login fallido - credenciales inv√°lidas",
                         login_data.email, ip=ip_address)
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Email o contrase√±a incorrectos",
                headers={"WWW-Authenticate": "Bearer"}
            )

        # Generar tokens JWT usando IntegratedAuthService con seguridad mejorada
        access_token, refresh_token = await auth_service.create_user_session(
            user=user,
            ip_address=ip_address,
            user_agent=user_agent
        )

        # Ensure consistent ID format in token
        normalized_id = normalize_uuid_string(user.id)

        logger.info("Login exitoso con sesi√≥n segura",
                   user_id=normalized_id, email=user.email,
                   user_type=user.user_type.value, ip=ip_address)

        return TokenResponse(
            access_token=access_token,
            refresh_token=refresh_token,
            token_type="bearer",
            expires_in=3600,
            user={
                "id": normalized_id,
                "email": user.email,
                "user_type": user.user_type.value,
                "nombre": getattr(user, 'nombre', None),
                "is_active": getattr(user, 'is_active', True),
                "is_verified": getattr(user, 'is_verified', False)
            }
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error("Error interno en login", error=str(e), email=login_data.email)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error interno del servidor"
        )


@router.post("/admin-login", response_model=TokenResponse, status_code=status.HTTP_200_OK)
async def admin_login(
    login_data: LoginRequest,
    request: Request,
    db: AsyncSession = Depends(get_db)
) -> TokenResponse:
    """
    Endpoint de autenticaci√≥n administrativo con verificaci√≥n de privilegios.
    Solo permite login a usuarios ADMIN y SUPERUSER.
    """
    logger.info("Intento de login administrativo", email=login_data.email)
    auth_service = get_auth_service()

    # Extraer informaci√≥n de seguridad
    ip_address = request.client.host if request.client else None
    user_agent = request.headers.get("User-Agent", "Unknown")

    try:
        # Verificar protecci√≥n contra fuerza bruta
        if not await auth_service.check_brute_force_protection(login_data.email, ip_address):
            logger.warning("Admin login bloqueado por protecci√≥n de fuerza bruta",
                         login_data.email, ip=ip_address)
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail="Demasiados intentos fallidos. Cuenta temporalmente bloqueada."
            )

        # Validar credenciales usando IntegratedAuthService
        user = await auth_service.authenticate_user(db, 
            login_data.email,
            login_data.password,
            
            ip_address=ip_address,
            user_agent=user_agent
        )

        if not user:
            logger.warning("Admin login fallido - credenciales inv√°lidas",
                         login_data.email, ip=ip_address)
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Email o contrase√±a incorrectos",
                headers={"WWW-Authenticate": "Bearer"}
            )

        # üõ°Ô∏è VERIFICACI√ìN CR√çTICA DE PRIVILEGIOS ADMINISTRATIVOS - NO MODIFICAR SIN AUTORIZACI√ìN
        # Esta validaci√≥n garantiza que solo admin@mestocker.com y otros ADMIN/SUPERUSER puedan acceder
        # CUALQUIER MODIFICACI√ìN DEBE SER APROBADA POR EL USUARIO PRINCIPAL
        from app.models.user import UserType
        if user.user_type not in [UserType.ADMIN, UserType.SUPERUSER]:
            logger.warning("Acceso administrativo denegado - privilegios insuficientes",
                         login_data.email, user_type=user.user_type.value, ip=ip_address)
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Privilegios administrativos requeridos"
            )

        # Generar tokens JWT usando IntegratedAuthService con seguridad mejorada
        access_token, refresh_token = await auth_service.create_user_session(
            user=user,
            ip_address=ip_address,
            user_agent=user_agent
        )

        # Ensure consistent ID format in token
        normalized_id = normalize_uuid_string(user.id)

        logger.info("Admin login exitoso",
                   user_id=normalized_id, email=user.email,
                   user_type=user.user_type.value, ip=ip_address)

        return TokenResponse(
            access_token=access_token,
            refresh_token=refresh_token,
            token_type="bearer",
            expires_in=3600,
            user={
                "id": normalized_id,
                "email": user.email,
                "user_type": user.user_type.value,
                "nombre": getattr(user, 'nombre', None),
                "is_active": getattr(user, 'is_active', True),
                "is_verified": getattr(user, 'is_verified', False)
            }
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error("Error interno en admin login: %s - email: %s", str(e), login_data.email)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error interno del servidor"
        )



@router.get("/me", response_model=dict, status_code=status.HTTP_200_OK)
async def get_current_user_info(
    current_user: User = Depends(get_current_user_clean)
) -> Dict[str, Any]:
    """
    Obtener informaci√≥n del usuario actual autenticado.
    """
    try:
        # DEBUG: Log user info to debug null ID issue
        logger.debug(f"get_current_user_info DEBUG: current_user.id = {current_user.id}")
        logger.debug(f"get_current_user_info DEBUG: current_user.email = {current_user.email}")

        # TEMPORARY FIX: Handle null ID gracefully
        user_id = normalize_uuid_string(current_user.id)
        if user_id is None:
            logger.warning(f"User {current_user.email} has null ID, using email as fallback")
            user_id = current_user.email

        return {
            "id": user_id,
            "email": current_user.email,
            "nombre": getattr(current_user, 'nombre', current_user.email.split('@')[0]),
            "user_type": current_user.user_type.value if hasattr(current_user.user_type, 'value') else str(current_user.user_type),
            "email_verified": getattr(current_user, 'email_verified', False),
            "phone_verified": getattr(current_user, 'phone_verified', False),
            "is_active": getattr(current_user, 'is_active', True)
        }
        
    except Exception as e:
        logger.error(f"Error en get_current_user_info: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error al obtener informaci√≥n del usuario"
        )


# Endpoints adicionales simplificados para funcionalidad b√°sica
@router.post("/register", response_model=TokenResponse, status_code=status.HTTP_201_CREATED)
async def register(
    user_data: RegisterRequest,
    db: AsyncSession = Depends(get_db)
) -> TokenResponse:
    """Registrar nuevo usuario con tipo espec√≠fico."""
    logger.info(f"üîÑ Register attempt with data: {user_data.dict()}")
    auth_service = get_auth_service()

    try:
        # Crear nuevo usuario con datos adicionales
        new_user = await auth_service.create_user(
            
            email=user_data.email,
            password=user_data.password,
            user_type=user_data.user_type.value if user_data.user_type else "BUYER",
            nombre=user_data.nombre,
            telefono=user_data.telefono
        )
        
        # Generar tokens para el nuevo usuario with consistent ID format
        normalized_id = normalize_uuid_string(new_user.id)
        token_data = {
            "sub": normalized_id,
            "user_id": normalized_id,
            "user_type": new_user.user_type.value,
            "email": new_user.email
        }
        access_token = create_access_token(data=token_data)
        refresh_token = create_refresh_token(data={"sub": normalized_id})

        return TokenResponse(
            access_token=access_token,
            refresh_token=refresh_token,
            token_type="bearer",
            expires_in=3600
        )
        
    except ValueError as e:
        error_message = str(e)
        if "already exists" in error_message:
            logger.warning(f"Duplicate email registration attempt: {user_data.email}")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="El correo electr√≥nico ya est√° registrado. Por favor usa otro correo o inicia sesi√≥n."
            )
        else:
            logger.error(f"Validation error en register: {error_message}")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Datos de registro inv√°lidos"
            )
    except Exception as e:
        logger.error(f"Error interno en register: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error interno del servidor"
        )


@router.post("/forgot-password", response_model=PasswordResetResponse, status_code=status.HTTP_200_OK)
async def forgot_password(
    request: PasswordResetRequest,
    db: AsyncSession = Depends(get_db)
):
    """Solicita recuperaci√≥n de contrase√±a por email."""
    auth_service = get_auth_service()
    
    try:
        success, message = await auth_service.send_password_reset_email(
            
            email=request.email
        )
        
        return PasswordResetResponse(
            success=True,
            message="Si el email existe, recibir√°s instrucciones de recuperaci√≥n"
        )

    except Exception as e:
        logger.error(f"Error en forgot_password: {str(e)}")
        return PasswordResetResponse(
            success=True,
            message="Si el email existe, recibir√°s instrucciones de recuperaci√≥n"
        )


@router.post("/reset-password", response_model=PasswordResetResponse, status_code=status.HTTP_200_OK)
async def reset_password(
    request: PasswordResetConfirm,
    db: AsyncSession = Depends(get_db)
):
    """Confirma reset de contrase√±a con token."""
    auth_service = get_auth_service()
    
    try:
        if request.new_password != request.confirm_password:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Las contrase√±as no coinciden"
            )

        success, message = await auth_service.reset_password_with_token(
            
            token=request.token,
            new_password=request.new_password
        )

        if success:
            return PasswordResetResponse(success=True, message=message)
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=message
            )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error en reset_password: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error interno del servidor"
        )


# ===== OTP/SMS VERIFICATION ENDPOINTS =====

@router.post("/send-verification-email", response_model=OTPResponse, status_code=status.HTTP_200_OK)
async def send_verification_email(
    request: OTPSendRequest,
    current_user: User = Depends(get_current_user_clean),
    db: AsyncSession = Depends(get_db),
    auth_service: AuthService = Depends(lambda: AuthService())
) -> OTPResponse:
    """
    Env√≠a c√≥digo OTP por email para verificaci√≥n.

    - **otp_type**: Debe ser "EMAIL" para este endpoint
    - Requiere autenticaci√≥n JWT
    - El usuario debe tener email registrado
    - Respeta cooldown de 1 minuto entre env√≠os
    """
    try:
        # Validar que el tipo sea EMAIL
        if request.otp_type != "EMAIL":
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Este endpoint solo acepta otp_type: EMAIL"
            )

        # Verificar que no est√© ya verificado
        if current_user.email_verified:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Email ya est√° verificado"
            )

        # Enviar OTP por email
        success, message = await auth_service.send_email_verification_otp(db, current_user)

        if success:
            verification_status = await auth_service.get_user_verification_status(current_user)
            return OTPResponse(
                success=True,
                message=message,
                verification_status=verification_status
            )
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=message
            )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error en send_verification_email: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error interno del servidor"
        )


@router.post("/send-verification-sms", response_model=OTPResponse, status_code=status.HTTP_200_OK)
async def send_verification_sms(
    request: OTPSendRequest,
    current_user: User = Depends(get_current_user_clean),
    db: AsyncSession = Depends(get_db),
    auth_service: AuthService = Depends(lambda: AuthService())
) -> OTPResponse:
    """
    Env√≠a c√≥digo OTP por SMS para verificaci√≥n.

    - **otp_type**: Debe ser "SMS" para este endpoint
    - Requiere autenticaci√≥n JWT
    - El usuario debe tener tel√©fono registrado
    - Respeta cooldown de 1 minuto entre env√≠os
    - Rate limiting: 5 SMS por hora por n√∫mero
    """
    try:
        # Validar que el tipo sea SMS
        if request.otp_type != "SMS":
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Este endpoint solo acepta otp_type: SMS"
            )

        # Verificar que tiene tel√©fono
        if not current_user.telefono:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Usuario no tiene tel√©fono registrado"
            )

        # Verificar que no est√© ya verificado
        if current_user.phone_verified:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Tel√©fono ya est√° verificado"
            )

        # Enviar OTP por SMS
        success, message = await auth_service.send_sms_verification_otp(db, current_user)

        if success:
            verification_status = await auth_service.get_user_verification_status(current_user)
            return OTPResponse(
                success=True,
                message=message,
                verification_status=verification_status
            )
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=message
            )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error en send_verification_sms: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error interno del servidor"
        )


@router.post("/verify-email-otp", response_model=OTPResponse, status_code=status.HTTP_200_OK)
async def verify_email_otp(
    request: OTPVerifyRequest,
    current_user: User = Depends(get_current_user_clean),
    db: AsyncSession = Depends(get_db),
    auth_service: AuthService = Depends(lambda: AuthService())
) -> OTPResponse:
    """
    Verifica c√≥digo OTP de email.

    - **otp_code**: C√≥digo de 6 d√≠gitos recibido por email
    - Requiere autenticaci√≥n JWT
    - M√°ximo 5 intentos por c√≥digo
    - Al verificar exitosamente, marca email_verified=True
    """
    try:
        # Verificar que tenga OTP activo de tipo EMAIL
        if not current_user.otp_secret or current_user.otp_type != "EMAIL":
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="No hay c√≥digo OTP de email activo"
            )

        # TESTING BYPASS: Permitir c√≥digo especial para pruebas (funciona con cualquier email en desarrollo)
        testing_bypass_code = "123456"
        from app.core.config import settings
        is_development = settings.ENVIRONMENT.lower() in ["development", "dev", "testing"]
        is_test_email = current_user.email.endswith((".test.com", ".testing.com", ".dev.com", ".example.com"))
        is_real_email = current_user.email.endswith((".gmail.com", ".outlook.com", ".hotmail.com", ".yahoo.com", ".icloud.com"))

        if request.otp_code == testing_bypass_code and (is_test_email or (is_development and is_real_email)):
            logger.info(f"Email OTP testing bypass usado por usuario: {current_user.email}")
            success, message = True, "C√≥digo OTP verificado exitosamente (testing bypass)"
            # Mark email as verified
            current_user.email_verified = True
            current_user.otp_secret = None
            current_user.otp_expires_at = None
            current_user.otp_attempts = 0
            current_user.otp_type = None
            await db.commit()
        else:
            # Verificar c√≥digo OTP normal
            success, message = await auth_service.verify_otp_code(db, current_user, request.otp_code)

        if success:
            verification_status = await auth_service.get_user_verification_status(current_user)
            return OTPResponse(
                success=True,
                message=message,
                verification_status=verification_status
            )
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=message
            )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error en verify_email_otp: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error interno del servidor"
        )


@router.post("/verify-phone-otp", response_model=OTPResponse, status_code=status.HTTP_200_OK)
async def verify_phone_otp(
    request: OTPVerifyRequest,
    current_user: User = Depends(get_current_user_clean),
    db: AsyncSession = Depends(get_db),
    auth_service: AuthService = Depends(lambda: AuthService())
) -> OTPResponse:
    """
    Verifica c√≥digo OTP de SMS.

    - **otp_code**: C√≥digo de 6 d√≠gitos recibido por SMS
    - Requiere autenticaci√≥n JWT
    - M√°ximo 5 intentos por c√≥digo
    - Al verificar exitosamente, marca phone_verified=True
    """
    try:
        # Verificar que tenga OTP activo de tipo SMS
        if not current_user.otp_secret or current_user.otp_type != "SMS":
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="No hay c√≥digo OTP de SMS activo"
            )

        # TESTING BYPASS: Permitir c√≥digo especial para pruebas (funciona con cualquier email en desarrollo)
        testing_bypass_code = "123456"
        from app.core.config import settings
        is_development = settings.ENVIRONMENT.lower() in ["development", "dev", "testing"]
        is_test_email = current_user.email.endswith((".test.com", ".testing.com", ".dev.com", ".example.com"))
        is_real_email = current_user.email.endswith((".gmail.com", ".outlook.com", ".hotmail.com", ".yahoo.com", ".icloud.com"))

        if request.otp_code == testing_bypass_code and (is_test_email or (is_development and is_real_email)):
            logger.info(f"SMS OTP testing bypass usado por usuario: {current_user.email}")
            success, message = True, "C√≥digo OTP verificado exitosamente (testing bypass)"
            # Mark phone as verified
            current_user.phone_verified = True
            current_user.otp_secret = None
            current_user.otp_expires_at = None
            current_user.otp_attempts = 0
            current_user.otp_type = None
            await db.commit()
        else:
            # Verificar c√≥digo OTP normal
            success, message = await auth_service.verify_otp_code(db, current_user, request.otp_code)

        if success:
            verification_status = await auth_service.get_user_verification_status(current_user)
            return OTPResponse(
                success=True,
                message=message,
                verification_status=verification_status
            )
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=message
            )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error en verify_phone_otp: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error interno del servidor"
        )


@router.post("/refresh-token", response_model=TokenResponse, status_code=status.HTTP_200_OK)
async def refresh_token(
    request: RefreshTokenRequest,
    db: AsyncSession = Depends(get_db)
) -> TokenResponse:
    """Refrescar access token usando refresh token."""
    try:
        # Decodificar refresh token
        payload = decode_refresh_token(request.refresh_token)
        
        if payload is None:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token inv√°lido"
            )
            
        user_id = payload.get("sub")
        
        if not user_id:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token inv√°lido"
            )
        
        # Verificar usuario existe usando async session
        from sqlalchemy import select
        result = await db.execute(select(User).where(User.id == user_id))
        user = result.scalar_one_or_none()
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Usuario no encontrado"
            )
        
        # Generar nuevos tokens with consistent ID format
        normalized_id = normalize_uuid_string(user.id)
        access_token = create_access_token(data={"sub": normalized_id})
        new_refresh_token = create_refresh_token(data={"sub": normalized_id})
        
        return TokenResponse(
            access_token=access_token,
            refresh_token=new_refresh_token,
            token_type="bearer",
            expires_in=3600
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error en refresh_token: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token inv√°lido"
        )


@router.post("/logout", response_model=AuthResponse, status_code=status.HTTP_200_OK)
async def logout(
    current_user: User = Depends(get_current_user_clean)
) -> AuthResponse:
    """
    Endpoint para logout/cierre de sesi√≥n.
    """
    try:
        logger.info("Logout exitoso", user_id=normalize_uuid_string(current_user.id), email=current_user.email)
        
        return AuthResponse(
            success=True,
            message="Sesi√≥n cerrada exitosamente"
        )
        
    except Exception as e:
        logger.error(f"Error en logout: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error interno del servidor"
        )