import React, { useState, useMemo } from 'react';
import { useStockAlerts } from '../../hooks/useStockAlerts';
import { useQualityAlerts } from '../../hooks/useQualityAlerts';
import { AlertsPanelProps, AlertsPanelAlert, AlertsFilter, AlertType, AlertSeverity, AlertCategory } from '../../types/alerts.types';
import { Bell, Package, RefreshCw } from 'lucide-react';

const AlertsPanel: React.FC<AlertsPanelProps> = ({
  className = '',
  maxAlerts = 50,
  onAlertClick
}) => {
  const [isLoading, setIsLoading] = useState(false);
  
  // Filtros básicos
  const [filters, setFilters] = useState<AlertsFilter>({
    types: [AlertType.STOCK, AlertType.QUALITY],
    severities: [AlertSeverity.HIGH, AlertSeverity.CRITICAL, AlertSeverity.MEDIUM],
    categories: Object.values(AlertCategory),
    showRead: false,
    showUnread: true
  });

  // Hooks especializados
  const { stockAlerts, markStockAlertAsRead, refreshStockAlerts } = useStockAlerts();
  const { qualityAlerts, markQualityAlertAsRead } = useQualityAlerts();

  // Combinar alertas
  const allAlerts: AlertsPanelAlert[] = [...stockAlerts, ...qualityAlerts];

  // Función de refresh
  const refreshAlerts = () => {
    setIsLoading(true);
    try {
      refreshStockAlerts();
    } catch (error) {
      console.error('Error refreshing alerts:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Filtrar alertas
  const filteredAlerts = useMemo(() => {
    return allAlerts
      .filter(alert => filters.types.includes(alert.type))
      .filter(alert => filters.severities.includes(alert.severity))
      .filter(alert => filters.categories.includes(alert.category))
      .slice(0, maxAlerts);
  }, [allAlerts, filters, maxAlerts]);

  // Marcar como leída
  const markAsRead = (alertId: string) => {
    if (alertId.includes('stock-')) {
      markStockAlertAsRead(alertId);
    } else if (alertId.includes('quality-')) {
      markQualityAlertAsRead(alertId);
    }
  };

  // Handle click
  const handleAlertClick = (alert: AlertsPanelAlert) => {
    markAsRead(alert.id);
    onAlertClick?.(alert);
  };

  // Clase CSS dinámica simple
  const getAlertClasses = (alert: AlertsPanelAlert) => {
    let classes = 'p-4 rounded-lg border-l-4 cursor-pointer transition-all hover:shadow-md ';
    
    if (alert.severity === AlertSeverity.CRITICAL) {
      classes += 'border-l-red-500 bg-red-50 ';
    } else if (alert.severity === AlertSeverity.HIGH) {
      classes += 'border-l-orange-500 bg-orange-50 ';
    } else if (alert.severity === AlertSeverity.MEDIUM) {
      classes += 'border-l-yellow-500 bg-yellow-50 ';
    } else {
      classes += 'border-l-blue-500 bg-blue-50 ';
    }
    
    
    return classes;
  };

  // Render del contenido de alerta
  const renderAlertContent = (alert: AlertsPanelAlert) => {
    if (alert.type === AlertType.STOCK) {
      const stockAlert = alert as any;
      if (alert.category === AlertCategory.OUT_OF_STOCK) {
        return ;
      } else {
        return ;
      }
    } else if (alert.type === AlertType.QUALITY) {
      const qualityAlert = alert as any;
      return qualityAlert.issueDescription;
    }
    return '';
  };

  return (
    <div className={'bg-white rounded-lg shadow-sm border p-6 ' + className}>
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          <Bell className="h-6 w-6 text-blue-600" />
          <h2 className="text-lg font-semibold text-gray-900">
            Alertas del Sistema
          </h2>
          <span className="bg-red-100 text-red-800 px-2 py-1 rounded-full text-sm font-medium">
          </span>
          
            <button
              onClick={() => {
                filteredAlerts.forEach(alert => {
                    markAsRead(alert.id);
                  }
                });
              }}
              className="text-xs text-blue-600 hover:text-blue-800 underline"
            >
              Marcar todas como leídas
            </button>
          )}
        </div>
        
        <button
          onClick={refreshAlerts}
          disabled={isLoading}
          className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50"
          title="Actualizar alertas"
        >
          <RefreshCw className={isLoading ? 'h-4 w-4 animate-spin' : 'h-4 w-4'} />
        </button>
      </div>

      {/* Loading state */}
      {isLoading && (
        <div className="flex items-center justify-center py-8">
          <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
          <span className="ml-2 text-sm text-gray-500">Cargando alertas...</span>
        </div>
      )}

      {/* Empty state */}
        <div className="text-center py-8">
          <Bell className="h-12 w-12 text-gray-300 mx-auto mb-4" />
          <h3 className="text-sm font-medium text-gray-900 mb-2">No hay alertas</h3>
          <p className="text-sm text-gray-500">
            No se encontraron alertas que coincidan con los filtros aplicados.
          </p>
        </div>
      )}

      {/* Lista de alertas */}
        <div className="space-y-3">
          {filteredAlerts.map((alert) => (
            <div
              key={alert.id}
              onClick={() => handleAlertClick(alert)}
              className={getAlertClasses(alert)}
            >
              <div className="flex items-start gap-3">
                <div className="flex-shrink-0">
                  <Package className="h-5 w-5 text-gray-600" />
                </div>
                
                <div className="flex-1 min-w-0">
                  <h4 className="text-sm font-medium text-gray-900 truncate">
                    {alert.productName}
                  </h4>
                  
                  <p className="text-sm text-gray-600 mt-1">
                    {renderAlertContent(alert)}
                  </p>
                  
                  <div className="flex items-center gap-4 mt-2 text-xs text-gray-500">
                    <span>{alert.timestamp.toLocaleTimeString()}</span>
                    {alert.actionRequired && (
                      <span className="px-2 py-1 bg-red-100 text-red-700 rounded-full font-medium">
                        Acción requerida
                      </span>
                    )}
                    
                    {/* Acciones rápidas */}
                    <div className="flex gap-1">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          console.log('Ver producto:', alert.productId);
                        }}
                        className="px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition-colors"
                      >
                        Ver producto
                      </button>
                      
                      {alert.type === AlertType.STOCK && (
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            console.log('Ajustar stock:', alert.productId);
                          }}
                          className="px-2 py-1 text-xs bg-green-100 text-green-700 rounded hover:bg-green-200 transition-colors"
                        >
                          Ajustar stock
                        </button>
                      )}
                    </div>
                  </div>
                </div>
                
                  <div className="flex-shrink-0">
                    <div className="h-2 w-2 bg-blue-600 rounded-full"></div>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Footer */}
      <div className="mt-6 pt-4 border-t border-gray-200">
        <p className="text-xs text-gray-500 text-center">
          Última actualización: {new Date().toLocaleString()}
        </p>
      </div>
    </div>
  );
};

export default AlertsPanel;