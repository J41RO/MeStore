import React, { useState, useMemo } from 'react';
import { useStockAlerts } from '../../hooks/useStockAlerts';
import { useQualityAlerts } from '../../hooks/useQualityAlerts';
import { AlertsPanelProps, AlertsPanelAlert, AlertsFilter, AlertType, AlertSeverity, AlertCategory } from '../../types/alerts.types';
import { Bell, Package, RefreshCw } from 'lucide-react';

const AlertsPanel: React.FC<AlertsPanelProps> = ({
  className = '',
  maxAlerts = 50,
  onAlertClick
}) => {
  const [isLoading, setIsLoading] = useState(false);
  
  const [filters] = useState<AlertsFilter>({
    types: [AlertType.STOCK, AlertType.QUALITY],
    severities: [AlertSeverity.HIGH, AlertSeverity.CRITICAL, AlertSeverity.MEDIUM],
    categories: Object.values(AlertCategory),
    showRead: false,
    showUnread: true
  });

  const { stockAlerts, markStockAlertAsRead, refreshStockAlerts } = useStockAlerts();
  const { qualityAlerts, markQualityAlertAsRead } = useQualityAlerts();

  const allAlerts: AlertsPanelAlert[] = [...stockAlerts, ...qualityAlerts];

  const refreshAlerts = () => {
    setIsLoading(true);
    try {
      refreshStockAlerts();
    } catch (error) {
      console.error('Error refreshing alerts:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const filteredAlerts = useMemo(() => {
    return allAlerts
      .filter(alert => filters.types.includes(alert.type))
      .filter(alert => filters.severities.includes(alert.severity))
      .filter(alert => filters.categories.includes(alert.category))
      .slice(0, maxAlerts);
  }, [allAlerts, filters, maxAlerts]);

  const markAsRead = (alertId: string) => {
    if (alertId.includes('stock-')) {
      markStockAlertAsRead(alertId);
    } else if (alertId.includes('quality-')) {
      markQualityAlertAsRead(alertId);
    }
  };

  const handleAlertClick = (alert: AlertsPanelAlert) => {
    markAsRead(alert.id);
    onAlertClick?.(alert);
  };

  const getAlertClasses = (alert: AlertsPanelAlert) => {
    let classes = 'p-4 rounded-lg border-l-4 cursor-pointer transition-all hover:shadow-md ';
    
    if (alert.severity === AlertSeverity.CRITICAL) {
      classes += 'border-l-red-500 bg-red-50 ';
    } else if (alert.severity === AlertSeverity.HIGH) {
      classes += 'border-l-orange-500 bg-orange-50 ';
    } else if (alert.severity === AlertSeverity.MEDIUM) {
      classes += 'border-l-yellow-500 bg-yellow-50 ';
    } else {
      classes += 'border-l-blue-500 bg-blue-50 ';
    }
    
    return classes;
  };

  const renderAlertContent = (alert: AlertsPanelAlert) => {
    if (alert.type === AlertType.STOCK) {
      const stockAlert = alert as any;
      if (alert.category === AlertCategory.OUT_OF_STOCK) {
        return 'Stock agotado - Ubicación: ' + stockAlert.location;
      } else {
        return 'Stock bajo: ' + stockAlert.currentStock + '/' + stockAlert.minStock + ' - ' + stockAlert.location;
      }
    } else if (alert.type === AlertType.QUALITY) {
      const qualityAlert = alert as any;
      return qualityAlert.issueDescription;
    }
    return '';
  };

  return React.createElement('div', 
    { className: 'bg-white rounded-lg shadow-sm border p-6 ' + className },
    React.createElement('div', 
      { className: 'flex items-center justify-between mb-6' },
      React.createElement('div', 
        { className: 'flex items-center gap-3' },
        React.createElement(Bell, { className: 'h-6 w-6 text-blue-600' }),
        React.createElement('h2', 
          { className: 'text-lg font-semibold text-gray-900' },
          'Alertas del Sistema'
        ),
        React.createElement('span', 
          { className: 'bg-red-100 text-red-800 px-2 py-1 rounded-full text-sm font-medium' },
        )
      ),
      React.createElement('button', {
        onClick: refreshAlerts,
        disabled: isLoading,
        className: 'p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50',
        title: 'Actualizar alertas'
      },
        React.createElement(RefreshCw, { 
          className: isLoading ? 'h-4 w-4 animate-spin' : 'h-4 w-4' 
        })
      )
    ),
    
    isLoading ? React.createElement('div', 
      { className: 'flex items-center justify-center py-8' },
      React.createElement('div', { className: 'animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600' }),
      React.createElement('span', { className: 'ml-2 text-sm text-gray-500' }, 'Cargando alertas...')
    ) : null,
    
      { className: 'text-center py-8' },
      React.createElement(Bell, { className: 'h-12 w-12 text-gray-300 mx-auto mb-4' }),
      React.createElement('h3', { className: 'text-sm font-medium text-gray-900 mb-2' }, 'No hay alertas'),
      React.createElement('p', { className: 'text-sm text-gray-500' }, 
        'No se encontraron alertas que coincidan con los filtros aplicados.'
      )
    ) : null,
    
      { className: 'space-y-3' },
      filteredAlerts.map((alert) => 
        React.createElement('div', {
          key: alert.id,
          onClick: () => handleAlertClick(alert),
          className: getAlertClasses(alert)
        },
          React.createElement('div', { className: 'flex items-start gap-3' },
            React.createElement('div', { className: 'flex-shrink-0' },
              React.createElement(Package, { className: 'h-5 w-5 text-gray-600' })
            ),
            React.createElement('div', { className: 'flex-1 min-w-0' },
              React.createElement('h4', { className: 'text-sm font-medium text-gray-900 truncate' }, 
                alert.productName
              ),
              React.createElement('p', { className: 'text-sm text-gray-600 mt-1' }, 
                renderAlertContent(alert)
              ),
              React.createElement('div', { className: 'flex items-center gap-4 mt-2 text-xs text-gray-500' },
                React.createElement('span', {}, alert.timestamp.toLocaleTimeString()),
                alert.actionRequired ? React.createElement('span', { 
                  className: 'px-2 py-1 bg-red-100 text-red-700 rounded-full font-medium' 
                }, 'Acción requerida') : null
              )
            ),
              React.createElement('div', { className: 'h-2 w-2 bg-blue-600 rounded-full' })
            ) : null
          )
        )
      )
    ) : null,
    
    React.createElement('div', { className: 'mt-6 pt-4 border-t border-gray-200' },
      React.createElement('p', { className: 'text-xs text-gray-500 text-center' },
        'Última actualización: ' + new Date().toLocaleString()
      )
    )
  );
};

export default AlertsPanel;