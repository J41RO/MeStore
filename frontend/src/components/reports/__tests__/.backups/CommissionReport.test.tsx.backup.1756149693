import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import CommissionReport from '../CommissionReport';

// Mock del hook useCommissions
jest.mock('../../../hooks/useCommissions', () => ({
  useCommissions: jest.fn(() => ({
    commissions: [
      {
        id: 'comm-001',
        productName: 'Test Product',
        productCategory: 'Test Category',
        saleAmount: 1000,
        commissionAmount: 80,
        commissionRate: 0.08,
        status: 'confirmed',
        orderId: 'order-001',
        customerName: 'Test Customer',
        saleDate: new Date('2025-08-01')
      }
    ],
    breakdown: {
      byProduct: [],
      byPeriod: [],
      byType: [],
      byCategory: {},
      totals: {
        totalCommissions: 80,
        totalSales: 1000,
        commissionCount: 1,
        averageCommissionRate: 0.08,
        topProduct: 'Test Product',
        topCategory: 'Test Category'
      }
    },
    isLoading: false,
    error: null,
    totalCommissions: 80,
    totalSales: 1000,
    updateFilters: jest.fn(),
    clearFilters: jest.fn(),
    refreshCommissions: jest.fn()
  }))
}));

describe('CommissionReport', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders commission report header', () => {
    render(<CommissionReport />);
    
    expect(screen.getByText('Reporte de Comisiones')).toBeInTheDocument();
    expect(screen.getByText('Análisis detallado de tus comisiones')).toBeInTheDocument();
  });

  test('displays correct statistics', () => {
    render(<CommissionReport />);
    
    expect(screen.getByText('Total Comisiones')).toBeInTheDocument();
    expect(screen.getAllByText('$80.00')).toHaveLength(2); // Aparece en stats y lista
    expect(screen.getByText('$1000.00')).toBeInTheDocument(); // Total ventas
    expect(screen.getByText('1')).toBeInTheDocument(); // Número de comisiones
  });

  test('renders navigation tabs', () => {
    render(<CommissionReport />);
    
    expect(screen.getByText('Resumen')).toBeInTheDocument();
    expect(screen.getByText('Detalle')).toBeInTheDocument();
    expect(screen.getByText('Gráficos')).toBeInTheDocument();
  });

  test('switches between tabs correctly', () => {
    render(<CommissionReport />);
    
    // Initially on summary tab
    expect(screen.getByText('Resumen de Comisiones')).toBeInTheDocument();
    
    // Click on table tab
    fireEvent.click(screen.getByText('Detalle'));
    expect(screen.getByText('Detalle de Comisiones')).toBeInTheDocument();
    
    // Click on charts tab
    fireEvent.click(screen.getByText('Gráficos'));
    expect(screen.getByText('Gráficos y Análisis')).toBeInTheDocument();
  });

  test('displays commission data in summary view', () => {
    render(<CommissionReport />);
    
    expect(screen.getByText('Test Product')).toBeInTheDocument();
    expect(screen.getByText('Test Category')).toBeInTheDocument();
    expect(screen.getByText(/order-001/)).toBeInTheDocument();
    expect(screen.getByText('confirmed')).toBeInTheDocument();
  });

  test('handles export button click', () => {
    const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
    render(<CommissionReport />);
    
    const exportButton = screen.getByText('Exportar');
    fireEvent.click(exportButton);
    
    expect(consoleSpy).toHaveBeenCalledWith('Exportando reporte de comisiones...');
    consoleSpy.mockRestore();
  });

  test('shows loading state', () => {
    const { useCommissions } = require('../../../hooks/useCommissions');
    useCommissions.mockReturnValue({
      ...useCommissions(),
      isLoading: true
    });

    render(<CommissionReport />);
    
    expect(screen.getByRole('generic')).toHaveClass('animate-pulse');
  });

  test('applies custom className', () => {
    const { container } = render(<CommissionReport className="custom-class" />);
    
    expect(container.firstChild).toHaveClass('custom-class');
  });

  test('uses default filters', () => {
    const defaultFilters = { searchTerm: 'test' };
    render(<CommissionReport defaultFilters={defaultFilters} />);
    
    const { useCommissions } = require('../../../hooks/useCommissions');
    expect(useCommissions).toHaveBeenCalledWith(defaultFilters);
  });
});