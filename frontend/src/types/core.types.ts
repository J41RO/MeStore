/**
 * Core TypeScript types for MeStore Frontend
 * Establishes consistent ID types and base interfaces to match backend API
 *
 * Backend uses UUID strings (String(36)) for all entity IDs
 * Frontend must match this pattern for API compatibility
 */

// ========================================
// CORE ID TYPES
// ========================================

/**
 * EntityId - Primary identifier type for all entities
 * Matches backend BaseModel.id field (String(36) UUID)
 */
export type EntityId = string;

/**
 * Timestamp type for consistent datetime handling
 * Matches backend DateTime fields (ISO string format)
 */
export type Timestamp = string;

// ========================================
// BASE ENTITY INTERFACES
// ========================================

/**
 * BaseEntity - Common fields inherited by all entities
 * Matches backend BaseModel structure exactly
 */
export interface BaseEntity {
  id: EntityId;
  created_at: Timestamp;
  updated_at: Timestamp;
  deleted_at?: Timestamp | null;
}

/**
 * CreateEntityRequest - Base for entity creation requests
 * Excludes fields that are auto-generated by backend
 */
export interface CreateEntityRequest {
  // ID and timestamps are auto-generated by backend
  // Extending interfaces will add their specific fields
}

/**
 * UpdateEntityRequest - Base for entity update requests
 * Includes ID for identification, excludes auto-managed timestamps
 */
export interface UpdateEntityRequest {
  id: EntityId;
  // updated_at is auto-managed by backend
  // Extending interfaces will add their specific updatable fields
}

// ========================================
// API RESPONSE TYPES
// ========================================

/**
 * StandardResponse - Consistent API response wrapper
 * Matches backend response patterns
 */
export interface StandardResponse<T = any> {
  status: 'success' | 'error';
  message?: string;
  data?: T;
  errors?: Record<string, string[]>;
}

/**
 * PaginatedResponse - For paginated API responses
 * Matches backend pagination structure
 */
export interface PaginatedResponse<T> {
  status: 'success' | 'error';
  message?: string;
  data: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNext: boolean;
    hasPrevious: boolean;
  };
}

/**
 * ListResponse - For simple list responses without pagination
 */
export interface ListResponse<T> {
  status: 'success' | 'error';
  message?: string;
  data: T[];
  total?: number;
}

// ========================================
// ERROR HANDLING TYPES
// ========================================

/**
 * ApiError - Consistent error structure
 * Matches backend error response format
 */
export interface ApiError {
  status: 'error';
  message: string;
  code?: string;
  field?: string;
  details?: Record<string, any>;
  errors?: Record<string, string[]>;
}

/**
 * ValidationError - Field-specific validation errors
 */
export interface ValidationError {
  field: string;
  message: string;
  code?: string;
  value?: any;
}

// ========================================
// FOREIGN KEY REFERENCE TYPES
// ========================================

/**
 * EntityReference - For referencing other entities by ID
 * Used in foreign key relationships
 */
export interface EntityReference {
  id: EntityId;
  [key: string]: any; // Allow additional fields for display purposes
}

/**
 * UserReference - Common user reference pattern
 */
export interface UserReference extends EntityReference {
  id: EntityId;
  email?: string;
  name?: string;
  user_type?: string;
}

/**
 * ProductReference - Common product reference pattern
 */
export interface ProductReference extends EntityReference {
  id: EntityId;
  name?: string;
  sku?: string;
  price?: number;
}

/**
 * OrderReference - Common order reference pattern
 */
export interface OrderReference extends EntityReference {
  id: EntityId;
  order_number?: string;
  status?: string;
  total?: number;
}

// ========================================
// UTILITY TYPES
// ========================================

/**
 * PartialEntity - Make all fields optional except ID
 * Useful for update operations
 */
export type PartialEntity<T extends BaseEntity> = {
  id: EntityId;
} & Partial<Omit<T, 'id'>>;

/**
 * CreateEntity - Remove BaseEntity fields for creation
 * Useful for create operations
 */
export type CreateEntity<T extends BaseEntity> = Omit<
  T,
  'id' | 'created_at' | 'updated_at' | 'deleted_at'
>;

/**
 * EntityWithoutTimestamps - Entity without timestamp fields
 * Useful for form handling
 */
export type EntityWithoutTimestamps<T extends BaseEntity> = Omit<
  T,
  'created_at' | 'updated_at' | 'deleted_at'
>;

// ========================================
// LOOKUP TYPES
// ========================================

/**
 * EntityLookup - Generic lookup/dictionary by ID
 * Useful for state normalization
 */
export type EntityLookup<T> = Record<EntityId, T>;

/**
 * EntityCollection - Collection with lookup and array
 * Useful for normalized state management
 */
export interface EntityCollection<T extends BaseEntity> {
  byId: EntityLookup<T>;
  allIds: EntityId[];
  total?: number;
}

// ========================================
// STATUS AND STATE TYPES
// ========================================

/**
 * LoadingState - Common loading states
 */
export type LoadingState = 'idle' | 'loading' | 'success' | 'error';

/**
 * AsyncState - Common async operation state
 */
export interface AsyncState<T = any> {
  data: T | null;
  loading: boolean;
  error: string | null;
  lastFetch?: Timestamp;
}

/**
 * EntityState - Common entity management state
 */
export interface EntityState<T extends BaseEntity> extends AsyncState<EntityCollection<T>> {
  selected?: EntityId | null;
  filters?: Record<string, any>;
  sort?: {
    field: string;
    direction: 'asc' | 'desc';
  };
}

// ========================================
// TYPE GUARDS
// ========================================

/**
 * Type guard to check if value is valid EntityId
 */
export function isEntityId(value: any): value is EntityId {
  return typeof value === 'string' && value.length > 0;
}

/**
 * Type guard to check if value is BaseEntity
 */
export function isBaseEntity(value: any): value is BaseEntity {
  return (
    typeof value === 'object' &&
    value !== null &&
    'id' in value &&
    'created_at' in value &&
    'updated_at' in value &&
    isEntityId(value.id)
  );
}

/**
 * Type guard to check if response is StandardResponse
 */
export function isStandardResponse(value: any): value is StandardResponse {
  return (
    typeof value === 'object' &&
    value !== null &&
    'status' in value &&
    (value.status === 'success' || value.status === 'error')
  );
}

/**
 * Type guard to check if response is ApiError
 */
export function isApiError(value: any): value is ApiError {
  return (
    isStandardResponse(value) &&
    value.status === 'error' &&
    'message' in value
  );
}

// ========================================
// EXPORT ALL TYPES
// ========================================

export type {
  // Re-export for convenience
  BaseEntity,
  CreateEntityRequest,
  UpdateEntityRequest,
  StandardResponse,
  PaginatedResponse,
  ListResponse,
  ApiError,
  ValidationError,
  EntityReference,
  UserReference,
  ProductReference,
  OrderReference,
  PartialEntity,
  CreateEntity,
  EntityWithoutTimestamps,
  EntityLookup,
  EntityCollection,
  LoadingState,
  AsyncState,
  EntityState,
};