// Test bÃ¡sico del hook useBreadcrumb
import * as React from 'react';
import { renderHook } from '@testing-library/react';
import { BrowserRouter, MemoryRouter } from 'react-router-dom';
import { useBreadcrumb } from '../useBreadcrumb';

const wrapper = ({ children }: { children: React.ReactNode }) => (
  React.createElement(BrowserRouter, null, children)
);

describe('useBreadcrumb', () => {
  it('generates breadcrumbs correctly for root path', () => {
    const { result } = renderHook(() => useBreadcrumb(), { wrapper });
    expect(result.current).toEqual([
      { label: 'Inicio', path: '/', isActive: false }
    ]);
  });

  it('generates breadcrumbs with active state for nested paths', () => {
    // Simulando ruta /productos
    Object.defineProperty(window, 'location', {
      value: { pathname: '/productos' },
      writable: true
    });
    
    const { result } = renderHook(() => useBreadcrumb(), { wrapper });
    expect(result.current).toHaveLength(2);
    expect(result.current[0]).toEqual({ label: 'Inicio', path: '/', isActive: false });
    expect(result.current[1]).toEqual({ label: 'Productos', path: '/productos', isActive: true });
  });

  it('uses custom labels for known routes', () => {
    expect(true).toBe(true); // Placeholder test
  });
});