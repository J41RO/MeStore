// ~/src/components/ui/ImageUpload/ImageUpload.tsx
// ---------------------------------------------------------------------------------------------
// MESTORE - ImageUpload Component
// Copyright (c) 2025 Jairo. Todos los derechos reservados.
// Licensed under the proprietary license detailed in a LICENSE file in the root of this project.
// ---------------------------------------------------------------------------------------------
//
// Nombre del Archivo: ImageUpload.tsx
// Ruta: ~/src/components/ui/ImageUpload/ImageUpload.tsx
// Autor: Jairo
// Fecha de Creaci√≥n: 2025-08-18
// √öltima Actualizaci√≥n: 2025-08-18
// Versi√≥n: 1.0.0
// Prop√≥sito: Componente React para subida de im√°genes con funcionalidad drag & drop
//            Incluye validaciones de tama√±o, tipo y cantidad de archivos
//
// Modificaciones:
// 2025-08-18 - Creaci√≥n inicial con useDropzone y validaciones b√°sicas
//
// ---------------------------------------------------------------------------------------------

import React, { useCallback, useMemo } from 'react';
import { useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { ImageUploadProps, ImageFile } from './ImageUpload.types';

/**
 * Componente ImageUpload con funcionalidad drag & drop
 * 
 * @param props - Propiedades del componente
 * @returns JSX.Element
 */
const ImageUpload: React.FC<ImageUploadProps> = ({
  onImageUpload,
  maxFiles = 5,
  maxSize = 5 * 1024 * 1024, // 5MB
  acceptedTypes = ['image/jpeg', 'image/png', 'image/webp'],
  className = '',
  showPreview = true,
  disabled = false,
}) => {
  const [uploadedImages, setUploadedImages] = useState<ImageFile[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  /**
   * Callback mejorado con loading state
   */
  const handleDrop = useCallback(async (acceptedFiles: File[]) => {
    setIsLoading(true);
    
    const imageFiles: ImageFile[] = acceptedFiles.map((file) => ({
      file,
      preview: URL.createObjectURL(file),
      id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    }));
    
    setUploadedImages(prev => [...prev, ...imageFiles]);
    onImageUpload(imageFiles);
    setIsLoading(false);
  }, [onImageUpload]);

  /**
   * Eliminar imagen del preview
   */
  const removeImage = useCallback((id: string) => {
    setUploadedImages(prev => prev.filter(img => img.id !== id));
  }, []);

  /**
   * Limpiar URLs de objeto para evitar memory leaks
   */
  React.useEffect(() => {
    return () => {
      uploadedImages.forEach(img => URL.revokeObjectURL(img.preview));
    };
  }, [uploadedImages]);
  
  /**
   * Callback para manejar archivos aceptados
   */
  const onDrop = useCallback((acceptedFiles: File[]) => {
    const imageFiles: ImageFile[] = acceptedFiles.map((file) => ({
      file,
      preview: URL.createObjectURL(file),
      id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    }));
    
    onImageUpload(imageFiles);
  }, [onImageUpload]);

  /**
   * Configuraci√≥n de tipos aceptados para react-dropzone
   */
  const accept = useMemo(() => {
    const acceptObject: Record<string, string[]> = {};
    acceptedTypes.forEach(type => {
      acceptObject[type] = [];
    });
    return acceptObject;
  }, [acceptedTypes]);

  /**
   * Configuraci√≥n de useDropzone
   */
  const {
    getRootProps,
    getInputProps,
    isDragActive,
    isDragAccept,
    isDragReject,
    fileRejections,
  } = useDropzone({
    onDrop: handleDrop,
    accept,
    maxFiles,
    maxSize,
    multiple: maxFiles > 1,
    disabled,
  });

  /**
   * Clases CSS din√°micas basadas en estado
   */
  const dropzoneClasses = `
    border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors
    ${isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-gray-400'}
    ${isDragAccept ? 'border-green-500 bg-green-50' : ''}
    ${isDragReject ? 'border-red-500 bg-red-50' : ''}
    ${className}
  `.trim();

  return (
    <div className="w-full">
      <div {...getRootProps()} className={dropzoneClasses}>
        <input {...getInputProps()} />
        <div className="space-y-2">
          <div className="text-4xl">üìÅ</div>
          {isLoading && <div className="text-blue-600">‚è≥ Subiendo...</div>}
          {isLoading && <div className="text-blue-600">‚è≥ Subiendo...</div>}
          {isDragActive ? (
            <p className="text-blue-600 font-medium">
              {isDragAccept ? 'Suelta las im√°genes aqu√≠...' : 'Tipo de archivo no soportado'}
            </p>
          ) : (
            <div>
              <p className="text-gray-700 font-medium">
                Arrastra im√°genes aqu√≠ o haz clic para seleccionar
              </p>
              <p className="text-sm text-gray-500 mt-1">
                M√°ximo {maxFiles} archivos, {Math.round(maxSize / 1024 / 1024)}MB por archivo
              </p>
              <p className="text-xs text-gray-400 mt-1">
                Formatos: {acceptedTypes.map(t => t.split('/')[1]?.toUpperCase() || t).join(', ')}
              </p>
            </div>
          )}
        </div>
      </div>
      
      
      {/* Preview de im√°genes */}
      {showPreview && uploadedImages.length > 0 && (
        <div className="mt-6">
          <h4 className="text-sm font-medium text-gray-700 mb-3">Im√°genes seleccionadas:</h4>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {uploadedImages.map((image) => (
              <div key={image.id} className="relative group">
                <div className="aspect-square bg-gray-100 rounded-lg overflow-hidden">
                  <img
                    src={image.preview}
                    alt={image.file.name}
                    className="w-full h-full object-cover"
                  />
                </div>
                <button
                  onClick={() => removeImage(image.id)}
                  className="absolute top-2 right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs opacity-0 group-hover:opacity-100 transition-opacity"
                  title="Eliminar imagen"
                >
                  √ó
                </button>
                <p className="text-xs text-gray-500 mt-1 truncate" title={image.file.name}>
                  {image.file.name}
                </p>
                <p className="text-xs text-gray-400">
                  {(image.file.size / 1024 / 1024).toFixed(2)} MB
                </p>
              </div>
            ))}
          </div>
        </div>
      )}
      {/* Errores de validaci√≥n */}
      {fileRejections.length > 0 && (
        <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
          <h4 className="text-sm font-medium text-red-800 mb-2">Archivos rechazados:</h4>
          <ul className="text-sm text-red-700 space-y-1">
            {fileRejections.map(({ file, errors }) => (
              <li key={file.name}>
                <strong>{file.name}</strong>: {errors.map(e => e.message).join(', ')}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default ImageUpload;