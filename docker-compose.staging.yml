# ~/docker-compose.staging.yml
# ---------------------------------------------------------------------------------------------
# MESTORE - Staging Docker Compose Configuration
# Copyright (c) 2025 Jairo. Todos los derechos reservados.
# Licensed under the proprietary license detailed in a LICENSE file in the root of this project.
# ---------------------------------------------------------------------------------------------
#
# Nombre del Archivo: docker-compose.staging.yml
# Ruta: ~/docker-compose.staging.yml
# Autor: DevOps Integration AI
# Fecha de Creación: 2025-09-17
# Última Actualización: 2025-09-17
# Versión: 1.0.0
# Propósito: Orquestación de servicios para entorno de staging
#            Configuración intermedia entre desarrollo y producción
#
# Modificaciones:
# 2025-09-17 - Configuración staging con debug y monitoring limitado
#
# ---------------------------------------------------------------------------------------------

version: '3.8'

# ===== SERVICIOS DE STAGING =====
services:
  # ===== MIGRATION SERVICE =====
  migrations:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: mestore_migrations_staging
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - RUN_MIGRATIONS=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/home/appuser/app/logs
    networks:
      - mestore_staging
    profiles:
      - migration
    command: ["python", "-m", "alembic", "upgrade", "head"]
    restart: "no"

  # ===== BACKEND SERVICE =====
  backend:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: mestore_backend_staging
    ports:
      - "${BACKEND_PORT:-8001}:8000"
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - UVICORN_WORKERS=${UVICORN_WORKERS:-2}
      - UVICORN_LOG_LEVEL=debug
      - RUN_MIGRATIONS=false
      # Debug settings para staging
      - DEBUG=true
      - TESTING=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    volumes:
      - ./logs:/home/appuser/app/logs
      - ./uploads:/home/appuser/app/uploads
      - ./qr_codes:/home/appuser/app/qr_codes
    networks:
      - mestore_staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.15'

  # ===== FRONTEND SERVICE =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: mestore_frontend_staging
    ports:
      - "${FRONTEND_PORT:-8081}:80"
    depends_on:
      - backend
    volumes:
      - ./nginx/nginx.staging.conf:/etc/nginx/nginx.conf:ro
    networks:
      - mestore_staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # ===== DATABASE SERVICE =====
  postgres:
    image: postgres:15-alpine
    container_name: mestore_postgres_staging
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mestore_staging}
      POSTGRES_USER: ${POSTGRES_USER:-mestore_staging_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./scripts/init-staging-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    networks:
      - mestore_staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mestore_staging_user} -d ${POSTGRES_DB:-mestore_staging}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ===== REDIS SERVICE =====
  redis:
    image: redis:7-alpine
    container_name: mestore_redis_staging
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_staging_data:/data
    networks:
      - mestore_staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # ===== MONITORING BÁSICO PARA STAGING =====
  prometheus:
    image: prom/prometheus:latest
    container_name: mestore_prometheus_staging
    ports:
      - "${PROMETHEUS_PORT:-9091}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_staging_data:/prometheus
    networks:
      - mestore_staging
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

# ===== VOLUMES =====
volumes:
  postgres_staging_data:
    driver: local
    name: mestore_postgres_staging_data

  redis_staging_data:
    driver: local
    name: mestore_redis_staging_data

  prometheus_staging_data:
    driver: local
    name: mestore_prometheus_staging_data

# ===== NETWORKS =====
networks:
  mestore_staging:
    driver: bridge
    name: mestore_staging_network
    ipam:
      config:
        - subnet: 172.21.0.0/16