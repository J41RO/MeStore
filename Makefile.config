# Configuration Management Makefile
# ===================================
#
# This Makefile provides automated configuration management
# for the MeStore application across all environments.
#
# Author: Configuration Management AI
# Date: 2025-09-17
# Version: 1.0.0

.PHONY: help config-help secrets-help docker-help
.DEFAULT_GOAL := help

# Configuration directories
CONFIG_DIR := .workspace/departments/infrastructure/sections/configuration-management
TOOLS_DIR := $(CONFIG_DIR)/tools
DOCS_DIR := $(CONFIG_DIR)/docs

# Environment variables
ENVIRONMENT ?= development
SECRET_TYPE ?= jwt_secret
DOCKER_COMPOSE_FILES := -f docker-compose.yml

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Help target
help: ## Show this help message
	@echo "$(BLUE)MeStore Configuration Management$(NC)"
	@echo "=================================="
	@echo ""
	@echo "$(YELLOW)Available targets:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(YELLOW)Sub-help available:$(NC)"
	@echo "  $(GREEN)make config-help$(NC)     Configuration management commands"
	@echo "  $(GREEN)make secrets-help$(NC)    Secret management commands"
	@echo "  $(GREEN)make docker-help$(NC)     Docker secrets commands"

config-help: ## Show configuration management help
	@echo "$(BLUE)Configuration Management Commands$(NC)"
	@echo "=================================="
	@echo ""
	@echo "$(YELLOW)Environment Management:$(NC)"
	@echo "  make config-validate ENV=production    Validate environment configuration"
	@echo "  make config-generate ENV=development   Generate environment file"
	@echo "  make config-diff ENV1=dev ENV2=prod    Compare environments"
	@echo "  make config-template ENV=staging       Create environment template"
	@echo ""
	@echo "$(YELLOW)Security Validation:$(NC)"
	@echo "  make config-security-scan              Scan for security issues"
	@echo "  make config-secrets-audit              Audit secret usage"
	@echo "  make config-compliance-check           Check compliance standards"

secrets-help: ## Show secret management help
	@echo "$(BLUE)Secret Management Commands$(NC)"
	@echo "============================="
	@echo ""
	@echo "$(YELLOW)Secret Generation:$(NC)"
	@echo "  make secret-generate TYPE=jwt_secret   Generate secure secret"
	@echo "  make secret-validate FILE=.env         Validate secrets in file"
	@echo "  make secrets-init ENV=production       Initialize all secrets"
	@echo ""
	@echo "$(YELLOW)Secret Rotation:$(NC)"
	@echo "  make secret-rotate NAME=jwt_secret     Rotate specific secret"
	@echo "  make secrets-check-rotation            Check rotation schedule"
	@echo "  make secrets-auto-rotate               Auto-rotate eligible secrets"
	@echo "  make secrets-rotation-report           Generate rotation report"

docker-help: ## Show Docker secrets help
	@echo "$(BLUE)Docker Secrets Management$(NC)"
	@echo "============================="
	@echo ""
	@echo "$(YELLOW)Docker Secrets:$(NC)"
	@echo "  make docker-secrets-init               Initialize Docker secrets"
	@echo "  make docker-secrets-list               List all Docker secrets"
	@echo "  make docker-secrets-rotate NAME=jwt    Rotate Docker secret"
	@echo "  make docker-secrets-validate           Validate Docker secrets"
	@echo ""
	@echo "$(YELLOW)Docker Deployment:$(NC)"
	@echo "  make docker-deploy-dev                 Deploy development stack"
	@echo "  make docker-deploy-prod                Deploy production stack with secrets"
	@echo "  make docker-stack-status               Check stack status"

# ================================
# Configuration Management
# ================================

config-validate: ## Validate environment configuration
	@echo "$(BLUE)Validating configuration for $(ENVIRONMENT)...$(NC)"
	@if [ -f ".env.$(ENVIRONMENT)" ]; then \
		python3 $(TOOLS_DIR)/secret_validator.py --env-file .env.$(ENVIRONMENT) --security-level $(ENVIRONMENT); \
	else \
		echo "$(RED)Error: .env.$(ENVIRONMENT) not found$(NC)"; \
		exit 1; \
	fi

config-generate: ## Generate environment configuration file
	@echo "$(BLUE)Generating configuration for $(ENVIRONMENT)...$(NC)"
	@python3 $(TOOLS_DIR)/secret_generator.py create-env $(ENVIRONMENT) --output .env.$(ENVIRONMENT).generated
	@echo "$(GREEN)Generated: .env.$(ENVIRONMENT).generated$(NC)"

config-diff: ## Compare two environment configurations
	@echo "$(BLUE)Comparing $(ENV1) vs $(ENV2) configurations...$(NC)"
	@if [ -f ".env.$(ENV1)" ] && [ -f ".env.$(ENV2)" ]; then \
		diff -u .env.$(ENV1) .env.$(ENV2) || true; \
	else \
		echo "$(RED)Error: One or both environment files not found$(NC)"; \
	fi

config-template: ## Create environment template
	@echo "$(BLUE)Creating template for $(ENVIRONMENT)...$(NC)"
	@cp .env.example .env.$(ENVIRONMENT).template
	@echo "$(GREEN)Created: .env.$(ENVIRONMENT).template$(NC)"

config-security-scan: ## Scan configuration for security issues
	@echo "$(BLUE)Scanning configuration for security issues...$(NC)"
	@for env_file in .env*; do \
		if [ -f "$$env_file" ] && [ "$$env_file" != ".env.example" ]; then \
			echo "$(YELLOW)Scanning $$env_file...$(NC)"; \
			python3 $(TOOLS_DIR)/secret_validator.py --env-file "$$env_file" --json | \
			jq '.[] | select(.security_score < 70) | {file: "$$env_file", secret: .}' || true; \
		fi; \
	done

config-secrets-audit: ## Audit secret usage across configuration
	@echo "$(BLUE)Auditing secret usage...$(NC)"
	@grep -r "SECRET\|PASSWORD\|KEY\|TOKEN" .env* 2>/dev/null | \
	grep -v ".env.example" | \
	awk -F: '{print $$1 ": " $$2}' | \
	sort | uniq

config-compliance-check: ## Check configuration compliance
	@echo "$(BLUE)Checking compliance standards...$(NC)"
	@echo "$(YELLOW)Checking for hardcoded secrets...$(NC)"
	@grep -r "dev-secret\|change-me\|your-key\|test-key" .env* 2>/dev/null | grep -v ".env.example" || echo "$(GREEN)✓ No hardcoded secrets found$(NC)"
	@echo "$(YELLOW)Checking for proper file permissions...$(NC)"
	@ls -la .env* 2>/dev/null | awk '$$1 !~ /^-rw-------/ && $$9 != ".env.example" {print "$(RED)✗ Insecure permissions: " $$9 "$(NC)"}'

# ================================
# Secret Management
# ================================

secret-generate: ## Generate a secure secret
	@echo "$(BLUE)Generating $(SECRET_TYPE) secret...$(NC)"
	@python3 $(TOOLS_DIR)/secret_generator.py generate $(SECRET_TYPE) --environment $(ENVIRONMENT)

secret-validate: ## Validate secrets in a file
	@echo "$(BLUE)Validating secrets in $(FILE)...$(NC)"
	@python3 $(TOOLS_DIR)/secret_validator.py --env-file $(FILE) --security-level $(ENVIRONMENT)

secrets-init: ## Initialize all secrets for environment
	@echo "$(BLUE)Initializing all secrets for $(ENVIRONMENT)...$(NC)"
	@python3 $(TOOLS_DIR)/secret_generator.py create-env $(ENVIRONMENT)

secret-rotate: ## Rotate a specific secret
	@echo "$(BLUE)Rotating secret: $(NAME)...$(NC)"
	@python3 $(TOOLS_DIR)/secret_generator.py rotate $(NAME) --environment $(ENVIRONMENT)

secrets-check-rotation: ## Check rotation schedule
	@echo "$(BLUE)Checking rotation schedule for $(ENVIRONMENT)...$(NC)"
	@python3 $(TOOLS_DIR)/secret_generator.py check --environment $(ENVIRONMENT)

secrets-auto-rotate: ## Auto-rotate eligible secrets
	@echo "$(BLUE)Auto-rotating eligible secrets for $(ENVIRONMENT)...$(NC)"
	@python3 $(TOOLS_DIR)/secret_generator.py auto-rotate --environment $(ENVIRONMENT)

secrets-rotation-report: ## Generate rotation status report
	@echo "$(BLUE)Generating rotation report for $(ENVIRONMENT)...$(NC)"
	@python3 $(TOOLS_DIR)/secret_generator.py report --environment $(ENVIRONMENT)

# ================================
# Docker Secrets Management
# ================================

docker-secrets-init: ## Initialize Docker secrets
	@echo "$(BLUE)Initializing Docker secrets...$(NC)"
	@$(TOOLS_DIR)/docker_secrets_manager.sh init

docker-secrets-list: ## List Docker secrets
	@echo "$(BLUE)Listing Docker secrets...$(NC)"
	@$(TOOLS_DIR)/docker_secrets_manager.sh list

docker-secrets-rotate: ## Rotate Docker secret
	@echo "$(BLUE)Rotating Docker secret: $(NAME)...$(NC)"
	@$(TOOLS_DIR)/docker_secrets_manager.sh rotate $(NAME)

docker-secrets-validate: ## Validate Docker secrets configuration
	@echo "$(BLUE)Validating Docker secrets...$(NC)"
	@$(TOOLS_DIR)/docker_secrets_manager.sh validate

docker-deploy-dev: ## Deploy development stack
	@echo "$(BLUE)Deploying development stack...$(NC)"
	@docker-compose -f docker-compose.yml up -d

docker-deploy-prod: ## Deploy production stack with secrets
	@echo "$(BLUE)Deploying production stack with secrets...$(NC)"
	@$(TOOLS_DIR)/docker_secrets_manager.sh validate
	@docker-compose -f docker-compose.yml -f docker-compose.secrets.yml up -d

docker-stack-status: ## Check Docker stack status
	@echo "$(BLUE)Checking Docker stack status...$(NC)"
	@docker-compose ps
	@echo ""
	@echo "$(YELLOW)Secret status:$(NC)"
	@$(TOOLS_DIR)/docker_secrets_manager.sh list

# ================================
# Development Utilities
# ================================

config-dev-setup: ## Setup development configuration
	@echo "$(BLUE)Setting up development configuration...$(NC)"
	@if [ ! -f ".env" ]; then cp .env.example .env; fi
	@python3 $(TOOLS_DIR)/secret_generator.py create-env development --output .env.development
	@echo "$(GREEN)Development setup complete!$(NC)"
	@echo "$(YELLOW)Next steps:$(NC)"
	@echo "  1. Review .env.development"
	@echo "  2. Copy to .env if needed"
	@echo "  3. Run: make config-validate ENV=development"

config-prod-prepare: ## Prepare production configuration
	@echo "$(BLUE)Preparing production configuration...$(NC)"
	@python3 $(TOOLS_DIR)/secret_generator.py create-env production --output .env.production.secure
	@echo "$(GREEN)Production configuration generated: .env.production.secure$(NC)"
	@echo "$(RED)WARNING: Review and secure this file before deployment!$(NC)"
	@echo "$(YELLOW)Next steps:$(NC)"
	@echo "  1. Review .env.production.secure"
	@echo "  2. Deploy secrets to secure location"
	@echo "  3. Run: make config-validate ENV=production"
	@echo "  4. Initialize Docker secrets: make docker-secrets-init"

config-clean: ## Clean generated configuration files
	@echo "$(BLUE)Cleaning generated configuration files...$(NC)"
	@rm -f .env.*.generated .env.*.secure
	@echo "$(GREEN)Cleanup complete$(NC)"

# ================================
# Audit and Reporting
# ================================

config-audit-report: ## Generate comprehensive audit report
	@echo "$(BLUE)Generating configuration audit report...$(NC)"
	@mkdir -p reports
	@{
		echo "# Configuration Audit Report"; \
		echo "Generated: $$(date)"; \
		echo ""; \
		echo "## Security Scan Results"; \
		make config-security-scan 2>/dev/null; \
		echo ""; \
		echo "## Secret Rotation Status"; \
		make secrets-rotation-report 2>/dev/null; \
		echo ""; \
		echo "## Compliance Check"; \
		make config-compliance-check 2>/dev/null; \
	} > reports/config-audit-$$(date +%Y%m%d-%H%M%S).md
	@echo "$(GREEN)Audit report generated in reports/$(NC)"

# ================================
# Testing and Validation
# ================================

config-test: ## Test configuration management tools
	@echo "$(BLUE)Testing configuration management tools...$(NC)"
	@python3 -m pytest $(TOOLS_DIR)/test_*.py -v || echo "$(YELLOW)No tests found$(NC)"

config-lint: ## Lint configuration files
	@echo "$(BLUE)Linting configuration files...$(NC)"
	@for file in .env*; do \
		if [ -f "$$file" ]; then \
			echo "$(YELLOW)Checking $$file...$(NC)"; \
			grep -n "^[^#]*=" "$$file" | while read -r line; do \
				if echo "$$line" | grep -q "=$$"; then \
					echo "$(RED)Empty value in $$file: $$line$(NC)"; \
				fi; \
			done; \
		fi; \
	done

# ================================
# Documentation
# ================================

config-docs: ## Generate configuration documentation
	@echo "$(BLUE)Generating configuration documentation...$(NC)"
	@mkdir -p $(DOCS_DIR)
	@echo "# Configuration Management Documentation" > $(DOCS_DIR)/generated-docs.md
	@echo "" >> $(DOCS_DIR)/generated-docs.md
	@echo "## Available Make Targets" >> $(DOCS_DIR)/generated-docs.md
	@echo "" >> $(DOCS_DIR)/generated-docs.md
	@echo "\`\`\`" >> $(DOCS_DIR)/generated-docs.md
	@make help >> $(DOCS_DIR)/generated-docs.md
	@echo "\`\`\`" >> $(DOCS_DIR)/generated-docs.md
	@echo "$(GREEN)Documentation generated: $(DOCS_DIR)/generated-docs.md$(NC)"